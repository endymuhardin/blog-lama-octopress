<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Living life and make it better]]></title>
  <link href="http://software.endy.muhardin.com/atom.xml" rel="self"/>
  <link href="http://software.endy.muhardin.com/"/>
  <updated>2013-06-18T12:22:24+07:00</updated>
  <id>http://software.endy.muhardin.com/</id>
  <author>
    <name><![CDATA[Endy Muhardin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mengobati OOM]]></title>
    <link href="http://software.endy.muhardin.com/java/mengobati-oom/"/>
    <updated>2013-06-08T22:25:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/mengobati-oom</id>
    <content type="html"><![CDATA[<p>Beberapa waktu belakangan ini, di milis mulai banyak bermunculan pertanyaan yang berkaitan dengan Out Of Memory Error (OOM).
Error ini biasanya terjadi bila data dalam aplikasi sudah besar (melebihi 2 GB), dan umumnya terjadi pada saat membuat report PDF/XLS/CSV, dsb.</p>

<p>Biasanya juga, <em>obat yang dikonsumsi</em> oleh penderita OOM ini ada dua:</p>

<ul>
<li>Mengatur alokasi memori dengan opsi <code>Xms</code> dan <code>Xmx</code></li>
<li>Menggunakan perintah <code>System.gc()</code></li>
</ul>


<p>Sayangnya, kedua <em>obat</em> ini tidak akan menyelesaikan masalah. Analoginya seperti kita kena infeksi otak, lalu minum Panadol. Sakit kepalanya mungkin akan hilang sementara waktu, tapi tidak lama kemudian justru akibatnya lebih fatal.</p>

<p>Lalu bagaimana solusinya?</p>

<!--more-->


<h1>Salah Kaprah tentang OOM</h1>

<p>Pertama, saya luruskan dulu mengenai <code>System.gc</code>.
Intinya begini</p>

<blockquote><p>System.gc() hanya boleh dipakai dengan satu (dan hanya satu-satunya) syarat:
Yaitu pada waktu sudah bisa menjelaskan ke orang lain bagaimana cara kerja garbage collector dan sudah paham apa itu JVM Ergonomics.</p></blockquote>

<p>Next time mau mengetik System.gc, tanyakan pada diri sendiri, apakah saya sudah paham JVM Ergonomics dan bisa menjelaskannya ke orang lain? Kalau jawabannya belum, jangan diteruskan mengetik System.gc().</p>

<blockquote><p>Lalu apa itu <code>System.gc</code> dan kapan digunakan?</p></blockquote>

<p>Kan sudah dijelaskan di atas, pelajari cara kerja garbage collector dan apa itu JVM ergonomics.</p>

<p>Satu lagi salah kaprah yang harus dibenahi :
opsi <code>Xms</code> dan <code>Xmx</code> itu gunanya adalah <strong>UNTUK MEMAKSIMALKAN PENGGUNAAN MEMORI</strong>.
<code>Xms</code> dan <code>Xms</code> <strong>BUKAN SOLUSI UNTUK MASALAH OOM</strong>.</p>

<p>Masalah OOM itu ada di kode program kita sendiri, jadi carilah solusinya di kode program kita sendiri.
Penyebab OOM itu juga cuma satu : aplikasi kita menggunakan memori lebih besar daripada yang tersedia.
Besar pasak daripada tiang.</p>

<ol>
<li>Memori tersedia 4 GB, aplikasi kita pakai 4.1 GB => OOM</li>
<li>Memori tersedia 2 GB, aplikasi kita pakai 1.5 GB => No OOM padahal lebih kecil dari #1</li>
<li>RAM fisik ada 16 GB, tapi aplikasi kita cuma bisa memanfaatkan 2 GB => gunakan <code>Xms</code> dan <code>Xmx</code>.</li>
</ol>


<h1>Penyebab OOM dan Solusinya</h1>

<p>Beberapa penyebab umum terjadinya OOM :</p>

<h2>Unbounded Query</h2>

<p>Unbounded query adalah query yang tidak kita batasi jumlahnya.
Contohnya <code>select * from tbl_penjualan</code>. Kalau data penjualan hanya 1000 transaksi, no problem. Kalau transaksinya ada 10 juta record dalam satu hari, ya pasti langsung kena OOM.</p>

<p>Solusinya : pastikan selalu menggunakan paging. Ganti querynya menjadi <code>select * from tbl_penjualan limit 0,20</code> sehingga cuma mengeluarkan 20 record, berapapun banyaknya data dalam tabel.</p>

<h2>Generate File</h2>

<p>Seringkali kita ingin menghasilkan file report. Misalnya laporan penjualan bulan ini, berapapun data yang ada di tabel untuk periode bulan ini, harus ditulis ke file. File ini bisa berupa PDF, XLS, XML, CSV, dan sebagainya.</p>

<p>Format file tidak masalah. Yang menjadi masalah adalah cara membuatnya. Ada beberapa kesalahan umum :</p>

<ul>
<li>mengumpulkan data di variabel sebelum menulis file</li>
<li>tidak melepas data yang sudah diproses</li>
<li>tidak paham cara kerja report engine</li>
</ul>


<h3>Mengumpulkan data di variabel</h3>

<p>Contoh pseudocode seperti ini</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Penjualan</span><span class="o">&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Penjualan</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// resultset adalah cursor, dia hanya baca apa yang ditarik saja</span>
</span><span class='line'><span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">createStatement</span><span class="o">(</span><span class="s">&quot;select * from tbl_penjualan&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">()){</span>
</span><span class='line'>    <span class="n">Penjualan</span> <span class="n">p</span> <span class="o">=</span> <span class="n">konversiResultSetJadiPenjualan</span><span class="o">(</span><span class="n">rs</span><span class="o">);</span>
</span><span class='line'>    <span class="n">data</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Coding di atas akan mengumpulkan semua record di variabel <code>data</code>.
Bila ada 1 juta record yang dihasilkan oleh query dengan masing-masing record berukuran 1 KB,
maka variabel data tersebut akan berukuran 1 GB. Kalau Java VM kita berikan alokasi 2 GB, cuma butuh 3 user untuk menimbulkan OOM.
Menaikkan alokasi menjadi 8 GB melalui <code>Xms</code> dan <code>Xmx</code> tidak akan membantu banyak.</p>

<h3>Tidak melepas data yang sudah diproses</h3>

<p>Ini biasanya terjadi kalau kita menulis sendiri file output. Perhatikan contoh kode berikut:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">createStatement</span><span class="o">(</span><span class="s">&quot;select * from tbl_penjualan&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">File</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;output.csv&quot;</span><span class="o">);</span>
</span><span class='line'><span class="k">while</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">()){</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">baris</span> <span class="o">=</span> <span class="n">konversiResultSetJadiString</span><span class="o">(</span><span class="n">rs</span><span class="o">);</span>
</span><span class='line'>    <span class="n">output</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">baris</span><span class="o">);</span>
</span><span class='line'>    <span class="n">output</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Menulis file ada bermacam-macam. Ada yang menggunakan buffer ada yang tidak. Pastikan kita mengosongkan buffer setiap kali iterasi supaya tidak penuh, biasanya dengan method <code>flush</code> atau sejenisnya.</p>

<h3>Tidak paham cara kerja report engine</h3>

<p>Dalam mendesain library yang dipakai orang banyak, biasanya si pembuat akan melakukan optimasi untuk penggunaan yang sering terjadi.
Misalnya 80% orang membuat PDF berukuran 10 halaman atau lebih sedikit, 20% sisanya membuat 1000 halaman atau lebih.
Pada situasi ini, pembuat library report yang baik pasti akan memudahkan pembuatan 10 halaman report karena itulah fitur yang paling sering digunakan.</p>

<p>Bila kita termasuk golongan yang 20%, kita harus belajar lebih giat supaya paham bagaimana mengatasi kondisi minoritas tersebut.</p>

<p>Sebagai contoh, kalau kita menggunakan Jasper Report, ada fitur yang disebut dengan <a href="http://community.jaspersoft.com/wiki/comparison-report-virtualizers">Virtualizer</a> untuk membuat report berukuran besar. Pastikan kita sudah memahami kasus-kasus khusus ini.</p>

<h2>Inisialisasi object besar di dalam loop</h2>

<p>Perhatikan contoh kode di bawah</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">){</span>
</span><span class='line'>    <span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&quot;konfig-spring.xml&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">ProdukDao</span> <span class="n">pd</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">ProdukDao</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">pd</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ApplicationContext</code> merupakan object Spring Framework yang berisi seluruh konfigurasi aplikasi. Isinya :</p>

<ul>
<li>konfigurasi database</li>
<li>mapping ORM (kalau pakai ORM)</li>
<li>semua object yang dimanage Spring</li>
</ul>


<p>Intinya, ini adalah object yang besar sekali dan sangat kompleks. Object seperti ini biasanya hanya dibuat sekali saja sepanjang aplikasi dijalankan. Bila kita taruh dalam method seperti di atas, maka tiap kali ada user simpan data produk, object besar tersebut akan dibuat, sehingga menghabiskan memori.</p>

<p>Pesan moralnya, pahami library yang digunakan supaya tahu karakteristik dan cara kerjanya.</p>

<h2>Penggunaan collection yang kurang benar</h2>

<p>Collection (Set, Map, List) adalah object yang menampung object lain. Kita harus memastikan bahwa object ini berada dalam scope yang benar. Lihat kode program berikut</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Coba</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">noSurat</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Integer</span> <span class="n">noTerakhir</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">bikinSuratBaru</span><span class="o">(){</span>
</span><span class='line'>        <span class="n">noTerakhir</span><span class="o">++;</span>
</span><span class='line'>        <span class="n">noSurat</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">noTerakhir</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pada kode di atas, <code>noSurat</code> memiliki scope static, sehingga dia akan terus ada selama aplikasi berjalan. Bila aplikasi tidak mati dalam waktu yang lama, dan dalam sehari ada 1 juta surat baru, tinggal tunggu waktu saja sampai kena OOM.</p>

<h1>Panduan Solusi Umum</h1>

<p>Selain yang disebutkan di atas, masih banyak penyebab lain, yang paling sering terjadi adalah yang dibahas di atas. Kalau penyebab OOM tidak kita atasi, berapapun memori yang kita sediakan (melalui <code>Xms</code> dan <code>Xmx</code>) tidak akan cukup. Inilah sebabnya saya katakan bahwa <code>Xms</code> dan <code>Xmx</code> itu bukan solusi untuk OOM. Yang harus kita lakukan adalah <strong>mengendalikan pemakaian</strong> memori, bukan <strong>menambah</strong> memori.</p>

<p>Jadi kalau menemukan OOM, coba dicek lagi kode programnya.
Tidak perlu pakai VisualVM atau tools2 lain, cukup code review aja.</p>

<p>Dibaca satu2 source codenya, untuk tiap baris, tanyakan pertanyaan ini :</p>

<ol>
<li>Method/statement ini akan dipanggil seberapa sering?</li>
<li>Looping ini akan berputar maksimal berapa kali?</li>
<li>Berapa kira2 ukuran tiap row yang ditarik dalam query? Sekali tarik berapa row?</li>
<li>Setelah saya tarik row, kapan dia selesai digunakan? Apakah nunggu PDF jadi dulu baru selesai (inilah kandidat OOM), atau tiap selesai satu halaman PDF sudah bisa direlease?</li>
</ol>


<p>Mudah-mudahan dengan adanya artikel ini tidak ada lagi orang yang mengobati OOM dengan <code>System.gc</code> atau <code>Xmx</code>.</p>

<h2>Referensi</h2>

<ul>
<li><a href="http://java.dzone.com/news/how-fix-memory-leaks-java">How to fix memory leaks in Java</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mengetes Akses Database]]></title>
    <link href="http://software.endy.muhardin.com/java/mengetes-akses-database/"/>
    <updated>2013-06-05T11:49:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/mengetes-akses-database</id>
    <content type="html"><![CDATA[<p>Pada bagian ini, kita akan mempersiapkan seperangkat kode program untuk mengetes aplikasi yang telah kita buat.</p>

<p>Artikel ini merupakan bagian kelima dan terakhir dari rangkaian artikel Spring JDBC, yaitu</p>

<ol>
<li><a href="http://software.endy.muhardin.com/java/konfigurasi-koneksi-database-dengan-spring/">Konfigurasi koneksi database</a></li>
<li><a href="http://software.endy.muhardin.com/java/struktur-aplikasi-java-dengan-spring-dan-maven/">Struktur Aplikasi</a></li>
<li><a href="http://software.endy.muhardin.com/java/insert-update-delete-dengan-spring-jdbc/">Insert, update, dan delete data</a></li>
<li><a href="http://software.endy.muhardin.com/java/query-dengan-spring-jdbc/">Query data</a></li>
<li><a href="http://software.endy.muhardin.com/java/mengetes-akses-database/">Mengetes Akses Database</a></li>
</ol>


<!--more-->


<h2>Setup Test</h2>

<p>Seperti telah dijelaskan sebelumnya, test class kita akan terdiri dari dua bagian:</p>

<ol>
<li>Abstract superclass : berisi seluruh kode program pengetesan aplikasi</li>
<li>Concrete subclass : berisi kode program untuk melakukan inisialisasi</li>
</ol>


<p>Berikut adalah kerangka abstract superclass test untuk <code>Produk</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">service</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// import statement, generate menggunakan IDE</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">ProdukServiceTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">PenjualanService</span> <span class="nf">getPenjualanService</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">DataSource</span> <span class="nf">getDataSource</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Before</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">bersihkanDataTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSimpanUpdateHapusProduk</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// test method lain tidak ditampilkan</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dan berikut ini adalah concrete subclass yang berfungsi melakukan inisialisasi konfigurasi Spring JDBC</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">springjdbc</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// import statement generate menggunakan IDE</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="s">&quot;classpath*:com/muhardin/**/spring-jdbc-ctx.xml&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProdukServiceSpringJdbcTest</span> <span class="kd">extends</span> <span class="n">ProdukServiceTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">PenjualanService</span> <span class="n">penjualanService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">PenjualanService</span> <span class="nf">getPenjualanService</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">penjualanService</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">DataSource</span> <span class="nf">getDataSource</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">dataSource</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Database Reset</h2>

<p>Pada kode program abstract superclass di atas, kita melihat ada method untuk membersihkan data test. Method ini diberikan annotation <code>@Before</code> supaya dia dijalankan <strong>sebelum masing-masing test</strong>.</p>

<p>Berikut adalah isi method tersebut</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Before</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">bersihkanDataTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">DataSource</span> <span class="n">ds</span> <span class="o">=</span> <span class="n">getDataSource</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">ds</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&quot;delete from m_produk where kode like ?&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">PreparedStatement</span> <span class="n">ps</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span><span class='line'>    <span class="n">ps</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="s">&quot;T-001%&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">ps</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Di method tersebut, kita menghapus semua produk yang kodenya diawali <code>T-001</code>. Ini adalah data yang kita insert selama proses tes. Agar tidak mengganggu tes lainnya, kita hapus data percobaan tersebut.</p>

<h2>Test Insert Update Delete</h2>

<p>Proses insert, update, dan delete mengubah data yang ada dalam database. Supaya kita tidak repot mengurus data sample yang sudah ada di database, ketiga proses ini kita tes dalam satu kesatuan. Dengan demikian, setelah selesai dijalankan, datanya kembali bersih seperti sebelumnya. Berikut kode programnya.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSimpanUpdateHapusProduk</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span><span class='line'>    <span class="n">Produk</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Produk</span><span class="o">();</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="na">setHarga</span><span class="o">(</span><span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="mi">125000</span><span class="o">));</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="na">setKode</span><span class="o">(</span><span class="s">&quot;T-001&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="na">setNama</span><span class="o">(</span><span class="s">&quot;Produk Test 001&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PenjualanService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">getPenjualanService</span><span class="o">();</span>
</span><span class='line'>    <span class="n">service</span><span class="o">.</span><span class="na">simpan</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="n">assertNotNull</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">getDataSource</span><span class="o">().</span><span class="na">getConnection</span><span class="o">();</span>
</span><span class='line'>    <span class="n">PreparedStatement</span> <span class="n">psCariById</span>
</span><span class='line'>            <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span>
</span><span class='line'>                <span class="o">(</span><span class="s">&quot;select * from m_produk where id = ?&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">psCariById</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>    <span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">psCariById</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// test nilai awal</span>
</span><span class='line'>    <span class="n">assertTrue</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;T-001&quot;</span><span class="o">,</span><span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;kode&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// update record</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="na">setKode</span><span class="o">(</span><span class="s">&quot;T-001x&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">service</span><span class="o">.</span><span class="na">simpan</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// test query setelah update</span>
</span><span class='line'>    <span class="n">rs</span> <span class="o">=</span> <span class="n">psCariById</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assertTrue</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;T-001x&quot;</span><span class="o">,</span><span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;kode&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// test delete</span>
</span><span class='line'>    <span class="n">service</span><span class="o">.</span><span class="na">hapus</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// test query setelah hapus</span>
</span><span class='line'>    <span class="n">rs</span> <span class="o">=</span> <span class="n">psCariById</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assertFalse</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dari komentar yang ada dalam kode program, sudah jelas apa maksud dari masing-masing bagian.</p>

<h2>Test Query</h2>

<p>Selanjutnya kita melakukan tes terhadap query. Kita mulai dari yang sederhana dulu, yaitu tabel produk.
Berikut kode program pengetesannya.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCariProdukById</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">PenjualanService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">getPenjualanService</span><span class="o">();</span>
</span><span class='line'>    <span class="n">assertNotNull</span><span class="o">(</span><span class="n">service</span><span class="o">.</span><span class="na">cariProdukById</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
</span><span class='line'>    <span class="n">assertNull</span><span class="o">(</span><span class="n">service</span><span class="o">.</span><span class="na">cariProdukById</span><span class="o">(</span><span class="mi">99</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCariProdukByKode</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">PenjualanService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">getPenjualanService</span><span class="o">();</span>
</span><span class='line'>    <span class="n">assertNotNull</span><span class="o">(</span><span class="n">service</span><span class="o">.</span><span class="na">cariProdukByKode</span><span class="o">(</span><span class="s">&quot;K-001&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">assertNull</span><span class="o">(</span><span class="n">service</span><span class="o">.</span><span class="na">cariProdukByKode</span><span class="o">(</span><span class="s">&quot;X-001&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testHitungSemuaProduk</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">PenjualanService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">getPenjualanService</span><span class="o">();</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">Long</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">3</span><span class="o">),</span>
</span><span class='line'>        <span class="n">Long</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">service</span><span class="o">.</span><span class="na">hitungSemuaProduk</span><span class="o">()));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCariSemuaProduk</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">PenjualanService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">getPenjualanService</span><span class="o">();</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Produk</span><span class="o">&gt;</span> <span class="n">hasil</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">cariSemuaProduk</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">100</span><span class="o">);</span>
</span><span class='line'>    <span class="n">assertNotNull</span><span class="o">(</span><span class="n">hasil</span><span class="o">);</span>
</span><span class='line'>    <span class="n">assertTrue</span><span class="o">(</span><span class="n">hasil</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">3</span><span class="o">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">Produk</span> <span class="n">produk</span> <span class="o">:</span> <span class="n">hasil</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">produk</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">produk</span><span class="o">.</span><span class="na">getKode</span><span class="o">());</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">produk</span><span class="o">.</span><span class="na">getNama</span><span class="o">());</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">produk</span><span class="o">.</span><span class="na">getHarga</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Logika pengetesan tidak kompleks. Kita query datanya menggunakan method di <code>ProdukDao</code> yang telah kita buat,
lalu kita bandingkan dengan kondisi yang seharusnya. Perbandingan dilakukan menggunakan method yang telah disediakan JUnit, yaitu method berawalan <code>assert</code>, misalnya <code>assertNotNull</code>, <code>assertEquals</code>, dan lainnya.</p>

<p>Yang harus diperhatikan di sini adalah, kita harus benar-benar tahu persis isi database supaya test ini bisa berjalan dengan baik. Ada banyak teknik yang bisa digunakan untuk memastikan isi database sebelum tes dijalankan, salah satunya menggunakan tools yang bernama <a href="http://www.dbunit.org/">DBUnit</a>. Lebih lanjut tentang cara menggunakan DBUnit bisa dibaca di <a href="http://software.endy.muhardin.com/java/ruthless-testing-4/">artikel ini</a>.</p>

<h2>Test Relasi</h2>

<p>Pengetesan terhadap relasi pada prinsipnya tidak berbeda. Hanya ada sedikit tambahan yaitu kita juga harus memastikan apakah relasinya berhasil terisi dengan sempurna. Berikut pengetesannya.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCariPenjualanDetailByProdukDanPeriode</span><span class="o">(){</span>
</span><span class='line'>    <span class="n">Produk</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Produk</span><span class="o">();</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Date</span> <span class="n">mulai</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="o">(</span><span class="mi">2013</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">).</span><span class="na">toDate</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Date</span> <span class="n">sampai</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="o">(</span><span class="mi">2013</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">).</span><span class="na">toDate</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">PenjualanDetail</span><span class="o">&gt;</span> <span class="n">hasil</span> <span class="o">=</span> <span class="n">getPenjualanService</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">cariPenjualanDetailByProdukDanPeriode</span><span class="o">(</span><span class="n">p</span><span class="o">,</span>
</span><span class='line'>                <span class="n">mulai</span><span class="o">,</span> <span class="n">sampai</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">100</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assertNotNull</span><span class="o">(</span><span class="n">hasil</span><span class="o">);</span>
</span><span class='line'>    <span class="n">assertTrue</span><span class="o">(</span><span class="n">hasil</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">PenjualanDetail</span> <span class="n">penjualanDetail</span> <span class="o">:</span> <span class="n">hasil</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">verifikasiPenjualanDetail</span><span class="o">(</span><span class="n">penjualanDetail</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pada kode program di atas, terlihat bahwa kita melakukan looping yang di dalamnya ada verifikasi <code>PenjualanDetail</code>. Berikut isi methodnya.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">verifikasiPenjualanDetail</span>
</span><span class='line'>        <span class="o">(</span><span class="n">PenjualanDetail</span> <span class="n">penjualanDetail</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">assertNotNull</span><span class="o">(</span><span class="n">penjualanDetail</span><span class="o">.</span><span class="na">getProduk</span><span class="o">().</span><span class="na">getHarga</span><span class="o">());</span>
</span><span class='line'>    <span class="n">assertNotNull</span><span class="o">(</span><span class="n">penjualanDetail</span><span class="o">.</span><span class="na">getPenjualan</span><span class="o">().</span><span class="na">getWaktuTransaksi</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kita cukup memastikan bahwa relasi yang dimiliki <code>PenjualanDetail</code> yaitu <code>Produk</code> dan <code>Penjualan</code> tidak null. Demikian juga variabel yang ada di dalam objectnya yaitu <code>harga</code> dan <code>waktuTransaksi</code>.</p>

<p>Demikianlah rangkaian artikel tentang penggunaan Spring JDBC. Kode program selengkapnya dapat diambil <a href="https://github.com/endymuhardin/belajar-akses-database-java/tree/spring-jdbc">di Github</a>.
Semoga bermanfaat.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Query dengan Spring JDBC]]></title>
    <link href="http://software.endy.muhardin.com/java/query-dengan-spring-jdbc/"/>
    <updated>2013-06-03T20:08:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/query-dengan-spring-jdbc</id>
    <content type="html"><![CDATA[<p>Pada artikel sebelumnya kita telah bisa mengubah data dalam database, baik menambah (insert), mengubah (update), maupun menghapus (data). Kali ini kita akan membahas tentang cara pengambilan data (select) dari dalam database.</p>

<p>Artikel ini merupakan bagian keempat dari rangkaian artikel Spring JDBC, yaitu</p>

<ol>
<li><a href="http://software.endy.muhardin.com/java/konfigurasi-koneksi-database-dengan-spring/">Konfigurasi koneksi database</a></li>
<li><a href="http://software.endy.muhardin.com/java/struktur-aplikasi-java-dengan-spring-dan-maven/">Struktur Aplikasi</a></li>
<li><a href="http://software.endy.muhardin.com/java/insert-update-delete-dengan-spring-jdbc/">Insert, update, dan delete data</a></li>
<li><a href="http://software.endy.muhardin.com/java/query-dengan-spring-jdbc/">Query data</a></li>
<li><a href="http://software.endy.muhardin.com/java/mengetes-akses-database/">Mengetes Akses Database</a></li>
</ol>


<!--more-->


<p>Pada dasarnya, untuk mengambil data dari database hanya ada dua varian yang kita gunakan, yaitu:</p>

<ul>
<li>mengambil data tunggal, gunakan method <code>queryForObject</code></li>
<li>mengambil data banyak, gunakan method <code>queryForList</code> atau <code>query</code> saja</li>
</ul>


<p>Kita lihat dulu implementasi yang paling mendasar, ambil semua data produk dari database. Berikut deklarasi SQLnya.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SQL_CARI_SEMUA</span>
</span><span class='line'>    <span class="o">=</span> <span class="s">&quot;select * from m_produk limit ?,?&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Perintah SQL di atas akan dipakai dalam method <code>cariSemua</code> sebagai berikut</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Produk</span><span class="o">&gt;</span> <span class="nf">cariSemua</span><span class="o">(</span><span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="n">SQL_CARI_SEMUA</span><span class="o">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">ResultSetJadiProduk</span><span class="o">(),</span>
</span><span class='line'>            <span class="n">PagingHelper</span><span class="o">.</span><span class="na">halamanJadiStart</span><span class="o">(</span><span class="n">halaman</span><span class="o">,</span> <span class="n">baris</span><span class="o">),</span>
</span><span class='line'>            <span class="n">baris</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pada contoh di atas, kita menggunakan method <code>query</code> yang menerima tiga argumen, yaitu:</p>

<ul>
<li>SQL yang akan dijalankan, berupa String</li>
<li>Class yang bertugas mengubah ResultSet menjadi object yang kita inginkan, dalam hal ini object <code>Produk</code>. Class ini akan kita buat sendiri, yaitu class <code>ResultSetJadiProduk</code>.</li>
<li>argumen lain-lain (varargs). Ini merupakan fitur Java sejak versi 5 yang artinya kita bisa memasukkan argumen sebanyak-banyaknya dalam method. Argumen ini akan dikonversi menjadi List untuk diproses oleh method <code>query</code></li>
</ul>


<p>Jadi, bukan salah ketik kalau di atas saya sebut tiga argumen padahal kita memasukkan empat variabel ke dalamnya.</p>

<p>SQL select tentu tidak perlu kita bahas lagi, mari masuk ke class <code>ResultSetJadiProduk</code></p>

<h2>Membuat Mapper</h2>

<p>Class <code>ResultSetJadiProduk</code> bertugas mengkonversi hasil query ke database yang ada dalam class <code>ResultSet</code> menjadi object <code>Produk</code>. Implementasinya tidak rumit, ini dia.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">class</span> <span class="nc">ResultSetJadiProduk</span> <span class="kd">implements</span> <span class="n">RowMapper</span><span class="o">&lt;</span><span class="n">Produk</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Produk</span> <span class="nf">mapRow</span><span class="o">(</span><span class="n">ResultSet</span> <span class="n">rs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Produk</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Produk</span><span class="o">();</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setId</span><span class="o">((</span><span class="n">Integer</span><span class="o">)</span> <span class="n">rs</span><span class="o">.</span><span class="na">getObject</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setKode</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;kode&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setNama</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;nama&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setHarga</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getBigDecimal</span><span class="o">(</span><span class="s">&quot;harga&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">p</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kita membuatnya sebagai class di dalam class (inner class). Kalau lupa dengan strukturnya, silahkan baca lagi bab dua tentang Struktur Aplikasi.</p>

<p>Class ini harus implement interface <code>RowMapper&lt;T&gt;</code> milik Spring. <code>T</code> diganti dengan class yang menjadi tujuan konversi. Interface <code>RowMapper&lt;T&gt;</code> ini mewajibkan kita membuat method <code>mapRow</code>. Isi method tersebut sudah cukup jelas sehingga tidak perlu dijelaskan.</p>

<p>Class ini nantinya bisa kita gunakan juga di query yang menghasilkan satu object <code>Produk</code> seperti <code>cariById</code> dan <code>cariByKode</code>. Berikut implementasinya</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">Produk</span> <span class="nf">cariById</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">queryForObject</span><span class="o">(</span><span class="n">SQL_CARI_BY_ID</span><span class="o">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">ResultSetJadiProduk</span><span class="o">(),</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">EmptyResultDataAccessException</span> <span class="n">err</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">Produk</span> <span class="nf">cariByKode</span><span class="o">(</span><span class="n">String</span> <span class="n">kode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">queryForObject</span><span class="o">(</span><span class="n">SQL_CARI_BY_KODE</span><span class="o">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">ResultSetJadiProduk</span><span class="o">(),</span> <span class="n">kode</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">EmptyResultDataAccessException</span> <span class="n">err</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kedua method ini sama saja prinsipnya dengan <code>cariSemua</code> yang sudah kita bahas sebelumnya.</p>

<h2>Mengambil data berelasi</h2>

<p>Setelah berhasil mengambil data dari satu produk, mari kita coba untuk berurusan dengan data berelasi. Sebetulnya prinsipnya sama saja, yaitu membuatkan class konversi. Bedanya hanya terletak pada query SQL yang menggunakan join, tidak ada hubungannya dengan Spring JDBC.</p>

<p>Pada service interface, kita memiliki fitur rekap transaksi untuk satu produk tertentu, yang dimuat dalam method <code>cariPenjualanDetailByProdukDanPeriode</code>. Method tersebut memanggil method <code>cariByProdukDanPeriode</code> dalam class <code>PenjualanDetailDao</code>. Berikut implementasinya.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PenjualanDetailDao</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SQL_CARI_BY_PRODUK_DAN_PERIODE</span>
</span><span class='line'>            <span class="o">=</span> <span class="s">&quot;select pd.*, p.waktu_transaksi, &quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;produk.kode as kode_produk, produk.nama as nama_produk,&quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;produk.harga as harga_produk &quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;from t_penjualan_detail pd &quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;inner join t_penjualan p on pd.id_penjualan = p.id &quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;inner join m_produk produk on pd.id_produk = produk.id &quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;where pd.id_produk = ? &quot;</span> <span class="o">+</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;and (p.waktu_transaksi between ? and ?) &quot;</span> <span class="o">+</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;limit ?,?&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PenjualanDetail</span><span class="o">&gt;</span> <span class="nf">cariByProdukDanPeriode</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">,</span>
</span><span class='line'>            <span class="n">Date</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">Date</span> <span class="n">sampai</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="n">SQL_CARI_BY_PRODUK_DAN_PERIODE</span><span class="o">,</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">ResultSetJadiPenjualanDetail</span><span class="o">(),</span>
</span><span class='line'>                <span class="n">p</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span>
</span><span class='line'>                <span class="n">mulai</span><span class="o">,</span>
</span><span class='line'>                <span class="n">sampai</span><span class="o">,</span>
</span><span class='line'>                <span class="n">PagingHelper</span><span class="o">.</span><span class="na">halamanJadiStart</span><span class="o">(</span><span class="n">halaman</span><span class="o">,</span> <span class="n">baris</span><span class="o">),</span>
</span><span class='line'>                <span class="n">baris</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Konversi dari <code>ResultSet</code> menjadi <code>PenjualanDetail</code> dilakukan dalam class <code>ResultSetJadiPenjualanDetail</code> berikut</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">class</span> <span class="nc">ResultSetJadiPenjualanDetail</span>
</span><span class='line'>        <span class="kd">implements</span> <span class="n">RowMapper</span><span class="o">&lt;</span><span class="n">PenjualanDetail</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">PenjualanDetail</span> <span class="nf">mapRow</span><span class="o">(</span><span class="n">ResultSet</span> <span class="n">rs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span>
</span><span class='line'>            <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">PenjualanDetail</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PenjualanDetail</span><span class="o">();</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setId</span><span class="o">((</span><span class="n">Integer</span><span class="o">)</span> <span class="n">rs</span><span class="o">.</span><span class="na">getObject</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setHarga</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getBigDecimal</span><span class="o">(</span><span class="s">&quot;harga&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setJumlah</span><span class="o">((</span><span class="n">Integer</span><span class="o">)</span> <span class="n">rs</span><span class="o">.</span><span class="na">getObject</span><span class="o">(</span><span class="s">&quot;jumlah&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// relasi ke produk</span>
</span><span class='line'>        <span class="n">Produk</span> <span class="n">px</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Produk</span><span class="o">();</span>
</span><span class='line'>        <span class="n">px</span><span class="o">.</span><span class="na">setId</span><span class="o">((</span><span class="n">Integer</span><span class="o">)</span> <span class="n">rs</span><span class="o">.</span><span class="na">getObject</span><span class="o">(</span><span class="s">&quot;id_produk&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">px</span><span class="o">.</span><span class="na">setKode</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;kode_produk&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">px</span><span class="o">.</span><span class="na">setNama</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;nama_produk&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">px</span><span class="o">.</span><span class="na">setHarga</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getBigDecimal</span><span class="o">(</span><span class="s">&quot;harga_produk&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setProduk</span><span class="o">(</span><span class="n">px</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// relasi ke penjualan</span>
</span><span class='line'>        <span class="n">Penjualan</span> <span class="n">jual</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Penjualan</span><span class="o">();</span>
</span><span class='line'>        <span class="n">jual</span><span class="o">.</span><span class="na">setId</span><span class="o">((</span><span class="n">Integer</span><span class="o">)</span> <span class="n">rs</span><span class="o">.</span><span class="na">getObject</span><span class="o">(</span><span class="s">&quot;id_penjualan&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">jual</span><span class="o">.</span><span class="na">setWaktuTransaksi</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getDate</span><span class="o">(</span><span class="s">&quot;waktu_transaksi&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setPenjualan</span><span class="o">(</span><span class="n">jual</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">p</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Selain class <code>PenjualanDetail</code> itu sendiri, kita juga membuatkan object <code>Produk</code> dan <code>Penjualan</code> yang kemudian akan dipasang pada object <code>PenjualanDetail</code>.</p>

<h2>Pagination</h2>

<p>Dalam mengambil data yang berjumlah banyak seperti data transaksi, biasanya kita akan melakukan <em>pagination</em>, yaitu membagi data menjadi beberapa halaman. Di MySQL, kita menggunakan keyword <code>LIMIT</code> untuk melakukan hal ini. Keyword <code>LIMIT</code> menerima dua argumen, yaitu nomer record pertama yang mau diambil dan jumlah record yang mau diambil. Jadi bila kita ingin mengambil record 11 - 15, kita menggunakan keyword <code>LIMIT 11, 5</code>.</p>

<p>Ini agak berbeda dengan argumen yang diterima dalam method pencarian kita. Yang diminta di situ adalah nomer halaman dan jumlah record per halaman. Jadi kalau misalnya data kita berjumlah 56 record dan kita ingin setiap halaman berisi 10 record, maka data tersebut akan terbagi menjadi 6 halaman. Bila kita ingin mengambil halaman terakhir, kita memberikan argumen <code>6</code> dan <code>10</code> ke dalam method pencarian.</p>

<p>Tentunya harus ada konversi dari nomer halaman menjadi nomer baris. Ini kita lakukan di class <code>PagingHelper</code> yang isinya sebagai berikut.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PagingHelper</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Integer</span> <span class="nf">halamanJadiStart</span><span class="o">(</span><span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span>
</span><span class='line'>            <span class="n">Integer</span> <span class="n">baris</span><span class="o">){</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">halaman</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">halaman</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">*</span> <span class="n">baris</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Header Detail</h2>

<p>Dalam aplikasi, pasti ada fitur untuk menampilkan daftar transaksi dalam periode tertentu.
Seperti sudah kita bahas, satu transaksi terdiri dari satu header dan beberapa detail.
Data ini tentu ingin kita ambil semua.</p>

<p>Caranya sederhana :</p>

<ol>
<li>Query dulu headernya: <code>select * from t_penjualan where id = ?</code></li>
<li>Query detailnya: <code>select * from t_penjualan_detail where id_penjualan = ?</code></li>
<li>Gabungkan keduanya</li>
</ol>


<p>Berikut contohnya, pada waktu kita ingin mencari <code>Penjualan</code> berdasarkan <code>id</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">Penjualan</span> <span class="nf">cariById</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Penjualan</span> <span class="n">p</span> <span class="o">=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">queryForObject</span><span class="o">(</span><span class="n">SQL_CARI_BY_ID</span><span class="o">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">ResultSetJadiPenjualan</span><span class="o">(),</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">PenjualanDetail</span><span class="o">&gt;</span> <span class="n">daftarDetail</span> <span class="o">=</span> <span class="n">penjualanDetailDao</span>
</span><span class='line'>            <span class="o">.</span><span class="na">cariByPenjualan</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setDaftarPenjualanDetail</span><span class="o">(</span><span class="n">daftarDetail</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">p</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">EmptyResultDataAccessException</span> <span class="n">err</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Di sana, kita memanggil method <code>cariByPenjualan</code> yang ada di class <code>PenjualanDetailDao</code>. Berikut kode programnya</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PenjualanDetail</span><span class="o">&gt;</span> <span class="nf">cariByPenjualan</span><span class="o">(</span><span class="n">Penjualan</span> <span class="n">p</span><span class="o">){</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">PenjualanDetail</span><span class="o">&gt;</span> <span class="n">hasil</span>
</span><span class='line'>        <span class="o">=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="n">SQL_CARI_BY_ID_PENJUALAN</span><span class="o">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">ResultSetJadiPenjualanDetail</span><span class="o">(),</span> <span class="n">p</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// set relasi ke penjualan</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">PenjualanDetail</span> <span class="n">penjualanDetail</span> <span class="o">:</span> <span class="n">hasil</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">penjualanDetail</span><span class="o">.</span><span class="na">setPenjualan</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">hasil</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kembali ke <code>PenjualanDao</code>, setelah kita mendapatkan <code>List&lt;PenjualanDetail&gt;</code> dari method di atas, kita pasang di object penjualan yang sudah kita dapatkan di baris ini</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">p</span><span class="o">.</span><span class="na">setDaftarPenjualanDetail</span><span class="o">(</span><span class="n">daftarDetail</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Demikianlah cara kita mengambil data dari database menggunakan Spring JDBC.
Hal ini tentu tidak rumit asalkan kita sudah paham dasar-dasar SQL termasuk cara melakukan join antar tabel.
Jadi kesimpulannya, untuk mengambil data menggunakan Spring JDBC, yang perlu kita lakukan hanyalah:</p>

<ol>
<li>Membuat SQL, lengkap dengan join bila perlu. Contohnya bisa dilihat di class <code>PenjualanDetailDao</code> yang memiliki banyak join.</li>
<li>Membuat class untuk mengkonversi dari <code>ResultSet</code> menjadi object yang kita inginkan, misalnya <code>Produk</code> atau <code>Penjualan</code></li>
</ol>


<p>Pada bagian selanjutnya, kita tinggal <a href="http://software.endy.muhardin.com/java/mengetes-akses-database/">mengetes kode program</a> yang telah kita buat ini.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Insert Update Delete dengan Spring JDBC]]></title>
    <link href="http://software.endy.muhardin.com/java/insert-update-delete-dengan-spring-jdbc/"/>
    <updated>2013-05-31T13:26:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/insert-update-delete-dengan-spring-jdbc</id>
    <content type="html"><![CDATA[<p>Setelah pada artikel sebelumnya kita membuat konfigurasi database dan membuat kerangka aplikasi, kali ini kita akan membuat implementasi akses database menggunakan Spring JDBC.</p>

<p>Artikel ini merupakan bagian ketiga dari rangkaian artikel Spring JDBC, yaitu</p>

<ol>
<li><a href="http://software.endy.muhardin.com/java/konfigurasi-koneksi-database-dengan-spring/">Konfigurasi koneksi database</a></li>
<li><a href="http://software.endy.muhardin.com/java/struktur-aplikasi-java-dengan-spring-dan-maven/">Struktur Aplikasi</a></li>
<li><a href="http://software.endy.muhardin.com/java/insert-update-delete-dengan-spring-jdbc/">Insert, update, dan delete data</a></li>
<li><a href="http://software.endy.muhardin.com/java/query-dengan-spring-jdbc/">Query data</a></li>
<li><a href="http://software.endy.muhardin.com/java/mengetes-akses-database/">Mengetes Akses Database</a></li>
</ol>


<!--more-->


<h1>Setup DAO</h1>

<p>Supaya bisa diinisialisasi oleh Spring Framework, kita harus menambahkan annotation <code>@Repository</code> di class <code>ProdukDao</code> dan juga class DAO lainnya. Pembahasan lebih detail tentang cara kerja Spring Framework dan fungsinya annotation <code>@Repository</code> dapat dibaca <a href="http://software.endy.muhardin.com/java/memahami-dependency-injection/">di artikel ini</a>.</p>

<p>Selanjutnya, kita akan menambahkan beberapa variabel yang nantinya akan kita butuhkan, yaitu <code>JdbcTemplate</code> dan perintah SQL yang ingin dijalankan.</p>

<h2>JDBC Template</h2>

<p><code>JdbcTemplate</code> adalah class utama dalam Spring JDBC. Semua operasi database dilakukan melalui JdbcTemplate. Kita juga butuh rekannya yang bernama <code>NamedParameterJdbcTemplate</code>. Kelebihan dari <code>NamedParameterJdbcTemplate</code> ini, dia bisa menerima SQL dengan variabel yang diberi nama. Tanpa dia, kita cuma bisa menjalankan SQL yang variabelnya ditandai dengan <code>?</code>, sehingga membingungkan dan rawan terjadi kesalahan kalau jumlah variabelnya banyak.</p>

<p>Kedua object ini kita deklarasikan menjadi object/instance variable, supaya bisa digunakan oleh semua method. Inisialisasinya membutuhkan object <code>DataSource</code>, sehingga sebaiknya kita lakukan inisialisasi di dalam setter injection. Bagi yang belum paham apa itu setter injection silahkan baca dulu <a href="http://software.endy.muhardin.com/java/memahami-dependency-injection/">artikel ini</a>.</p>

<p>Berikut adalah kode programnya.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Repository</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProdukDao</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">NamedParameterJdbcTemplate</span> <span class="n">namedParameterJdbcTemplate</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDataSource</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">jdbcTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">namedParameterJdbcTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NamedParameterJdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>SQL</h2>

<p>Agar lebih rapi, semua perintah SQL yang kita akan gunakan di dalam method sebaiknya kita deklarasikan sebagai konstanta. Berikut adalah berbagai SQL yang kita gunakan.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Repository</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProdukDao</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SQL_INSERT</span> <span class="o">=</span> <span class="s">&quot;insert into m_produk (kode,nama,harga) values (:kode,:nama,:harga)&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SQL_CARI_BY_ID</span> <span class="o">=</span> <span class="s">&quot;select * from m_produk where id = ?&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SQL_CARI_BY_KODE</span> <span class="o">=</span> <span class="s">&quot;select * from m_produk where kode = ?&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SQL_HITUNG_SEMUA</span> <span class="o">=</span> <span class="s">&quot;select count(*) from m_produk&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SQL_CARI_SEMUA</span> <span class="o">=</span> <span class="s">&quot;select * from m_produk limit ?,?&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SQL_HITUNG_BY_NAMA</span> <span class="o">=</span> <span class="s">&quot;select count(*) from m_produk where lower(nama) like ?&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SQL_CARI_BY_NAMA</span> <span class="o">=</span> <span class="s">&quot;select * from m_produk where lower(nama) like ? limit ?,?&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Harap diperhatikan bahwa saya hanya menampilkan potongan kode program yang berkaitan dengan penjelasan saat ini saja, berikut sedikit tambahan supaya jelas di mana penempatannya. Untuk isi kode program yang lengkap silahkan lihat <a href="https://github.com/endymuhardin/belajar-akses-database-java/tree/spring-jdbc/src/main/java/com/muhardin/endy/training/java/aksesdb/dao/springjdbc">di Github</a>.</p>

<h1>Insert Data</h1>

<p>Setelah kita punya <code>JdbcTemplate</code> dan perintah SQL, kita bisa gunakan untuk menyimpan data ke database.
Mari kita implement method <code>simpan</code>.</p>

<h2>Menggunakan parameter domain object</h2>

<p>Class <code>Produk</code> memiliki properti yang bernama <code>kode</code>, <code>nama</code>, dan <code>harga</code>. Karena kita mengikuti aturan penamaan yang baku, maka kita buatkan method getter dan setter. Class yang dibuat mengikuti standar ini bisa langsung diproses oleh Spring JDBC. Dia akan secara otomatis memasangkan properti yang namanya sama dengan yang ada di perintah SQL. Jadi perintah SQL seperti ini</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">insert</span> <span class="k">into</span> <span class="n">m_produk</span> <span class="p">(</span><span class="n">kode</span><span class="p">,</span><span class="n">nama</span><span class="p">,</span><span class="n">harga</span><span class="p">)</span> <span class="k">values</span> <span class="p">(:</span><span class="n">kode</span><span class="p">,:</span><span class="n">nama</span><span class="p">,:</span><span class="n">harga</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Akan diisikan dengan nilai yang didapat dari pemanggilan method berikut:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Produk</span> <span class="n">p</span><span class="o">;</span> <span class="c1">// nantinya p diisi dari method parameter</span>
</span><span class='line'>
</span><span class='line'><span class="n">p</span><span class="o">.</span><span class="na">getKode</span><span class="o">();</span>
</span><span class='line'><span class="n">p</span><span class="o">.</span><span class="na">getNama</span><span class="o">();</span>
</span><span class='line'><span class="n">p</span><span class="o">.</span><span class="na">getHarga</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Spring JDBC juga akan secara otomatis mendeteksi tipe data baik itu <code>Integer</code>, <code>String</code>, <code>BigDecimal</code>, dan sebagainya.</p>

<p>Berikut adalah implementasi method <code>simpan</code> yang menggunakan konsep di atas.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">SqlParameterSource</span> <span class="n">namedParameters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BeanPropertySqlParameterSource</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="n">KeyHolder</span> <span class="n">keyHolder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GeneratedKeyHolder</span><span class="o">();</span>
</span><span class='line'>    <span class="n">namedParameterJdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">SQL_INSERT</span><span class="o">,</span> <span class="n">namedParameters</span><span class="o">,</span> <span class="n">keyHolder</span><span class="o">);</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">keyHolder</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">intValue</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>BeanPropertySqlParameterSource</code> adalah class dari Spring JDBC yang berfungsi mengambil parameter dari Java object seperti telah dijelaskan di atas. Selain mengambil dari object dengan getter dan setter, ada lagi class lain yang bernama <code>MapSqlParameterSource</code>, digunakan untuk mengambil parameter dari object bertipe <code>java.util.Map</code>.</p>

<h2>Mendapatkan nilai yang auto generated</h2>

<p>Di tabel <code>m_produk</code>, primary key ada di kolom <code>id</code>. Nilainya digenerate otomatis oleh database pada saat kita melakukan insert. Kita perlu mengetahui nilai berapa yang dibuatkan database untuk data yang barusan kita insert agar bisa dipasang di object <code>Produk</code> yang kita insert. Untuk menampung nilai yang otomatis dibuatkan database, kita menggunakan class <code>GeneratedKeyHolder</code>.</p>

<p>Setelah kita melakukan insert, <code>keyHolder</code> akan menampung nilai. Nilai inilah yang kita pasang di object produk dengan kode program berikut.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">namedParameterJdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">SQL_INSERT</span><span class="o">,</span> <span class="n">namedParameters</span><span class="o">,</span> <span class="n">keyHolder</span><span class="o">);</span>
</span><span class='line'><span class="n">p</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">keyHolder</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">intValue</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Menggunakan SimpleJdbcInsert</h2>

<p>Object <code>produk</code> di atas hanya memiliki 4 property di Java dan 4 kolom di database. Bila propertynya banyak, tentu kita akan kerepotan menulis variabel dalam perintah SQL. Untuk membantu kita, Spring JDBC menyediakan fitur <code>SimpleJdbcInsert</code>. Cara kerjanya, dia akan <em>menanyakan</em> ke database kolom apa saja yang ada di tabel tertentu berikut tipe data untuk masing-masing kolom. Setelah itu, informasi tersebut digunakan untuk membuatkan SQL insert buat kita, sehingga kita tidak perlu membuat sendiri.</p>

<p>Berikut adalah cara inisialisasi <code>SimpleJdbcInsert</code>, dilakukan di setter injection.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Repository</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProdukDao</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">SimpleJdbcInsert</span> <span class="n">insertProduk</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDataSource</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">insertProduk</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleJdbcInsert</span><span class="o">(</span><span class="n">dataSource</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">withTableName</span><span class="o">(</span><span class="s">&quot;m_produk&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">usingGeneratedKeyColumns</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kita menyebutkan juga kolom mana yang nilainya digenerate database, sehingga dia bisa mengambilkannya. Selanjutnya, mari kita ganti implementasi method <code>simpan</code> dengan memanfaatkan <code>SimpleJdbcInsert</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">SqlParameterSource</span> <span class="n">produkParameter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BeanPropertySqlParameterSource</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Number</span> <span class="n">idBaru</span> <span class="o">=</span> <span class="n">insertProduk</span><span class="o">.</span><span class="na">executeAndReturnKey</span><span class="o">(</span><span class="n">produkParameter</span><span class="o">);</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">idBaru</span><span class="o">.</span><span class="na">intValue</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Insert Data Header dan Detail</h2>

<blockquote><p>Kenapa kita perlu mengambil primary key yang digenerate database?</p></blockquote>


<p>Jawabannya karena kita membutuhkannya dalam skenario header dan detail. Di tabel detail, ada relasi foreign key ke tabel header. Sehingga untuk mengisi foreign key tersebut, kita harus mengetahui dulu primary key header.</p>

<p>Selain masalah foreign key ini, sisanya sama dengan pembahasan insert sebelumnya. Berikut implementasi method <code>simpan(Penjualan p)</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="n">Penjualan</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">SqlParameterSource</span> <span class="n">namedParameters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BeanPropertySqlParameterSource</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="n">KeyHolder</span> <span class="n">keyHolder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GeneratedKeyHolder</span><span class="o">();</span>
</span><span class='line'>    <span class="n">namedParameterJdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">SQL_INSERT</span><span class="o">,</span> <span class="n">namedParameters</span><span class="o">,</span> <span class="n">keyHolder</span><span class="o">);</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">keyHolder</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">intValue</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">PenjualanDetail</span> <span class="n">detail</span> <span class="o">:</span> <span class="n">p</span><span class="o">.</span><span class="na">getDaftarPenjualanDetail</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">detail</span><span class="o">.</span><span class="na">setPenjualan</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>        <span class="n">penjualanDetailDao</span><span class="o">.</span><span class="na">simpan</span><span class="o">(</span><span class="n">detail</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Seperti kita lihat pada kode program di atas, kita insert ke tabel <code>t_penjualan</code>, kemudian kita ambil nilai <code>id</code>. Nilai tersebut kita isikan ke tiap object detail untuk selanjutnya kita insert juga menggunakan method <code>simpan(PenjualanDetail pd)</code> di class <code>PenjualanDetailDao</code>. Berikut implementasinya.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="kd">final</span> <span class="n">PenjualanDetail</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">KeyHolder</span> <span class="n">keyHolder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GeneratedKeyHolder</span><span class="o">();</span>
</span><span class='line'>    <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="k">new</span> <span class="n">PreparedStatementCreator</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">PreparedStatement</span> <span class="nf">createPreparedStatement</span><span class="o">(</span><span class="n">Connection</span> <span class="n">conn</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">PreparedStatement</span> <span class="n">ps</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">SQL_INSERT</span><span class="o">,</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="s">&quot;id&quot;</span><span class="o">});</span>
</span><span class='line'>            <span class="n">ps</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getPenjualan</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>            <span class="n">ps</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getProduk</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>            <span class="n">ps</span><span class="o">.</span><span class="na">setBigDecimal</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getHarga</span><span class="o">());</span>
</span><span class='line'>            <span class="n">ps</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getJumlah</span><span class="o">());</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">ps</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">keyHolder</span><span class="o">);</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">keyHolder</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">intValue</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pada waktu menyimpan <code>PenjualanDetail</code>, kita menggunakan teknik yang agak berbeda, tidak menggunakan <code>SimpleJdbcInsert</code> maupun <code>NamedParameterJdbcTemplate</code>. Ini disebabkan karena banyak kolom yang namanya tidak mengikuti aturan penamaan, yaitu <code>id_penjualan</code> dan <code>id_produk</code>. Karena itu kita menggunakan cara yang lebih manual, membuat sendiri <code>PreparedStatement</code> dan kemudian mengisi parameternya.</p>

<p>Walaupun demikian, kita tidak mengeksekusi <code>PreparedStatement</code> tersebut, karena urusan mengeksekusi akan ditangani Spring JDBC supaya bisa dibungkus dalam transaction. Kenapa harus dibungkus dalam transaction? Jawabannya bisa dibaca di <a href="http://software.endy.muhardin.com/java/database-transaction/">artikel ini</a>.</p>

<h1>Update Data</h1>

<p>Pada prinsipnya, update data tidak berbeda dengan insert data. Kita dapat melakukannya dengan cara yang sama seperti insert data di atas. Tapi karena kita ingin melihat fitur-fitur Spring JDBC, baiklah kita lakukan dengan cara yang sedikit berbeda.</p>

<h2>Menggunakan parameter bertipe Map</h2>

<p>Kalau di atas kita sudah menggunakan parameter menggunakan <code>?</code> dan domain object, kali ini kita akan menggunakan <code>Map</code>. Cara ini digunakan bila nama variabel di SQL berbeda dengan nama variabel di domain object, sehingga kita tidak bisa menggunakan <code>BeanPropertySqlParameterSource</code>. Kita juga tidak mau menggunakan <code>?</code> karena rawan terjadi salah ketik.</p>

<p>Kita ubah sedikit method <code>simpan(Produk p )</code> agar bisa menangani penyimpanan data produk baru (insert) maupun penyimpanan data produk lama (update). Berikut kode program method <code>simpan(Produk p )</code> yang baru.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">SqlParameterSource</span> <span class="n">produkParameter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BeanPropertySqlParameterSource</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Number</span> <span class="n">idBaru</span> <span class="o">=</span> <span class="n">insertProduk</span><span class="o">.</span><span class="na">executeAndReturnKey</span><span class="o">(</span><span class="n">produkParameter</span><span class="o">);</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">idBaru</span><span class="o">.</span><span class="na">intValue</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">SqlParameterSource</span> <span class="n">produkParameter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MapSqlParameterSource</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">addValue</span><span class="o">(</span><span class="s">&quot;id_produk&quot;</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getId</span><span class="o">())</span>
</span><span class='line'>                <span class="o">.</span><span class="na">addValue</span><span class="o">(</span><span class="s">&quot;kode_produk&quot;</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getKode</span><span class="o">())</span>
</span><span class='line'>                <span class="o">.</span><span class="na">addValue</span><span class="o">(</span><span class="s">&quot;nama_produk&quot;</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getNama</span><span class="o">())</span>
</span><span class='line'>                <span class="o">.</span><span class="na">addValue</span><span class="o">(</span><span class="s">&quot;harga_produk&quot;</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getHarga</span><span class="o">());</span>
</span><span class='line'>        <span class="n">namedParameterJdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">SQL_UPDATE_PRODUK</span><span class="o">,</span> <span class="n">produkParameter</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Agar lebih jelas, kita tampilkan juga deklarasi <code>SQL_UPDATE_PRODUK</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SQL_UPDATE_PRODUK</span>
</span><span class='line'>    <span class="o">=</span> <span class="s">&quot;update m_produk set kode = :kode_produk, nama = :nama_produk, harga = :harga_produk where id = :id_produk&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Penggunaan <code>MapSqlParameterSource</code> dapat dilihat di blok <code>else</code>. Argumen kiri dari method <code>addValue</code> adalah nama variabel dalam <code>SQL_UPDATE_PRODUK</code>, sedangkan argumen kanan adalah nilai yang ingin diisikan.</p>

<h1>Delete Data</h1>

<p>Bila kita sudah menguasai insert dan update, maka delete seharusnya tidak menjadi masalah. Berikut kode program untuk menghapus data produk.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">hapus</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">SQL_HAPUS</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Berikut deklarasi <code>SQL_HAPUS</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SQL_HAPUS</span> <span class="o">=</span> <span class="s">&quot;delete from m_produk where id = ?&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Menghapus <code>penjualan</code> yang memiliki relasi header detail juga tidak sulit. Pastikan kita menghapus detailnya dulu sebelum menghapus headernya agar tidak terjadi pelanggaran <a href="http://en.wikipedia.org/wiki/Referential_integrity">referential integrity</a>.</p>

<p>Berikut contoh pesan error bila kita menghapus data produk yang sudah dipakai dalam transaksi.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">dao</span><span class="o">.</span><span class="na">DataIntegrityViolationException</span><span class="o">:</span> <span class="n">PreparedStatementCallback</span><span class="o">;</span>
</span><span class='line'><span class="n">SQL</span> <span class="o">[</span><span class="n">delete</span> <span class="n">from</span> <span class="n">m_produk</span> <span class="n">where</span> <span class="n">id</span> <span class="o">=</span> <span class="o">?];</span>
</span><span class='line'><span class="n">Cannot</span> <span class="n">delete</span> <span class="n">or</span> <span class="n">update</span> <span class="n">a</span> <span class="n">parent</span> <span class="nl">row:</span>
</span><span class='line'><span class="n">a</span> <span class="n">foreign</span> <span class="n">key</span> <span class="n">constraint</span> <span class="nf">fails</span> <span class="o">(</span><span class="err">`</span><span class="n">belajar</span><span class="err">`</span><span class="o">.</span><span class="err">`</span><span class="n">t_penjualan_detail</span><span class="err">`</span><span class="o">,</span>
</span><span class='line'><span class="n">CONSTRAINT</span> <span class="err">`</span><span class="n">t_penjualan_detail_ibfk_2</span><span class="err">`</span> <span class="n">FOREIGN</span> <span class="n">KEY</span> <span class="o">(</span><span class="err">`</span><span class="n">id_produk</span><span class="err">`</span><span class="o">)</span>
</span><span class='line'><span class="n">REFERENCES</span> <span class="err">`</span><span class="n">m_produk</span><span class="err">`</span> <span class="o">(</span><span class="err">`</span><span class="n">id</span><span class="err">`</span><span class="o">));</span>
</span><span class='line'><span class="n">nested</span> <span class="n">exception</span> <span class="n">is</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">mysql</span><span class="o">.</span><span class="na">jdbc</span><span class="o">.</span><span class="na">exceptions</span><span class="o">.</span><span class="na">jdbc4</span><span class="o">.</span><span class="na">MySQLIntegrityConstraintViolationException</span><span class="o">:</span>
</span><span class='line'><span class="n">Cannot</span> <span class="n">delete</span> <span class="n">or</span> <span class="n">update</span> <span class="n">a</span> <span class="n">parent</span> <span class="nl">row:</span>
</span><span class='line'><span class="n">a</span> <span class="n">foreign</span> <span class="n">key</span> <span class="n">constraint</span> <span class="nf">fails</span> <span class="o">(</span><span class="err">`</span><span class="n">belajar</span><span class="err">`</span><span class="o">.</span><span class="err">`</span><span class="n">t_penjualan_detail</span><span class="err">`</span><span class="o">,</span>
</span><span class='line'><span class="n">CONSTRAINT</span> <span class="err">`</span><span class="n">t_penjualan_detail_ibfk_2</span><span class="err">`</span> <span class="n">FOREIGN</span> <span class="n">KEY</span> <span class="o">(</span><span class="err">`</span><span class="n">id_produk</span><span class="err">`</span><span class="o">)</span>
</span><span class='line'><span class="n">REFERENCES</span> <span class="err">`</span><span class="n">m_produk</span><span class="err">`</span> <span class="o">(</span><span class="err">`</span><span class="n">id</span><span class="err">`</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pada pesan error di atas, data <code>produk</code> tidak bisa dihapus karena sudah digunakan sebagai relasi foreign key dari <code>penjualan detail</code>.</p>

<p>Demikianlah penjelasan tentang insert, update, dan delete data. Nantikan <a href="http://software.endy.muhardin.com/java/query-dengan-spring-jdbc/">bagian selanjutnya</a> yang membahas tentang query select.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Struktur Aplikasi Java dengan Spring dan Maven]]></title>
    <link href="http://software.endy.muhardin.com/java/struktur-aplikasi-java-dengan-spring-dan-maven/"/>
    <updated>2013-05-28T15:06:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/struktur-aplikasi-java-dengan-spring-dan-maven</id>
    <content type="html"><![CDATA[<p>Pada <a href="http://software.endy.muhardin.com/java/konfigurasi-koneksi-database-dengan-spring/">bagian sebelumnya</a> kita telah membahas konfigurasi awal
dan studi kasus yang akan digunakan untuk menunjukkan fitur Spring JDBC.</p>

<p>Di artikel bagian kedua ini, kita akan membahas tentang kerangka aplikasi yang akan dibuat.
Sebelum membuat implementasi detail, sangat penting kita buat dulu kerangkanya supaya jelas
apa saja bagian-bagian dalam aplikasi dan bagaimana mereka saling terhubung.</p>

<p>Artikel ini merupakan bagian kedua dari rangkaian artikel Spring JDBC, yaitu</p>

<ol>
<li><a href="http://software.endy.muhardin.com/java/konfigurasi-koneksi-database-dengan-spring/">Konfigurasi koneksi database</a></li>
<li><a href="http://software.endy.muhardin.com/java/struktur-aplikasi-java-dengan-spring-dan-maven/">Struktur Aplikasi</a></li>
<li><a href="http://software.endy.muhardin.com/java/insert-update-delete-dengan-spring-jdbc/">Insert, update, dan delete data</a></li>
<li><a href="http://software.endy.muhardin.com/java/query-dengan-spring-jdbc/">Query data</a></li>
<li><a href="http://software.endy.muhardin.com/java/mengetes-akses-database/">Mengetes Akses Database</a></li>
</ol>


<!--more-->


<h2>Daftar class yang akan dibuat</h2>

<p>Class yang akan dibuat kita bagi menjadi empat fungsi utama, yaitu:</p>

<ul>
<li>domain object : class yang mewakili struktur data dalam aplikasi kita</li>
<li>interface business service : class yang mendefinisikan daftar fitur-fitur dalam aplikasi</li>
<li>implementasi business service : implementasi dari interface business service. Kalau di interface hanya ada nama method, argumen, dan tipe data kembalian (return value), di sini sudah ada implementasi konkritnya, yaitu bagaimana query database, logika perhitungan, dan sebagainya.</li>
<li>automated test : memeriksa apakah method kita berjalan benar itu melelahkan. Jadi kita buatkan kode program untuk mengetesnya, sehingga tes yang sama bisa dijalankan berulang-ulang tanpa membuat kita lelah. Lebih lanjut tentang automated test bisa dibaca di <a href="http://software.endy.muhardin.com/java/ruthless-testing-1/">artikel lain yang membahas masalah ini</a>.</li>
</ul>


<h3>Domain Object</h3>

<p>Sesuai dengan skema database, kita akan membuat tiga class, yaitu:</p>

<ul>
<li>Produk</li>
<li>Penjualan</li>
<li>PenjualanDetail</li>
</ul>


<p>Buat yang sudah pernah coding JDBC biasanya akan bertanya,</p>

<blockquote><p>Kenapa repot-repot membuat domain class, kemudian harus konversi bolak balik?<br/>Kan bisa saja kita kirim `ResultSet` ke tampilan, ataupun insert langsung dari array ke `PreparedStatement`.</p></blockquote>


<p>Pertanyaan ini biasanya muncul dari programmer PHP yang terbiasa langsung menampilkan kembalian <code>mysql_fetch_array</code> dalam looping tabel.</p>

<p>Ada beberapa alasan:</p>

<ol>
<li><p>Sebenarnya bisa saja kita buat aplikasi dengan menggunakan tipe data yang disediakan Java seperti Integer, String, Map, List, dan lainnya. Tapi akibatnya kode program kita menjadi sulit dimengerti. Coba bandingkan, lebih mudah dimengerti <code>public void simpan(Produk p)</code> atau <code>public void simpan(Map p)</code>? Dengan membuat tipe data sesuai istilah yang digunakan di domain kita, maka kode program akan lebih mudah dipahami.</p></li>
<li><p>Java merupakan bahasa yang <a href="http://en.wikipedia.org/wiki/Strong_and_weak_typing">strongly-typed</a>, dia memeriksa tipe data/class dari tiap variabel. Pada ilustrasi di atas, method <code>public void simpan(Map p)</code> akan menerima apapun data yang kita masukkan ke dalam variabel <code>p</code>. Kalau ada kesalahan dalam nama variabel (misalnya nama ditulis name), baru akan terdeteksi pada waktu aplikasi dijalankan. Berbeda dengan <code>public void simpan(Produk p)</code> yang akan langsung menimbulkan pesan error apabila kita isi dengan tipe data selain <code>Produk</code>. Bug yang ditemukan pada waktu coding (compile-time) akan jauh lebih cepat diperbaiki daripada bug yang baru ditemukan pada waktu aplikasi dijalankan (runtime). Programmer PHP ada benarnya juga. Di bahasa PHP memang domain class ini tidak diperlukan, karena PHP tidak ada pemeriksaan compile-time. Tapi karena kita menggunakan Java, ada baiknya kita manfaatkan pemeriksaan compile-time ini.</p></li>
<li><p>Memisahkan antara layer database dan layer antarmuka. Apabila ada perubahan skema database, asalkan fitur di tampilan tidak berubah, kita cukup mengubah mapping domain object dan skema database. Tidak perlu mengubah kode program di layer antarmuka.</p></li>
<li><p>Pustaka siap pakai untuk validasi. Di Java, ada yang namanya <a href="http://jcp.org/en/jsr/detail?id=303">JSR-303</a>, yaitu suatu pustaka yang berguna untuk validasi. Dengan <a href="http://www.mkyong.com/spring-mvc/spring-3-mvc-and-jsr303-valid-example/">menggunakan JSR-303</a> ini kita tidak perlu lagi melakukan pengecekan <code>if(produk.getKode() == null)</code>. Cukup kita gunakan deklarasi <code>@NotNull private String kode;</code> dalam class <code>Produk</code></p></li>
</ol>


<h3>Interface Business Service</h3>

<p>Interface di Java artinya class yang methodnya abstrak semua. Lebih detail tentang method abstrak bisa dibaca di <a href="http://software.endy.muhardin.com/java/interface-abstract/">artikel ini</a>. Ada beberapa alasan kenapa kita harus memisahkan interface dan implementasinya, antara lain:</p>

<ul>
<li><p>pada waktu <a href="http://software.endy.muhardin.com/java/remoting-dengan-spring/">membuat aplikasi client-server</a>, kita cukup memberikan domain object dan interface ini kepada programmer aplikasi client. Sedangkan implementasinya (yang berisi kode program akses database) tetap di server. Ini akan meringankan ukuran aplikasi client, karena tidak perlu menyertakan implementasi (beserta library pendukungnya yang biasanya besar) yang tidak dia gunakan.</p></li>
<li><p>kita bebas mengubah strategi implementasi (misalnya ganti database dari MySQL menjadi PostgreSQL) tanpa perlu mengganggu aplikasi client</p></li>
<li><p>fitur declarative transaction yang dimiliki Spring akan lebih optimal bekerja bila kita memisahkan interface dan implementasi.</p></li>
</ul>


<p>Interface ini cukup satu class saja, yaitu <code>AplikasiPenjualanService</code>.</p>

<h3>Implementasi Business Service</h3>

<p>Ini merupakan implementasi dari interface <code>AplikasiPenjualanService</code>. Pada prakteknya, ada dua variasi yang biasa saya gunakan dalam membuat implementasi, yaitu:</p>

<ul>
<li>cukup membuat class implementasi service saja</li>
<li>membuat class implementasi service dan juga class data access object (DAO)</li>
</ul>


<p>Kapan memilih variasi yang mana?</p>

<ul>
<li>Bila menggunakan framework Spring Data JPA, kita harus pakai DAO karena frameworknya minta seperti itu</li>
<li>Selain Spring Data JPA, bebas mau pakai yang mana. Pilih saja yang lebih rapi dan mudah maintenance. Untuk aplikasi kecil, class implementasi service saja sudah cukup. Kalau aplikasinya besar, akan lebih mudah membaca 10 class DAO yang masing-masingnya terdiri dari 100 baris kode daripada 1000 baris dalam satu class implementasi service. Walaupun demikian, tidak ada pertimbangan teknis yang signifikan (seperti isu performance dan lainnya) antara pakai DAO atau tidak.</li>
</ul>


<h3>Automated Test</h3>

<p>Ini adalah kode program yang fungsinya mengetes kode program lainnya, dalam hal ini class implementasi dan class DAO. Konsep dasar tentang automated testing dibahas di <a href="http://software.endy.muhardin.com/java/ruthless-testing-1/">artikel ini</a>. Sedangkan untuk pengetesan database dibahas <a href="http://software.endy.muhardin.com/java/ruthless-testing-4/">di sini</a>.</p>

<p>Pada contoh aplikasi ini, kita menghadapi tantangan khusus, yaitu bagaimana caranya menggunakan test case yang sama untuk konfigurasi berbeda. Nantinya aplikasi ini akan dikembangkan untuk mendemonstrasikan akses database menggunakan framework lain seperti Hibernate, Spring Data JPA, dan JDBC polos tanpa framework. Logika pengetesan akan sama persis, yaitu:</p>

<ul>
<li>test insert</li>
<li>test update</li>
<li>test delete</li>
<li>test cari berdasarkan id</li>
<li>test ambil semua data dari tabel tertentu</li>
<li>test cari data dengan kriteria tertentu</li>
</ul>


<p>Tabel database yang diakses sama, sample data sama, bahkan nama method yang dijalankan juga sama. Bedanya hanyalah class implementasi mana yang digunakan dan konfigurasi mana yang dipakai.</p>

<p>Untuk itu, kita akan menggunakan teknik khusus yang disebut <code>abstract junit test case</code>. Secara garis besar, langkahnya seperti ini:</p>

<ol>
<li>Buat semua method test di superclass. Superclass ini memiliki abstract method, sehingga dengan sendirinya dia juga abstract.</li>
<li>Untuk mendapatkan class implementasi dan melakukan inisialisasi konfigurasi, gunakan abstract method</li>
<li>Buat subclass untuk masing-masing implementasi (Spring JDBC, Hibernate, dst) yang hanya berisi implementasi dari abstract method tersebut.</li>
</ol>


<p>Agar lebih jelas, silahkan lihat <a href="https://github.com/endymuhardin/belajar-akses-database-java/blob/spring-jdbc/src/test/java/com/muhardin/endy/training/java/aksesdb/service/ProdukServiceTest.java">superclassnya</a> dan <a href="https://github.com/endymuhardin/belajar-akses-database-java/blob/spring-jdbc/src/test/java/com/muhardin/endy/training/java/aksesdb/service/springjdbc/ProdukServiceSpringJdbcTest.java">subclass untuk Spring JDBC</a>.</p>

<h2>Struktur folder</h2>

<p>Sekian banyak class, bagaimana penempatannya? Silahkan lihat struktur folder berikut:</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/struktur-aplikasi-spring-maven/01-struktur-folder-top-level.png" title="Top Level Folder" ></p>

<p>Tidak ada yang istimewa dari struktur di atas, cuma struktur folder standar Maven. Mari kita lihat source code aplikasi.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/struktur-aplikasi-spring-maven/02-struktur-folder-main-java.png" title="Source Folder Java" ></p>

<p>Di sini kita bisa lihat class sudah diatur ke dalam package berbeda sesuai fungsinya, yaitu domain, service, dao. Untuk implementasi service dengan Spring JDBC kita buatkan package tersendiri. Selanjutnya kita lihat lokasi file konfigurasi.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/struktur-aplikasi-spring-maven/03-struktur-folder-main-resources.png" title="Source Folder Konfigurasi" ></p>

<p>File konfigurasi ditaruh dalam package. Sebetulnya ditaruh di top level juga boleh, ini hanya sekedar kebiasaan saja.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/struktur-aplikasi-spring-maven/04-struktur-folder-test.png" title="Source Test Folder" ></p>

<p>Lokasi penempatan test class bisa dilihat di atas. Abstract class yang saya ceritakan di atas terlihat di package <code>com.muhardin.endy.training.java.aksesdb.service</code>, sedangkan implementasi konfigurasinya ada di subpackage <code>springjdbc</code> di bawahnya.</p>

<p>Setelah kita melihat penempatan file dan folder, mari kita lihat kerangka kode program di masing-masing class/file. Supaya bisa mendapatkan <em>big-picture</em>, kita akan lihat kerangka class dan method saja. Implementasinya menyusul pada bagian selanjutnya.</p>

<h1>Domain Object</h1>

<h2>Class Produk</h2>

<p>Class ini merupakan padanan tabel m_produk di database.
Dia memiliki beberapa property sesuai dengan kolom di database.
Berikut penjelasannya</p>

<table>
<thead>
<tr>
<th>Nama Property </th>
<th> Nama Kolom Database </th>
<th> Tipe Data Java </th>
<th> Tipe Data MySQL</th>
</tr>
</thead>
<tbody>
<tr>
<td>id            </td>
<td> id                  </td>
<td> Integer        </td>
<td> integer</td>
</tr>
<tr>
<td>kode          </td>
<td> kode                </td>
<td> String         </td>
<td> varchar</td>
</tr>
<tr>
<td>nama          </td>
<td> nama                </td>
<td> String         </td>
<td> varchar</td>
</tr>
<tr>
<td>harga         </td>
<td> harga               </td>
<td> BigDecimal     </td>
<td> decimal(19,2)</td>
</tr>
</tbody>
</table>


<p>Berikut kode program untuk class Produk.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">domain</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.math.BigDecimal</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Produk</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">kode</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">nama</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">BigDecimal</span> <span class="n">harga</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// getter dan setter generate dari IDE</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Class Penjualan</h2>

<p>Mapping Java ke SQL</p>

<table>
<thead>
<tr>
<th>Nama Property  </th>
<th> Nama Kolom Database </th>
<th> Tipe Data Java </th>
<th> Tipe Data MySQL</th>
</tr>
</thead>
<tbody>
<tr>
<td>id             </td>
<td> id                  </td>
<td> Integer        </td>
<td> integer</td>
</tr>
<tr>
<td>waktuTransaksi </td>
<td> waktu_transaksi     </td>
<td> Date           </td>
<td> datetime</td>
</tr>
</tbody>
</table>


<p>Kode program class Penjualan</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">domain</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// import generate dari IDE</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Penjualan</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Date</span> <span class="n">waktuTransaksi</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PenjualanDetail</span><span class="o">&gt;</span> <span class="n">daftarPenjualanDetail</span>
</span><span class='line'>        <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">PenjualanDetail</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// getter dan setter generate dari IDE</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Class Penjualan Detail</h2>

<p>Mapping Java ke SQL</p>

<table>
<thead>
<tr>
<th>Nama Property  </th>
<th> Nama Kolom Database </th>
<th> Tipe Data Java </th>
<th> Tipe Data MySQL</th>
</tr>
</thead>
<tbody>
<tr>
<td>id             </td>
<td> id                  </td>
<td> Integer        </td>
<td> integer</td>
</tr>
<tr>
<td>penjualan      </td>
<td> id_penjualan        </td>
<td> Penjualan      </td>
<td> integer foreign key</td>
</tr>
<tr>
<td>produk         </td>
<td> id_produk           </td>
<td> Produk         </td>
<td> integer foreign key</td>
</tr>
<tr>
<td>jumlah         </td>
<td> jumlah              </td>
<td> Integer        </td>
<td> integer</td>
</tr>
<tr>
<td>harga          </td>
<td> harga               </td>
<td> BigDecimal     </td>
<td> decimal(19,2)</td>
</tr>
</tbody>
</table>


<p>Kode program class PenjualanDetail</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">domain</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.math.BigDecimal</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PenjualanDetail</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Penjualan</span> <span class="n">penjualan</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Produk</span> <span class="n">produk</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">BigDecimal</span> <span class="n">harga</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">jumlah</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// getter dan setter generate dari IDE</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yang perlu diperhatikan di sini adalah perbedaan cara perlakuan relasi antara Java dan database.
Di Java, kita perlu mendefinisikan relasi di dua tempat, yaitu variabel <code>daftarPenjualanDetail</code> di class <code>Penjualan</code>
dan variabel <code>penjualan</code> di class <code>PenjualanDetail</code>. Sedangkan di database, relasi ini cukup didefinisikan melalui foreign key
<code>id_penjualan</code> di tabel <code>t_penjualan_detail</code>.</p>

<p>Perbedaan lain, di database relasi ini cukup diwakili satu nilai saja, yaitu nilai foreign key.
Sedangkan di Java diwakili satu class penuh (<code>Produk</code> atau <code>Penjualan</code>) yang di dalamnya memuat banyak nilai.</p>

<p>Untuk menjembatani perbedaan ini, kita perlu membuat mapper untuk mengubah data dari database menjadi object Java dan sebaliknya. Contoh kode program untuk mapper ini akan dibahas pada bagian selanjutnya.</p>

<h1>Interface Business Service</h1>

<p>Ini adalah daftar fitur yang ada di aplikasi, didefinisikan berupa class/interface dan method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">service</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// import generate dari IDE</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">PenjualanService</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// service berkaitan dengan produk</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Produk</span> <span class="nf">cariProdukById</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Produk</span> <span class="nf">cariProdukByKode</span><span class="o">(</span><span class="n">String</span> <span class="n">kode</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Long</span> <span class="nf">hitungSemuaProduk</span><span class="o">();</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Produk</span><span class="o">&gt;</span> <span class="nf">cariSemuaProduk</span><span class="o">(</span><span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Long</span> <span class="nf">hitungProdukByNama</span><span class="o">(</span><span class="n">String</span> <span class="n">nama</span><span class="o">);</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Produk</span><span class="o">&gt;</span> <span class="nf">cariProdukByNama</span><span class="o">(</span><span class="n">String</span> <span class="n">nama</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// service yang berkaitan dengan transaksi</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="n">Penjualan</span> <span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Penjualan</span> <span class="nf">cariPenjualanById</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Long</span> <span class="nf">hitungPenjualanByPeriode</span><span class="o">(</span><span class="n">Date</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">Date</span> <span class="n">sampai</span><span class="o">);</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Penjualan</span><span class="o">&gt;</span> <span class="nf">cariPenjualanByPeriode</span><span class="o">(</span><span class="n">Date</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">Date</span> <span class="n">sampai</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Long</span> <span class="nf">hitungPenjualanDetailByProdukDanPeriode</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">,</span> <span class="n">Date</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">Date</span> <span class="n">sampai</span><span class="o">);</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">PenjualanDetail</span><span class="o">&gt;</span> <span class="nf">cariPenjualanDetailByProdukDanPeriode</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">,</span> <span class="n">Date</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">Date</span> <span class="n">sampai</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Implementasi Business Service</h1>

<p>Implementasi dari interface di atas kita bagi menjadi dua kategori, yaitu class implementasi service yang nantinya akan memanggil class DAO. Pertimbangan dan alasan mengapa begini sudah dijelaskan di atas.</p>

<h2>Class ServiceSpringJdbc</h2>

<p>Class ini sebetulnya hanya memanggil class DAO saja, jadi baiklah kita tampilkan seluruh isinya di sini.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">springjdbc</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// import statement generate dari IDE</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Service</span> <span class="nd">@Transactional</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PenjualanServiceSpringJdbc</span> <span class="kd">implements</span> <span class="n">PenjualanService</span><span class="o">{</span>
</span><span class='line'>    <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">ProdukDao</span> <span class="n">produkDao</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">PenjualanDao</span> <span class="n">penjualanDao</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">PenjualanDetailDao</span> <span class="n">penjualanDetailDao</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">produkDao</span><span class="o">.</span><span class="na">simpan</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Produk</span> <span class="nf">cariProdukById</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">produkDao</span><span class="o">.</span><span class="na">cariById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Produk</span> <span class="nf">cariProdukByKode</span><span class="o">(</span><span class="n">String</span> <span class="n">kode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">produkDao</span><span class="o">.</span><span class="na">cariByKode</span><span class="o">(</span><span class="n">kode</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">hitungSemuaProduk</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">produkDao</span><span class="o">.</span><span class="na">hitungSemua</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Produk</span><span class="o">&gt;</span> <span class="nf">cariSemuaProduk</span><span class="o">(</span><span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">produkDao</span><span class="o">.</span><span class="na">cariSemua</span><span class="o">(</span><span class="n">halaman</span><span class="o">,</span> <span class="n">baris</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">hitungProdukByNama</span><span class="o">(</span><span class="n">String</span> <span class="n">nama</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">produkDao</span><span class="o">.</span><span class="na">hitungByNama</span><span class="o">(</span><span class="n">nama</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Produk</span><span class="o">&gt;</span> <span class="nf">cariProdukByNama</span><span class="o">(</span><span class="n">String</span> <span class="n">nama</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">produkDao</span><span class="o">.</span><span class="na">cariByNama</span><span class="o">(</span><span class="n">nama</span><span class="o">,</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">baris</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="n">Penjualan</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">penjualanDao</span><span class="o">.</span><span class="na">simpan</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Penjualan</span> <span class="nf">cariPenjualanById</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">penjualanDao</span><span class="o">.</span><span class="na">cariById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">hitungPenjualanByPeriode</span><span class="o">(</span><span class="n">Date</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">Date</span> <span class="n">sampai</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">penjualanDao</span><span class="o">.</span><span class="na">hitungByPeriode</span><span class="o">(</span><span class="n">mulai</span><span class="o">,</span> <span class="n">sampai</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Penjualan</span><span class="o">&gt;</span> <span class="nf">cariPenjualanByPeriode</span><span class="o">(</span><span class="n">Date</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">Date</span> <span class="n">sampai</span><span class="o">,</span>
</span><span class='line'>            <span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">penjualanDao</span><span class="o">.</span><span class="na">cariByPeriode</span><span class="o">(</span><span class="n">mulai</span><span class="o">,</span> <span class="n">sampai</span><span class="o">,</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">baris</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">hitungPenjualanDetailByProdukDanPeriode</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">,</span>
</span><span class='line'>            <span class="n">Date</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">Date</span> <span class="n">sampai</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">penjualanDetailDao</span><span class="o">.</span><span class="na">hitungByProdukDanPeriode</span><span class="o">(</span><span class="n">p</span><span class="o">,</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">sampai</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PenjualanDetail</span><span class="o">&gt;</span> <span class="nf">cariPenjualanDetailByProdukDanPeriode</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">,</span>
</span><span class='line'>            <span class="n">Date</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">Date</span> <span class="n">sampai</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">penjualanDetailDao</span><span class="o">.</span><span class="na">cariByProdukDanPeriode</span><span class="o">(</span><span class="n">p</span><span class="o">,</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">sampai</span><span class="o">,</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">baris</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Class DAO</h2>

<p>Class DAO akan kita bahas secara mendetail di bagian selanjutnya. Pada kesempatan ini kita hanya tampilkan deklarasi class dan method saja supaya jelas mana method yang dipanggil dari implementasi service di atas.</p>

<h3>ProdukDAO</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">dao</span><span class="o">.</span><span class="na">springjdbc</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// import generate dari IDE</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Repository</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProdukDao</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Produk</span> <span class="nf">cariById</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Produk</span> <span class="nf">cariByKode</span><span class="o">(</span><span class="n">String</span> <span class="n">kode</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">hitungSemua</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Produk</span><span class="o">&gt;</span> <span class="nf">cariSemua</span><span class="o">(</span><span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">hitungByNama</span><span class="o">(</span><span class="n">String</span> <span class="n">nama</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Produk</span><span class="o">&gt;</span> <span class="nf">cariByNama</span><span class="o">(</span><span class="n">String</span> <span class="n">nama</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">ResultSetJadiProduk</span> <span class="kd">implements</span> <span class="n">RowMapper</span><span class="o">&lt;</span><span class="n">Produk</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Produk</span> <span class="nf">mapRow</span><span class="o">(</span><span class="n">ResultSet</span> <span class="n">rs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>PenjualanDao</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">dao</span><span class="o">.</span><span class="na">springjdbc</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// import generate dari IDE</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Repository</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PenjualanDao</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="n">Penjualan</span> <span class="n">p</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Penjualan</span> <span class="nf">cariById</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">hitungByPeriode</span><span class="o">(</span><span class="n">Date</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">Date</span> <span class="n">sampai</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Penjualan</span><span class="o">&gt;</span> <span class="nf">cariByPeriode</span><span class="o">(</span><span class="n">Date</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">Date</span> <span class="n">sampai</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">ResultSetJadiPenjualan</span> <span class="kd">implements</span> <span class="n">RowMapper</span><span class="o">&lt;</span><span class="n">Penjualan</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Penjualan</span> <span class="nf">mapRow</span><span class="o">(</span><span class="n">ResultSet</span> <span class="n">rs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>PenjualanDetailDao</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">dao</span><span class="o">.</span><span class="na">springjdbc</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// import generate dari IDE</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Repository</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PenjualanDetailDao</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="kd">final</span> <span class="n">PenjualanDetail</span> <span class="n">p</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PenjualanDetail</span><span class="o">&gt;</span> <span class="nf">cariByPenjualan</span><span class="o">(</span><span class="n">Penjualan</span> <span class="n">p</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">hitungByProdukDanPeriode</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">,</span> <span class="n">Date</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">Date</span> <span class="n">sampai</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PenjualanDetail</span><span class="o">&gt;</span> <span class="nf">cariByProdukDanPeriode</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">,</span> <span class="n">Date</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">Date</span> <span class="n">sampai</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">ResultSetJadiPenjualanDetail</span> <span class="kd">implements</span> <span class="n">RowMapper</span><span class="o">&lt;</span><span class="n">PenjualanDetail</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">PenjualanDetail</span> <span class="nf">mapRow</span><span class="o">(</span><span class="n">ResultSet</span> <span class="n">rs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Automated Test</h1>

<p>Seperti dijelaskan di atas, automated test kita bagi menjadi dua kategori, yaitu abstract class yang menampung semua logika pengetesan, dan concrete class yang menyediakan konfigurasi.</p>

<h2>Abstract Base Class</h2>

<h3>ProdukServiceTest</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">service</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// import generate dari IDE</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">ProdukServiceTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">PenjualanService</span> <span class="nf">getPenjualanService</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">DataSource</span> <span class="nf">getDataSource</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Before</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">bersihkanDataTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSimpanProduk</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCariProdukById</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCariProdukByKode</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testHitungSemuaProduk</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCariSemuaProduk</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testHitungProdukByNama</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCariProdukByNama</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>PenjualanServiceTest</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">service</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// import generate dari IDE</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">PenjualanServiceTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">PenjualanService</span> <span class="nf">getPenjualanService</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">DataSource</span> <span class="nf">getDataSource</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Before</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">bersihkanDataTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSimpanPenjualan</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCariPenjualanById</span><span class="o">(){}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testHitungPenjualanByPeriode</span><span class="o">(){}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCariPenjualanByPeriode</span><span class="o">(){}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testHitungPenjualanDetailByProdukDanPeriode</span><span class="o">(){}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCariPenjualanDetailByProdukDanPeriode</span><span class="o">(){}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Seperti kita lihat di atas, kedua class tersebut memiliki dua abstract method, yaitu:</p>

<ul>
<li><code>public abstract PenjualanService getPenjualanService()</code></li>
<li><code>public abstract DataSource getDataSource();</code></li>
</ul>


<p>Kedua object <code>PenjualanService</code> dan <code>DataSource</code> didapatkan dari konfigurasi Spring.
Konfigurasi Spring dibuat berdasarkan teknologi yang digunakan.
Konfigurasi Spring JDBC berbeda dengan konfigurasi Hibernate ataupun Spring Data JPA.</p>

<p>Dengan teknik ini, bila di kemudian hari kita membuat implementasi dengan Hibernate atau Spring Data JPA,
kita tidak perlu lagi copy-paste test class, cukup buat subclass yang menyediakan kedua object tersebut.</p>

<p>Berikut adalah subclassnya</p>

<h2>Implementasi Test Business Service</h2>

<p>Karena hanya beberapa baris dan tidak butuh banyak penjelasan, kita tampilkan di sini full source code, bukan hanya kerangkanya saja.</p>

<h3>ProdukServiceSpringJdbcTest</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">springjdbc</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// import generate dari IDE</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="s">&quot;classpath*:com/muhardin/**/spring-jdbc-ctx.xml&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProdukServiceSpringJdbcTest</span> <span class="kd">extends</span> <span class="n">ProdukServiceTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">PenjualanService</span> <span class="n">penjualanService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">PenjualanService</span> <span class="nf">getPenjualanService</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">penjualanService</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">DataSource</span> <span class="nf">getDataSource</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">dataSource</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>PenjualanServiceSpringJdbcTest</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">springjdbc</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// import generate dari IDE</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="s">&quot;classpath*:com/muhardin/**/spring-jdbc-ctx.xml&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PenjualanServiceSpringJdbcTest</span> <span class="kd">extends</span> <span class="n">PenjualanServiceTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">PenjualanService</span> <span class="n">penjualanService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">PenjualanService</span> <span class="nf">getPenjualanService</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">penjualanService</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">DataSource</span> <span class="nf">getDataSource</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">dataSource</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Seperti kita lihat di atas, <code>dataSource</code> dan <code>penjualanService</code> disediakan melalui Dependency Injection.</p>

<p>Cara kerjanya sebagai berikut:</p>

<ol>
<li>Kita jalankan JUnit melalui IDE atau Maven. IDE atau Maven akan membaca semua file dalam folder <code>src/test/java</code> dan memproses semua class yang namanya berakhiran <code>Test</code> seperti <code>PenjualanServiceSpringJdbcTest</code>. IDE/Maven juga memproses <code>PenjualanServiceTest</code>, tapi karena classnya abstract maka tidak diproses lebih lanjut.</li>
<li>JUnit melihat annotation <code>@RunWith</code>, jadi dia tidak menjalankan sendiri melainkan menyuruh <code>SpringJUnit4ClassRunner</code> untuk menjalankan test</li>
<li><code>SpringJUnit4ClassRunner</code> membaca annotation <code>@ContextConfiguration</code>, lalu menggunakan nilai di dalamnya untuk melakukan inisialisasi <code>ApplicationContext</code>, kemudian mengisi variabel yang ditandai dengan <code>@Autowired</code></li>
<li>Karena <code>PenjualanServiceSpringJdbcTest</code> merupakan subclass dari <code>PenjualanServiceTest</code>, maka dia akan mewarisi semua method <code>@Test</code> yang dimiliki <code>PenjualanServiceTest</code>. Method <code>@Test</code> ini akan dijalankan oleh IDE/Maven.</li>
<li>Pada waktu method <code>@Test</code> dijalankan, bila perlu object <code>PenjualanService</code>, maka akan didapat dengan cara memanggil method <code>getPenjualanService</code>. Karena methodnya sudah dibuatkan implementasinya (tidak abstract lagi) dan sudah ada isinya, maka method <code>@Test</code> dapat bekerja dengan baik.</li>
</ol>


<p>Demikianlah bagian kedua dari tutorial mengakses database menggunakan Spring JDBC. Pada bagian ini kita sudah melihat bagaimana cara pengaturan file/folder dan interaksi antar class/method. Di bagian selanjutnya kita akan lihat <a href="http://software.endy.muhardin.com/java/insert-update-delete-dengan-spring-jdbc/">bagaimana cara menjalankan perintah SQL</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Konfigurasi Koneksi Database dengan Spring]]></title>
    <link href="http://software.endy.muhardin.com/java/konfigurasi-koneksi-database-dengan-spring/"/>
    <updated>2013-05-27T17:02:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/konfigurasi-koneksi-database-dengan-spring</id>
    <content type="html"><![CDATA[<p>Di Java, ada banyak cara untuk mengakses database, diantaranya:</p>

<ul>
<li><a href="http://docs.oracle.com/javase/tutorial/jdbc/">JDBC polos tanpa framework apapun</a></li>
<li><a href="http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/jdbc.html">JDBC dengan Spring (Spring JDBC)</a></li>
<li>JDBC dengan <a href="http://blog.mybatis.org/">iBatis/MyBatis</a></li>
<li><a href="http://docs.jboss.org/hibernate/orm/4.2/manual/en-US/html/">Hibernate</a></li>
<li><a href="http://www.datanucleus.org/products/datanucleus/jdo/guides/tutorial_rdbms.html">JDO</a></li>
<li><a href="http://docs.oracle.com/javaee/6/tutorial/doc/bnbpz.html">JPA</a></li>
<li><a href="http://www.springsource.org/spring-data/jpa">Spring Data JPA</a></li>
</ul>


<p>Masing-masing memiliki kelebihan dan kekurangan masing-masing yang tidak akan kita bahas di artikel ini.
Kali ini kita hanya akan membahas metode Spring JDBC dan perbandingannya dengan JDBC murni.</p>

<p>Artikel ini merupakan bagian pertama dari rangkaian artikel Spring JDBC, yaitu</p>

<ol>
<li><a href="http://software.endy.muhardin.com/java/konfigurasi-koneksi-database-dengan-spring/">Konfigurasi koneksi database</a></li>
<li><a href="http://software.endy.muhardin.com/java/struktur-aplikasi-java-dengan-spring-dan-maven/">Struktur Aplikasi</a></li>
<li><a href="http://software.endy.muhardin.com/java/insert-update-delete-dengan-spring-jdbc/">Insert, update, dan delete data</a></li>
<li><a href="http://software.endy.muhardin.com/java/query-dengan-spring-jdbc/">Query data</a></li>
<li><a href="http://software.endy.muhardin.com/java/mengetes-akses-database/">Mengetes Akses Database</a></li>
</ol>


<p>Keseluruhan kode program dapat dilihat di <a href="https://github.com/endymuhardin/belajar-akses-database-java">repository belajar-akses-database-java di Github saya</a>, khususnya <a href="https://github.com/endymuhardin/belajar-akses-database-java/tree/spring-jdbc">branch spring-jdbc</a>.</p>

<!--more-->


<h2>Perbandingan JDBC polos dan Spring JDBC</h2>

<p>Menggunakan JDBC polos tanpa library memang mudah, karena tidak perlu pusing mempelajari library lain. Tapi ada beberapa keterbatasan dan kesulitan, diantaranya:</p>

<ul>
<li>semua method throws Exception, sehingga kode program kita menjadi kotor dengan try-catch</li>
<li>tidak ada manajemen koneksi database, kita harus buka-tutup sendiri</li>
<li>tidak ada declarative transaction, kita harus secara manual melakukan begin-commit/rollback</li>
</ul>


<p>Dengan berbagai keterbatasan tersebut, ada baiknya kita menggunakan bantuan Spring Framework, yaitu modul <code>spring-jdbc</code> untuk memudahkan berbagai kegiatan di atas. Tentunya masih banyak hal yang harus kita lakukan sendiri, tidak seperti penggunaan library Object Relational Mapping (ORM) seperti Hibernate atau JPA, di antaranya:</p>

<ul>
<li>mapping dari result set menjadi Java object</li>
<li>mapping dari Java object menjadi isi parameter PreparedStatement</li>
<li>cache</li>
<li>cascading operation</li>
<li>generate primary key secara otomatis</li>
<li>dsb</li>
</ul>


<p>Ada beberapa tahapan dalam menggunakan Spring JDBC, yaitu :</p>

<ol>
<li>Konfigurasi Koneksi Database</li>
<li>Membuat class Data Access Object (DAO)</li>
<li>Membuat class implementasi business process/service</li>
<li>Membuat test otomatis menggunakan JUnit</li>
</ol>


<h1>Studi Kasus</h1>

<p>Agar lebih konkrit, kita akan menggunakan skema database yang umum digunakan di aplikasi bisnis,
yaitu memiliki tabel :</p>

<ul>
<li>Master Data / Referensi</li>
<li>Header Transaksi</li>
<li>Detail Transaksi</li>
</ul>


<p>Berikut adalah skema database yang akan kita gunakan:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">create</span> <span class="k">table</span> <span class="n">m_produk</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">id</span> <span class="nb">int</span> <span class="k">primary</span> <span class="k">key</span> <span class="n">auto_increment</span><span class="p">,</span>
</span><span class='line'>    <span class="n">kode</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>    <span class="n">nama</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>    <span class="n">harga</span> <span class="nb">decimal</span><span class="p">(</span><span class="mi">19</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span>
</span><span class='line'><span class="p">)</span> <span class="n">engine</span><span class="o">=</span><span class="n">InnoDB</span> <span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">create</span> <span class="k">table</span> <span class="n">t_penjualan</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">id</span> <span class="nb">int</span> <span class="k">primary</span> <span class="k">key</span> <span class="n">auto_increment</span><span class="p">,</span>
</span><span class='line'>    <span class="n">waktu_transaksi</span> <span class="n">datetime</span> <span class="k">not</span> <span class="k">null</span>
</span><span class='line'><span class="p">)</span> <span class="n">engine</span><span class="o">=</span><span class="n">InnoDB</span> <span class="n">AUTO_INCREMENT</span><span class="o">=</span><span class="mi">100</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">create</span> <span class="k">table</span> <span class="n">t_penjualan_detail</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">id</span> <span class="nb">int</span> <span class="k">primary</span> <span class="k">key</span> <span class="n">auto_increment</span><span class="p">,</span>
</span><span class='line'>    <span class="n">id_penjualan</span> <span class="nb">int</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>    <span class="n">id_produk</span> <span class="nb">int</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>    <span class="n">harga</span> <span class="nb">decimal</span><span class="p">(</span><span class="mi">19</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>    <span class="n">jumlah</span> <span class="nb">int</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>    <span class="k">foreign</span> <span class="k">key</span><span class="p">(</span><span class="n">id_penjualan</span><span class="p">)</span> <span class="k">references</span> <span class="n">t_penjualan</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="k">on</span> <span class="k">delete</span> <span class="k">cascade</span><span class="p">,</span>
</span><span class='line'>    <span class="k">foreign</span> <span class="k">key</span><span class="p">(</span><span class="n">id_produk</span><span class="p">)</span> <span class="k">references</span> <span class="n">m_produk</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="k">on</span> <span class="k">delete</span> <span class="k">restrict</span>
</span><span class='line'><span class="p">)</span> <span class="n">engine</span><span class="o">=</span><span class="n">InnoDB</span> <span class="n">AUTO_INCREMENT</span><span class="o">=</span><span class="mi">100</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Untuk keperluan test, jangan lupa kita sertakan beberapa baris data.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">insert</span> <span class="k">into</span> <span class="n">m_produk</span> <span class="p">(</span><span class="n">id</span><span class="p">,</span><span class="n">kode</span><span class="p">,</span><span class="n">nama</span><span class="p">,</span><span class="n">harga</span><span class="p">)</span> <span class="k">values</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;K-001&#39;</span><span class="p">,</span> <span class="s1">&#39;Keyboard USB&#39;</span><span class="p">,</span> <span class="mi">150000</span><span class="p">),</span>
</span><span class='line'><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;M-001&#39;</span><span class="p">,</span> <span class="s1">&#39;Mouse USB&#39;</span><span class="p">,</span> <span class="mi">50000</span><span class="p">),</span>
</span><span class='line'><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;L-001&#39;</span><span class="p">,</span> <span class="s1">&#39;Laptop&#39;</span><span class="p">,</span> <span class="mi">10000000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">insert</span> <span class="k">into</span> <span class="n">t_penjualan</span> <span class="p">(</span><span class="n">id</span><span class="p">,</span><span class="n">waktu_transaksi</span><span class="p">)</span> <span class="k">values</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="s1">&#39;2013-01-01 20:30:30&#39;</span><span class="p">),</span>
</span><span class='line'><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="s1">&#39;2013-01-02 15:15:15&#39;</span><span class="p">),</span>
</span><span class='line'><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="s1">&#39;2013-02-02 09:09:09&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">insert</span> <span class="k">into</span> <span class="n">t_penjualan_detail</span> <span class="p">(</span><span class="n">id</span><span class="p">,</span><span class="n">id_penjualan</span><span class="p">,</span> <span class="n">id_produk</span><span class="p">,</span> <span class="n">harga</span><span class="p">,</span> <span class="n">jumlah</span><span class="p">)</span> <span class="k">values</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">150000</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span>
</span><span class='line'><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">50000</span><span class="p">,</span><span class="mi">5</span><span class="p">),</span>
</span><span class='line'><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">150000</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span>
</span><span class='line'><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">50000</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span>
</span><span class='line'><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">10000000</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tabel dan data di atas kita masukkan ke database dengan rincian sebagai berikut:</p>

<ul>
<li>Jenis Database : MySQL</li>
<li>Server Database : localhost</li>
<li>Nama Database : belajar</li>
<li>Username Database : root</li>
<li>Password Database : admin</li>
</ul>


<p>Selanjutnya kita akan mengkonfigurasi Spring supaya bisa terkoneksi dengan database tersebut.</p>

<h1>Konfigurasi Koneksi Database</h1>

<h2>Dependensi</h2>

<p>Kita membutuhkan beberapa library, dinyatakan dalam dependensi Maven sebagai berikut:</p>

<h3>Driver database MySQL</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>${mysql.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;scope&gt;</span>runtime<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Library manajemen koneksi database (database connection pooling)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>commons-dbcp<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>commons-dbcp<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>${commons-dbcp.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Spring JDBC</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>${org.springframework.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>spring-jdbc<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>${org.springframework.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>spring-test<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>${org.springframework.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Selanjutnya, kita membuat konfigurasi database untuk Spring. Kita beri nama saja file konfigurasinya <code>spring-jdbc-ctx.xml</code>
dan kita letakkan di folder <code>src/main/resources</code>. File ini berisi :</p>

<ul>
<li>konfigurasi data source untuk koneksi ke database. Kita menggunakan pustaka <code>commons-dbcp</code> untuk menangani connection pooling ke database.</li>
<li>transaction manager. Ini dibutuhkan supaya kita tidak perlu lagi membuat coding untuk rangkaian <code>begin-commit/rollback</code>.</li>
<li>component scan. Ini dibutuhkan agar object DAO dan Service kita otomatis dideteksi dan diinisialisasi oleh Spring</li>
</ul>


<h2>Koneksi Database</h2>

<p>Berikut konfigurasi koneksi database</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">class=</span><span class="s">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;driverClassName&quot;</span> <span class="na">value=</span><span class="s">&quot;com.mysql.jdbc.Driver&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;url&quot;</span> <span class="na">value=</span><span class="s">&quot;jdbc:mysql://localhost/belajar&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;username&quot;</span> <span class="na">value=</span><span class="s">&quot;root&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span> <span class="na">value=</span><span class="s">&quot;admin&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxActive&quot;</span> <span class="na">value=</span><span class="s">&quot;80&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxWait&quot;</span> <span class="na">value=</span><span class="s">&quot;40000&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxIdle&quot;</span> <span class="na">value=</span><span class="s">&quot;20&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Penjelasannya sebagai berikut:</p>

<h3>Database Connection Pooling</h3>

<p>Koneksi ke database sebetulnya merupakan operasi yang <em>mahal</em>. Kenapa <em>mahal</em>?
Karena setiap kali kita membuat koneksi, ada serangkaian kegiatan yang harus dilakukan oleh database server seperti:</p>

<ul>
<li>memeriksa username dan password</li>
<li>memeriksa apakah komputer kita (dilihat dari alamat IP atau nama host) diijinkan untuk masuk</li>
<li>memeriksa apakah database, tabel, dan tindakan yang kita lakukan memiliki ijin akses yang mencukupi</li>
</ul>


<p>Oleh karena itu, idealnya koneksi database dibuat sekali saja dan digunakan terus sepanjang aplikasi berjalan.
Tentunya kalau koneksi database hanya satu, setiap request dari user akan mengantri.
Untuk itu kita buat banyak koneksi sekaligus yang nantinya akan <em>dipinjamkan</em> pada request yang membutuhkan.
Teknik ini disebut dengan istilah database connection pooling.</p>

<p>Library yang kita gunakan untuk itu adalah <a href="http://commons.apache.org/proper/commons-dbcp/configuration.html">Apache Commons DBCP</a>, yang ditandai dengan penggunaan class <code>org.apache.commons.dbcp.BasicDataSource</code> di atas.</p>

<p>Ada banyak hal yang bisa disetting, tapi kita akan fokus ke beberapa saja yaitu:</p>

<ul>
<li><code>driverClassName</code> : nama class untuk koneksi ke database. Ini harus sesuai dengan merek dan versi database yang digunakan</li>
<li><code>url</code> : informasi koneksi database. Biasanya berisi alamat server (IP atau Hostname) dan nama database</li>
<li><code>username</code> : username untuk connect ke database</li>
<li><code>password</code> : passwordnya user tersebut</li>
</ul>


<p>Keempat informasi di atas adalah informasi umum yang kita butuhkan apapun metode koneksi database yang kita gunakan, tidak terkait dengan penggunaan Apache Commons DBCP. Konfigurasi berikut barulah berkaitan dengan Apache Commons DBCP:</p>

<ul>
<li><p><code>maxActive</code> : jumlah koneksi yang boleh aktif secara berbarengan. Ini harus disetting dibawah angka yang kita ijinkan di database server. Misalnya di MySQL kita ijinkan 100 koneksi berbarengan, maka angkanya harus dibawah 100. Jangan juga dihabiskan 100, untuk berjaga-jaga siapa tahu kita butuh koneksi langsung ke MySQL tanpa lewat aplikasi (misalnya untuk keperluan debug). Pertimbangkan juga apabila ada aplikasi lain yang menggunakan database yang sama.</p></li>
<li><p><code>maxIdle</code> : ada kalanya aplikasi kita sedang sepi dari request user sehingga banyak koneksi database yang menganggur (idle). Angka <code>maxIdle</code> ini menentukan berapa koneksi yang akan tetap dipegang walaupun idle. Bila ada 20 koneksi idle, padahal <code>maxIdle</code> berisi 15, maka 5 koneksi akan ditutup. Ini merupakan trade-off. Bila terlalu banyak idle, maka memori database server akan terpakai untuk koneksi yang standby ini. Tapi bila terlalu sedikit, pada waktu aplikasi mendadak diserbu user, akan butuh waktu lama untuk dia membuatkan lagi koneksi baru.</p></li>
<li><p><code>maxWait</code> : bila semua koneksi sebanyak <code>maxActive</code> sedang terpakai semua, request berikutnya akan menunggu salah satu selesai menggunakan koneksi. Nilai <code>maxWait</code> menentukan berapa milidetik request tersebut menunggu. Bila lebih dari <code>maxWait</code> dan belum juga kebagian koneksi, maka request tersebut akan mendapatkan <code>Exception</code>. Konfigurasi ini perlu diperhatikan karena nilai defaultnya adalah <code>indefinitely</code> yaitu menunggu selamanya.</p></li>
</ul>


<p>Saya pernah mendapatkan masalah karena setting default ini. Aplikasi bengong seolah hang. Dicek ke log file tidak ada error. Ternyata masalahnya ada query yang kurang optimal sehingga memakan waktu lama. Pada saat banyak request yang menjalankan query tersebut, request lain menunggu lama tanpa ada pemberitahuan, sehingga terkesan hang. Setelah nilai <code>maxWait</code> saya ganti menjadi 30 detik, mulai banyak error message bermunculan dari request yang menunggu > 30 detik. Dengan adanya error message, query bermasalah tersebut menjadi terlihat sehingga bisa diperbaiki.</p>

<blockquote><p>Pesan moral pertama : pesan error itu penting untuk mengetahui sumber masalah. Dalam bugfixing, yang paling penting adalah menemukan masalah. Kalau masalah sudah ditemukan, siapa saja bisa memperbaiki. Jadi kalau aplikasi kita bermasalah, prioritas pertama kita adalah membuat dia mengeluarkan pesan error yang jelas.</p></blockquote>


<p>Baca <a href="http://software.endy.muhardin.com/java/tips-melaporkan-error/">artikel ini</a> untuk mengetahui apa yang dimaksud dengan pesan error yang jelas.</p>

<blockquote><p>Pesan moral kedua : Dalam bugfixing, sering kali kita tidak langsung mendapatkan masalah utama. Pada kasus di atas, pertama kali saya menemukan bahwa perilaku defaultnya Commons DBCP adalah menunggu koneksi dengan sabar sampai selamanya. Setelah ini diubah, barulah saya menemukan masalah utama, yaitu ada query yang tidak optimal.</p></blockquote>


<h2>Transaction Manager</h2>

<p>Setelah terhubung ke database, selanjutnya kita akan mengkonfigurasi transaction manager. Ini adalah fitur dari Spring Framework yang membebaskan kita dari coding manual untuk urusan transaction. Bila tidak menggunakan ini, maka kode program kita akan tampak seperti ini:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">){</span>
</span><span class='line'>    <span class="n">Connection</span> <span class="n">conn</span><span class="o">;</span> <span class="c1">// inisialisasi koneksi di sini</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">conn</span><span class="o">.</span><span class="na">setAutocommit</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&quot;insert into m_produk ... &quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="n">conn</span><span class="o">.</span><span class="na">createStatement</span><span class="o">().</span><span class="na">executeUpdate</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">conn</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">err</span><span class="o">){</span>
</span><span class='line'>        <span class="n">conn</span><span class="o">.</span><span class="na">rollback</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">conn</span><span class="o">.</span><span class="na">setAutocommit</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Untuk dua baris perintah seperti di atas, kita harus menambahkan 8 baris hanya untuk mengurus transaction <strong>pada setiap method</strong>. Bayangkan kalau aplikasi kita punya 100 method, maka kode program untuk mengelola transaksi saja sudah 800 baris. Dengan fitur transaction manager, maka method di atas bisa ditulis ulang seperti ini:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Transactional</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">){</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&quot;insert into m_produk ... &quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="na">createStatement</span><span class="o">().</span><span class="na">executeUpdate</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Jauh lebih bersih dan rapi. Kode program jadi mudah dibaca dan akibatnya tentu memudahkan kita pada waktu bugfix, perubahan, ataupun penambahan fitur.</p>

<p>Nah ini dia konfigurasi transaction manager:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;transactionManager&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">ref=</span><span class="s">&quot;dataSource&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;tx:annotation-driven/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Class transaction manager yang digunakan berbeda tergantung metode akses database yang digunakan dan juga bagaimana cara kita mendeploy aplikasi. Beberapa pilihan transaction manager yang lain antara lain:</p>

<ul>
<li><code>DataSourceTransactionManager</code> : digunakan untuk koneksi database menggunakan <code>javax.sql.DataSource</code>. Ini artinya koneksi langsung dari aplikasi ke database server.</li>
<li><code>JtaTransactionManager</code> : digunakan bila aplikasi kita dideploy di application server yang memiliki transaction manager sendiri (seperti Glassfish, JBoss, Websphere, Weblogic, dsb) <em>dan menggunakan</em> transaction manager yang disediakan tersebut. Bila kita deploy di Tomcat, hampir pasti kita tidak menggunakan JTA. Bila kita deploy ke Glassfish dan menggunakan konfigurasi <code>dataSource</code> Apache Commons DBCP, berarti kita juga tidak menggunakan JTA.</li>
<li><code>HibernateTransactionManager</code> : seperti ditunjukkan oleh namanya, gunakan ini bila kita menggunakan Hibernate</li>
<li><code>JpaTransactionManager</code> : ini juga sudah jelas dari namanya. Bila kita pakai JPA, gunakan transaction manager ini.</li>
</ul>


<p>Demikian tutorial cara konfigurasi koneksi database. Pada bagian selanjutnya, kita akan <a href="http://software.endy.muhardin.com/java/struktur-aplikasi-java-dengan-spring-dan-maven/">menyiapkan kerangka aplikasinya dulu</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mendebug Aplikasi AJAX]]></title>
    <link href="http://software.endy.muhardin.com/java/mendebug-aplikasi-ajax/"/>
    <updated>2013-05-22T16:46:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/mendebug-aplikasi-ajax</id>
    <content type="html"><![CDATA[<p>Di jaman modern ini, penggunaan AJAX sudah sangat mendunia, sehingga jarang sekali kita temui aplikasi yang tidak menggunakan AJAX. Demikian juga dengan template aplikasi standar yang digunakan di ArtiVisi, yaitu <a href="https://github.com/endymuhardin/belajar-restful">Belajar RESTful</a>.</p>

<p>Bagi yang baru mendengar atau sering dengar tapi belum paham, berikut penjelasan singkat mengenai AJAX.</p>

<ul>
<li>AJAX adalah salah satu teknik pemrograman web</li>
<li>AJAX bukanlah nama library atau framework, dia adalah cara membuat aplikasi</li>
<li><p>Pada aplikasi non-AJAX, siklusnya sebagai berikut :</p>

<ol>
<li>Ketik URL</li>
<li>Tampil HTML</li>
<li>Lakukan sesuatu (isi form + tekan submit)</li>
<li>Browser mengirim data</li>
<li>Server mengembalikan HTML full satu halaman</li>
</ol>
</li>
<li><p>Pada aplikasi AJAX, request ke server dilakukan oleh javascript, bukan oleh form submit.</p></li>
<li>Response dari server biasanya hanya berupa data dalam format XML atau JSON, bukan data + tampilan seperti HTML</li>
<li>Data yang dikirim server digunakan javascript hanya untuk mengubah sebagian halaman tampilan, bukan seluruh halaman seperti aplikasi non-AJAX.</li>
</ul>


<p>Karena perbedaan cara kerja aplikasi AJAX, maka cara debug errornya juga berbeda. Untuk mendebug aplikasi AJAX, kita perlu melengkapi browser yang kita gunakan supaya bisa memantau request dan response yang dilakukan aplikasi.</p>

<p>Pada artikel ini, kita akan membahas bagaimana cara mendebug aplikasi AJAX. Sebagai contoh kasus, kita akan gunakan aplikasi <a href="https://github.com/endymuhardin/belajar-restful">Belajar RESTful</a>.</p>

<!--more-->


<h2>Studi Kasus</h2>

<p>Sebagai contoh, kita akan mendebug form entri user berikut</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/01-screen-form-user.png" title="Form Entri User" ></p>

<p>dan tampilan daftar user berikut</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/02-screen-list-user.png" title="Daftar User" ></p>

<h2>Persenjataan</h2>

<p>Agar bisa mendebug aplikasi AJAX, browser kita harus bisa menampilkan lalu lintas request dan response. Bila menggunakan Firefox, instal plugin <a href="https://addons.mozilla.org/en-US/firefox/addon/firebug/">Firebug</a>. Bila menggunakan Chrome, kemampuan ini sudah ada di menu Tools > Developer Tools sehingga kita tidak perlu menginstal apa-apa.</p>

<p>Setelah terinstal, pantau tab Network untuk melihat detail request dan response.</p>

<p>Berikut contohnya di Firebug</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/03-network-tab-firebug.png" title="Network Tab Firebug" ></p>

<p>Dan ini tampilannya di Chrome Developer Tools</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/04-network-tab-chrome.png" title="Network Tab Chrome Developer Tools" ></p>

<p>Seiring waktu, tab ini bisa penuh, kita bisa bersihkan menggunakan tombol Clear.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/05-clear-log.png" title="Tombol Clear" ></p>

<p>Beberapa aplikasi AJAX yang mengikuti kaidah REST mengirim data ke server dalam format JSON dengan HTTP method yang sesuai fungsi seperti GET, POST, PUT, DELETE. Seringkali kita juga perlu memanipulasi HTTP request header dan melihat isi HTTP response header. Untuk itu, kita perlu menambah plugin lagi di browser.</p>

<p>Silahkan install <a href="https://addons.mozilla.org/En-us/firefox/addon/poster/">Poster</a> untuk Firefox, atau <a href="https://chrome.google.com/webstore/detail/rest-console/cokgbflfommojglbmbpenpphppikmonn?hl=en">Rest Console</a> untuk Chrome.</p>

<h2>Mendebug Form Submit</h2>

<p>Di aplikasi Belajar RESTful, ketika kita mengisi form dan menekan tombol Simpan, prosesnya agak berbeda dengan aplikasi web tradisional.
Pada aplikasi ini, semua form data dikumpulkan dan dikonversi menjadi format JSON, dan kemudian dikirim dalam HTTP request body. Ini dilakukan menggunakan Javascript.</p>

<p>Di aplikasi web tradisional, data form ini disubmit dalam format HTTP request parameter dan tidak melibatkan Javascript sama sekali.</p>

<p>Karena ada proses konversi menjadi JSON ini, selama proses development kita ingin melihat dan memeriksa apakah nama variabel dan datanya sudah benar. Untuk itu kita bisa menggunakan Chrome Developer Tools, seperti bisa dilihat di screenshot berikut.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/06-debug-siklus-cdt.png" title="Debug Request di Chrome Developer Tools" ></p>

<p>Screen debug di Firebug bentuknya seperti ini</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/09-debug-siklus-firebug.png" title="Debug Request di Firebug" ></p>

<p>Hal-hal yang perlu kita amati adalah :</p>

<ul>
<li><p>Request</p>

<ul>
<li>Request Method : GET, POST, PUT, atau DELETE</li>
<li>Request Header, terutama Accept dan Content-Type</li>
<li>Request Parameter</li>
<li>Data yang dikirim (bila ada)</li>
</ul>
</li>
<li><p>Response</p>

<ul>
<li>Response Status : Sukses (200, 201, 204) atau Gagal (4xx atau 5xx)</li>
<li>Response Header, terutama Content-Type dan Location</li>
<li>Response Data (bila ada)</li>
</ul>
</li>
</ul>


<p>Berikut adalah data-data tersebut di Chrome Developer Tools</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/07-detail-request-cdt.png" title="Detail Request Chrome Developer Tools" ></p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/08-detail-response-cdt.png" title="Detail Response Chrome Developer Tools" ></p>

<p>Di Firebug, header dan data dipisahkan</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/10-detail-request-firebug.png" title="Tab Header" ></p>

<p>Request data ditampilkan di tab terpisah</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/11-detail-post-data-firebug.png" title="Tab Request Data" ></p>

<p>Pada waktu membaca data response, kita bisa melihat data aslinya</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/12-detail-response-firebug.png" title="Detail Response Firebug" ></p>

<p>dan bisa juga melihat yang sudah diformat dengan rapi</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/13-detail-json-firebug.png" title="Detail JSON Firebug" ></p>

<h2>Mendebug REST Server</h2>

<p>Pada waktu kita mengisi form dan menekan tombol Submit, client mengirim HTTP request dan data berbentuk JSON. Kemudian server memproses data yang diterima dan mengirim kembalian berupa JSON juga. Agar development lebih mudah, kita ingin melakukan request dan melihat response secara langsung, tanpa direpotkan dengan tampilan HTML dan coding Javascript. Kita bisa menggunakan plugin browser untuk melakukan hal ini.</p>

<p>Beberapa hal yang harus kita ketahui untuk mengetes proses di sisi server adalah:</p>

<ul>
<li>URL</li>
<li>HTTP Method</li>
<li>Tipe data yang dikirim</li>
<li>Data yang akan dikirim</li>
</ul>


<h3>Menggunakan Chrome</h3>

<p>Berikut adalah tampilan plugin Chrome, yaitu REST Console yang sudah terisi data di atas.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/14-request-form-rest-console.png" title="Request Form REST Console" ></p>

<p>Selanjutnya kita tinggal menekan tombol yang sesuai dengan HTTP Method yang dibutuhkan. Bila sukses, kita akan mendapatkan tampilan seperti ini</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/15-response-sukses-rest-console.png" title="Response Sukses REST Console" ></p>

<p>Bila gagal, kita akan melihat tampilan seperti ini</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/16-response-error-rest-console.png" title="Response Gagal REST Console" ></p>

<h3>Menggunakan Firefox</h3>

<p>Hal yang sama bisa dilakukan dengan Poster di Firefox. Berikut adalah form yang digunakan untuk entri data.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/17-request-form-poster.png" title="Request Form Poster" ></p>

<p>Bila sukses, kita mendapatkan hasil seperti ini</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/18-response-sukses-poster.png" title="Response Sukses Poster" ></p>

<p>Bila gagal berikut tampilannya</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/19-response-error-poster.png" title="Response Gagal Poster" ></p>

<p>Dengan menggunakan REST Console dan Poster, kita dapat mengurus coding di sisi server tanpa perlu dipusingkan dengan coding di sisi client (HTML, CSS, dan JS).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrasi Aplikasi]]></title>
    <link href="http://software.endy.muhardin.com/java/integrasi-aplikasi/"/>
    <updated>2013-05-20T21:20:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/integrasi-aplikasi</id>
    <content type="html"><![CDATA[<p>Aplikasi jaman sekarang jarang sekali yang berdiri sendiri.
Umumnya aplikasi yang kita buat harus terhubung dengan aplikasi yang dibuat orang lain.
Beberapa contohnya:</p>

<ul>
<li>kita membuat aplikasi mobile, terhubung ke social network seperti Facebook dan Twitter</li>
<li>kita membuat aplikasi bisnis, harus terhubung ke aplikasi akunting yang sudah lebih dulu ada</li>
<li>kita membuat aplikasi pembayaran tagihan, harus terhubung ke penyedia tagihan seperti PLN, Telkom, dsb</li>
</ul>


<p>Pada artikel ini, kita akan membahas beberapa strategi untuk menghubungkan aplikasi yang kita buat dengan aplikasi lain.</p>

<!--more-->


<p>Secara umum, ada empat strategi untuk menghubungkan aplikasi satu dengan lainnya:</p>

<ul>
<li>pemanggilan prosedur/function</li>
<li>messaging</li>
<li>sharing database</li>
<li>kirim/terima file</li>
</ul>


<p>Mari kita bahas satu persatu.</p>

<h2>Pemanggilan prosedur</h2>

<p>Pada metode ini, aplikasi yang akan melayani (kita sebut aplikasi server),
harus menyediakan mekanisme agar bisa dipanggil aplikasi lain (kita sebut aplikasi client).</p>

<p>Ada beberapa protokol yang populer digunakan dalam strategi ini, misalnya:</p>

<ul>
<li>SOAP</li>
<li>REST</li>
<li>ISO-8583</li>
<li>XMLRPC</li>
</ul>


<p>Ciri utama dalam strategi ini adalah:</p>

<ul>
<li>ada kesepakatan nama method yang akan dipanggil</li>
<li>ada kesepakatan jumlah dan tipe data yang dikirim dan diterima</li>
<li>client dan server harus online dalam waktu yang berbarengan.</li>
<li>setelah client memanggil server, dia akan menunggu sampai ada balasan dari server. Sebelum terima balasan, client tidak bisa melanjutkan. Fenomena ini dikenal dengan istilah synchronous invocation.</li>
</ul>


<p>Berikut beberapa contoh implementasi dari strategi ini:</p>

<ul>
<li><a href="http://software.endy.muhardin.com/java/remoting-dengan-spring/">Remoting dengan Spring Framework</a></li>
<li><a href="http://martinusadyh.web.id/tulisanku/berkenalan-dengan-iso-8583-menggunakan-java/">Transaksi Finansial dengan ISO-8583</a></li>
</ul>


<h2>Messaging</h2>

<p>Konsep messaging sebetulnya sudah tidak asing lagi bagi kita. Sering kita gunakan sehari-hari dalam bentuk email, chatting, sms, dan sejenisnya.</p>

<p>Beberapa ciri dari messaging antara lain:</p>

<ul>
<li>pengirim dan penerima tidak harus online berbarengan. Bisa saja pengirim mengirim pesan pada saat penerima offline, setelah itu pengirim juga offline. Pada waktu penerima online, dia akan menerima pesan yang ditujukan kepadanya pada waktu dia sedang offline.</li>
<li>ada satu pihak yang berfungsi sebagai penyimpan message. Dalam dunia messaging, pihak ini disebut sebagai message broker.</li>
<li>karena sifatnya yang memungkinkan tidak online barengan, maka biasanya ada mekanisme status delivery</li>
<li>biasanya ada juga masa kadaluarsa message di dalam database broker. Sebagai contoh, bila handphone kita mati lebih dari tiga hari, maka sms yang ditujukan ke handphone tersebut dan belum sampai di handphone kita akan dihapus oleh operator telekomunikasi.</li>
<li>tidak ada aturan mengenai format dan tipe data. Pengirim bebas mengirim apa saja. Penerima yang harus melakukan validasi terhadap format message</li>
<li>tidak ada mekanisme notifikasi ketika ada message baru. Penerima harus secara periodik mengecek (polling) ke broker untuk mengetahui ada-tidaknya message baru</li>
</ul>


<p>Dalam Java, ada beberapa pilihan untuk implementasi strategi messaging, diantaranya:</p>

<ul>
<li><a href="http://software.endy.muhardin.com/java/integrasi-pusat-cabang-2/">melalui email</a></li>
<li><a href="http://www.playsms.org/">melalui sms</a></li>
<li><a href="http://software.endy.muhardin.com/java/intro-jms/">menggunakan protokol JMS</a></li>
<li>menggunakan protokol AMQP</li>
</ul>


<h2>Sharing Database</h2>

<p>Pada strategi ini, pengirim dan penerima menggunakan database sebagai media pertukaran data. Pengirim menaruh datanya ke suatu tabel di database untuk kemudian dibaca oleh penerima.</p>

<p>Karena menggunakan database, maka mekanisme ini memiliki beberapa ciri khusus interaksi dengan database, yaitu:</p>

<ul>
<li>transaction. Pengirim bisa memastikan datanya terkirim secara utuh. Bila terjadi error di tengah pengiriman data, maka data yang sudah terlanjur ditulis bisa dibatalkan</li>
<li>tipe data bisa di-enforce. Kita bisa menggunakan tipe data angka, text, dan tanggal. Bila pengirim salah memasukkan data, maka database server akan menolaknya.</li>
</ul>


<p>Mirip dengan messaging, tidak ada mekanisme notifikasi ketika ada data baru yang ditaruh pengirim. Penerima harus secara periodik mengecek (polling) ke database untuk mengetahui ada-tidaknya data baru. Untuk memudahkan polling, biasanya tiap data diberikan kolom status untuk membedakan mana data yang sudah diproses dan mana yang belum.</p>

<p>Bila kita menggunakan Spring Integration, kita bisa langsung menggunakan <a href="http://static.springsource.org/spring-integration/reference/htmlsingle/#jdbc">implementasi yang tersedia</a> sehingga tidak perlu lagi membuatkan mekanisme pengecekan data baru. <a href="https://github.com/SpringSource/spring-integration-samples/tree/master/basic/jdbc">Contoh pemakaian juga sudah disediakan</a>, tinggal diikuti.</p>

<h2>File Transfer</h2>

<p>Sama seperti messaging, dengan strategi ini pengirim dan penerima tidak harus online berbarengan. Yang membedakannya dengan messaging adalah pada mekanisme ini biasanya format file dan struktur data di dalamnya sudah ditentukan. Demikian juga dengan lokasi penyimpanan file dan aturan penamaannya.</p>

<p>Berbeda dengan sharing database, mekanisme file transfer tidak memiliki mekanisme untuk memastikan data sampai dengan utuh. Kita sendiri yang harus memastikan keutuhan data, misalnya dengan mengirim file checksum bersama dengan file berisi data. File checksum ini bisa digunakan untuk memastikan file data terkirim secara utuh.</p>

<p>Pada mekanisme ini kita juga tidak bisa tahu progress pengiriman data. Apakah pengirim masih dalam proses mengirim atau sudah selesai? Kita tidak tahu secara pasti. Biasanya diakali dengan cara memeriksa ukuran file dalam selang waktu tertentu. Bila ukurannya masih terus bertambah, berarti proses pengiriman masih berjalan. Bila ukurannya tidak membesar lagi, ada indikasi bahwa pengiriman sudah selesai.</p>

<p>Untungnya prosedur pengecekan ini sudah dibuatkan <a href="http://static.springsource.org/spring-integration/reference/htmlsingle/#files">implementasinya</a> oleh rekan-rekan Spring Integration, sehingga kita tinggal mengikuti <a href="https://github.com/SpringSource/spring-integration-samples/tree/master/basic/file">contoh yang tersedia</a>.</p>

<p>Demikianlah sedikit informasi mengenai integrasi antar aplikasi. Semoga bermanfaat :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Training CMMI]]></title>
    <link href="http://software.endy.muhardin.com/manajemen/training-cmmi/"/>
    <updated>2013-05-10T14:13:00+07:00</updated>
    <id>http://software.endy.muhardin.com/manajemen/training-cmmi</id>
    <content type="html"><![CDATA[<p>Saya akan mengisi <a href="http://brainmatics.com/cmmi-capability-maturity-model-integration/">training CMMI di Brainmatics</a> minggu depan, Senin - Rabu, 13 - 15 Mei 2013. Buat yang belum paham apa itu CMMI, bisa baca <a href="http://software.endy.muhardin.com/manajemen/apa-itu-cmmi/">artikel saya mengenai masalah ini</a>.</p>

<p>Sebenarnya, materi tentang CMMI banyak bertebaran secara gratis di internet. Bahkan spesifikasi resminya gratis bisa diunduh di <a href="http://cmmiinstitute.com/">websitenya Carnegie Mellon University</a>. Lalu buat apa ikut training lagi kalau di internet sudah banyak materinya?</p>

<!--more-->


<p>Berikut beberapa alasannya:</p>

<ul>
<li>Materi CMMI yang ada di website sangat abstrak dan penjelasannya bersifat umum.</li>
<li>Agar bisa diimplementasikan di perusahaan, aturan CMMI ini harus dibuatkan dulu padanan/mapping dengan proses bisnis di internal perusahaan.</li>
<li>Proses bisnis di internal perusahaan belum tentu selengkap yang diminta CMMI, sehingga harus didesain dan dibuat dulu.</li>
<li>Seringkali terjadi, cara mendesain proses bisnis yang baik juga belum dikuasai. Ini akan kita bahas pada sesi training.</li>
<li>Setelah dibuat, proses bisnis harus diimplementasikan ke seluruh perusahaan. Implementasi proses bisnis ada metodologinya sendiri.</li>
<li>Di website CMMI, dijelaskan proses appraisal, yaitu proses untuk menilai perusahaan apakah sudah sesuai dengan aturan CMMI. Penjelasan di kertas tentu jauh berbeda dengan pengalaman nyata yang saya alami pada waktu implementasi CMMI.</li>
<li>Ada banyak <a href="http://software.endy.muhardin.com/manajemen/meluruskan-mitos-cmmi/">mitos dan urban legend tentang CMMI</a>, terutama yang berkaitan dengan metodologi agile seperti Scrum, Kanban, XP, dan lainnya. Pada sesi training, kita akan bahas mana yang mitos mana yang nyata.</li>
</ul>


<p>Silabus lengkap bisa dilihat di <a href="http://brainmatics.com/cmmi-capability-maturity-model-integration/">website Brainmatics</a>. Tapi banyak jargon teknis di sana yang baru bisa kita pahami kalau sudah mengerti CMMI. Untuk yang masih awam, berikut adalah hal yang akan kita pelajari/lakukan selama training:</p>

<ol>
<li><p>Apa itu CMMI</p>

<ul>
<li>sejarah</li>
<li>use case</li>
<li>manfaat buat kita</li>
</ul>
</li>
<li><p>Isi perut CMMI</p>

<ul>
<li>apa itu process area</li>
<li>apa itu goals</li>
<li>apa itu practices</li>
<li>apa yang dimaksud generic goals/practices</li>
<li>apa yang dimaksud specific goals/practices</li>
<li>apa itu maturity level</li>
<li>apa yang dimaksud staged representation dan continuous representation</li>
<li>bagaimana proses appraisal</li>
</ul>
</li>
<li><p>Metodologi implementasi</p>

<ul>
<li>menentukan target maturity level yang realistis untuk dicapai perusahaan kita</li>
<li>melakukan gap analysis, antara kondisi perusahaan kita sekarang dan kondisi yang diminta CMMI</li>
<li>membuat mapping antara kebutuhan CMMI dan proses bisnis di perusahaan kita</li>
<li>cara mendesain proses bisnis perusahaan yang efektif dan komprehensif</li>
<li>cara implementasi proses bisnis yang sudah dibuat</li>
<li>tips dan trik dalam proses appraisal</li>
</ul>
</li>
</ol>


<p>Trainingnya akan berbentuk workshop. Saya akan menjelaskan teori secara singkat, lalu kita lanjutkan dengan praktek dan diskusi. Target training ini adalah, peserta pulang dengan membawa :</p>

<ul>
<li>strategi implementasi</li>
<li>daftar proses bisnis yang harus dibuat/direvisi</li>
<li>contoh dokumen dan template</li>
<li>action plan yang harus mereka lakukan di perusahaannya untuk berhasil mencapai target maturity level yang diinginkan.</li>
</ul>


<p>Jadi, tunggu apa lagi, ayo segera daftar. Sampai ketemu di sesi training :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Akses VM Proxmox Tanpa Applet]]></title>
    <link href="http://software.endy.muhardin.com/linux/akses-vm-proxmox-tanpa-applet/"/>
    <updated>2013-02-28T14:22:00+07:00</updated>
    <id>http://software.endy.muhardin.com/linux/akses-vm-proxmox-tanpa-applet</id>
    <content type="html"><![CDATA[<p>Jika kita ingin mengakses virtual machine di dalam Proxmox,
ada beberapa opsi yang bisa kita gunakan, yaitu:</p>

<ul>
<li>SSH langsung ke IP virtual machine tersebut.</li>
<li>Login ke web management Proxmox, kemudian pilih virtual machine, dan jalankan VNC console yang berupa aplikasi Java applet.</li>
<li>SSH ke mesin host, dan kemudian masuk ke console virtual machine</li>
<li>Membuat VNC server yang bisa diakses dari luar</li>
</ul>


<p>Kadangkala, kita tidak bisa menjalankan opsi pertama, karena belum menginstal SSH server di VM.
Opsi kedua sering tidak lancar di Linux.
Opsi ketiga hanya bisa dijalankan untuk OpenVZ, saya belum ketemu caranya untuk KVM.
Dengan demikian, kita harus menggunakan cara keempat.</p>

<!--more-->


<p>Berikut adalah caranya. Pertama kita ssh dulu ke mesin host.
Setelah itu kita tampilkan daftar semua VM yang bertipe KVM
dengan perintah <code>qm list</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># qm list
</span><span class='line'>      VMID NAME                 STATUS     MEM(MB)    BOOTDISK(GB) PID
</span><span class='line'>       101 vm110                running    512               30.00 16474
</span><span class='line'>       103 vm103                stopped    512               80.00 0
</span><span class='line'>       104 vm104                running    256               80.00 16256
</span><span class='line'>       107 vm107                running    2000              50.00 16348
</span><span class='line'>       113 vm113                stopped    512               32.00 0
</span><span class='line'>       115 vm115                running    8000             100.00 16316
</span><span class='line'>       116 vm116                running    1000              80.00 16460
</span><span class='line'>       119 vm119                running    1000              20.00 16390
</span><span class='line'>       120 vm120                running    1000              40.00 16284
</span><span class='line'>       166 vm166                running    1024             150.00 16440
</span><span class='line'>       190 vm190                running    512               20.00 16270
</span><span class='line'>       199 vm199                running    1024               5.00 16300</span></code></pre></td></tr></table></div></figure>


<p>Kita bisa membuka VNC server yang mengarah ke VM dengan ID tertentu
dengan perintah berikut:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -l -p portvnc -c "qm vncproxy vmid passwdvnc"</span></code></pre></td></tr></table></div></figure>


<p>Misalnya, bila kita ingin mengakses VMID <code>166</code> di port <code>10166</code> dengan password <code>abc321</code>,
maka perintahnya adalah sebagai berikut</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -l -p 10166 -c "qm vncproxy 166 abc321"</span></code></pre></td></tr></table></div></figure>


<p>Setelah itu, kita bisa mengakses VM tersebut menggunakan VNC client seperti pada screenshot.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/02/28/vnc-kvm.png" title="Konfigurasi VNC Client" ></p>

<p>Kosongkan saja username dan password, nanti kita akan dimintai password oleh aplikasinya.</p>

<p>Hal yang sama bisa dilakukan juga dengan OpenVZ.</p>

<p>Pertama, cari dulu VM yang mau diakses dengan perintah <code>vzlist</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vzlist
</span><span class='line'>      CTID      NPROC STATUS    IP_ADDR         HOSTNAME
</span><span class='line'>       102        229 running   202.202.202.200  vm102
</span><span class='line'>       105         40 running   202.202.202.201  vm105
</span><span class='line'>       106         27 running   202.202.202.202  vm106
</span><span class='line'>       108         21 running   202.202.202.203  vm108
</span><span class='line'>       110         46 running   202.202.202.204  vm110
</span><span class='line'>       111         61 running   202.202.202.205  vm111
</span><span class='line'>       112         16 running   202.202.202.206  vm112
</span><span class='line'>       114         39 running   202.202.202.207  vm114
</span><span class='line'>       117         18 running   202.202.202.208  vm117
</span><span class='line'>       121         43 running   202.202.202.209  vm121
</span><span class='line'>       130         32 running   202.202.202.210  vm130</span></code></pre></td></tr></table></div></figure>


<p>Kemudian gunakan perintah berikut</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vncterm -c vzctl enter VMID</span></code></pre></td></tr></table></div></figure>


<p>Misalnya, bila ingin mengakses VM 111, maka perintahnya adalah</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vncterm -rfbport 10111 -c vzctl enter 104</span></code></pre></td></tr></table></div></figure>


<p>Referensi :</p>

<ul>
<li><a href="http://forum.proxmox.com/threads/612-External-VNC-viewer">Forum Proxmox</a></li>
<li><a href="http://honglus.blogspot.com/2011/02/access-guest-vm-console-via-text-mode.html">UNIX/LINUX TECH NOTES</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Proxmox dengan 1 IP Public]]></title>
    <link href="http://software.endy.muhardin.com/linux/setup-proxmox-dengan-1-ip-public/"/>
    <updated>2013-02-12T20:05:00+07:00</updated>
    <id>http://software.endy.muhardin.com/linux/setup-proxmox-dengan-1-ip-public</id>
    <content type="html"><![CDATA[<p>Jaman sekarang, membuat server untuk cloud tidak lagi sulit.
Cukup cari server nganggur, unduh <a href="http://pve.proxmox.com/">Proxmox</a>,
kemudian instal.</p>

<p>Instalasinya pun tidak sulit, dia cuma menanyakan mau diberi IP berapa,
password untuk user root, dan selesai sudah.
Selanjutnya, server ini tinggal kita taruh di data center.</p>

<p>Dengan Proxmox ini, kita dapat membuat virtual machine (VM) sebanyak-banyaknya
yang mampu ditangani oleh hardware servernya.
Pembuatan VM ini dilakukan melalui antarmuka berbasis web,
sehingga kita tidak perlu lagi menghafalkan perintah-perintah command line.</p>

<p>Walaupun VM bisa dibuat sesuka hati, seringkali IP public yang tersedia terbatas jumlahnya.
Punya VM banyak tapi tidak bisa diakses dari luar tentu percuma saja.
Pada artikel ini, kita akan membahas cara supaya satu IP public bisa dimanfaatkan oleh banyak VM.</p>

<!--more-->


<h1>Konfigurasi Host</h1>

<p>Agar ada gambaran, berikut adalah konfigurasi awal setelah instalasi.
Tentunya pembaca maklum bahwa semua IP yang ditulis di sini adalah palsu belaka.</p>

<ul>
<li>IP public (digunakan oleh Proxmox Host) : 202.202.202.202</li>
<li>Network Device : eth0, dibridge menjadi vmbr0</li>
<li>Versi Proxmox : 2-2-24</li>
</ul>


<p>Berikut adalah hasil keluaran perintah <code>ifconfig</code> dalam host :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>eth0      Link encap:Ethernet  HWaddr 00:21:5e:27:05:30  
</span><span class='line'>          inet6 addr: fe80::221:5eff:fe27:530/64 Scope:Link
</span><span class='line'>          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
</span><span class='line'>          RX packets:643194 errors:0 dropped:0 overruns:0 frame:0
</span><span class='line'>          TX packets:225604 errors:0 dropped:0 overruns:0 carrier:0
</span><span class='line'>          collisions:0 txqueuelen:1000 
</span><span class='line'>          RX bytes:196913694 (187.7 MiB)  TX bytes:35911168 (34.2 MiB)
</span><span class='line'>          Interrupt:16 Memory:ce000000-ce012800
</span><span class='line'>
</span><span class='line'>vmbr0     Link encap:Ethernet  HWaddr 00:21:5e:27:05:30  
</span><span class='line'>          inet addr:202.202.202.202  Bcast:202.202.202.203  Mask:255.255.255.248
</span><span class='line'>          inet6 addr: fe80::221:5eff:fe27:530/64 Scope:Link
</span><span class='line'>          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
</span><span class='line'>          RX packets:571124 errors:0 dropped:0 overruns:0 frame:0
</span><span class='line'>          TX packets:206100 errors:0 dropped:0 overruns:0 carrier:0
</span><span class='line'>          collisions:0 txqueuelen:0 
</span><span class='line'>          RX bytes:177290314 (169.0 MiB)  TX bytes:31457704 (30.0 MiB)</span></code></pre></td></tr></table></div></figure>


<p>Dan ini adalah isi file <code>/etc/network/interfaces</code> dalam host</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iface eth0 inet manual
</span><span class='line'>
</span><span class='line'>auto vmbr0
</span><span class='line'>iface vmbr0 inet static
</span><span class='line'>  address  202.202.202.202
</span><span class='line'>  netmask  255.255.255.248
</span><span class='line'>  gateway  202.202.202.201
</span><span class='line'>  bridge_ports eth0
</span><span class='line'>  bridge_stp off
</span><span class='line'>  bridge_fd 0</span></code></pre></td></tr></table></div></figure>


<h1>Konfigurasi VM</h1>

<p>Kita mempunyai satu VM dengan konfigurasi berikut :</p>

<ul>
<li>IP Address : 192.168.100.100</li>
<li>Jenis Interface : venet</li>
</ul>


<p>Berikut adalah output dari <code>ifconfig</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lo        Link encap:Local Loopback  
</span><span class='line'>          inet addr:127.0.0.1  Mask:255.0.0.0
</span><span class='line'>          inet6 addr: ::1/128 Scope:Host
</span><span class='line'>          UP LOOPBACK RUNNING  MTU:16436  Metric:1
</span><span class='line'>          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
</span><span class='line'>          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
</span><span class='line'>          collisions:0 txqueuelen:0 
</span><span class='line'>          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
</span><span class='line'>
</span><span class='line'>venet0    Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  
</span><span class='line'>          inet addr:127.0.0.2  P-t-P:127.0.0.2  Bcast:0.0.0.0  Mask:255.255.255.255
</span><span class='line'>          UP BROADCAST POINTOPOINT RUNNING NOARP  MTU:1500  Metric:1
</span><span class='line'>          RX packets:33307 errors:0 dropped:0 overruns:0 frame:0
</span><span class='line'>          TX packets:16717 errors:0 dropped:8 overruns:0 carrier:0
</span><span class='line'>          collisions:0 txqueuelen:0 
</span><span class='line'>          RX bytes:49576164 (49.5 MB)  TX bytes:916607 (916.6 KB)
</span><span class='line'>
</span><span class='line'>venet0:0  Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  
</span><span class='line'>          inet addr:192.168.100.100  P-t-P:192.168.100.100  Bcast:0.0.0.0  Mask:255.255.255.255
</span><span class='line'>          UP BROADCAST POINTOPOINT RUNNING NOARP  MTU:1500  Metric:1
</span></code></pre></td></tr></table></div></figure>


<h1>Akses dari dalam VM ke Internet</h1>

<p>Yang pertama kita kerjakan adalah bagaimana caranya supaya VM ini bisa mengakses internet.
Caranya adalah memasang NAT di Proxmox Host supaya paket data dari network <code>192.168.100.0/24</code>
diijinkan untuk keluar dan melalui proses Network Address Translation (NAT).</p>

<p>Perintahnya adalah sebagai berikut</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iptables -t nat -A POSTROUTING -s 192.168.100.0/24 -o vmbr0 -j MASQUERADE</span></code></pre></td></tr></table></div></figure>


<p>Perintah ini tentunya tidak asing bagi yang sering mengkonfigurasi internet gateway dengan Linux.
Caranya sama persis, seolah-olah ada banyak komputer dengan IP <code>192.168.100.xxx</code> yang ingin mengakses internet.</p>

<p>Setelah ini dijalankan, kita coba tes akses internet dari dalam VM.
Jalankan perintah berikut dari Proxmox Host untuk masuk ke dalam VM.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vzctl enter 107</span></code></pre></td></tr></table></div></figure>


<p><code>107</code> adalah ID dari VM yang ingin kita masuki.</p>

<p>Begitu sudah masuk, coba ping ke alamat internet.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ping google.com
</span><span class='line'>PING google.com (173.194.38.137) 56(84) bytes of data.
</span><span class='line'>64 bytes from sin04s01-in-f9.1e100.net (173.194.38.137): icmp_req=1 ttl=57 time=12.2 ms
</span><span class='line'>64 bytes from sin04s01-in-f9.1e100.net (173.194.38.137): icmp_req=2 ttl=57 time=12.3 ms
</span><span class='line'>^C
</span><span class='line'>--- google.com ping statistics ---
</span><span class='line'>2 packets transmitted, 2 received, 0% packet loss, time 1001ms
</span><span class='line'>rtt min/avg/max/mdev = 12.257/12.293/12.330/0.116 ms</span></code></pre></td></tr></table></div></figure>


<p>Tentunya kita harus pastikan dulu Proxmox Host bisa ping ke Google.
Bila Proxmox Host saja tidak bisa akses internet, ya jangan harap VM bisa akses internet.
Ini kan bukan acara sulap.</p>

<p>Baiklah, VM kita sudah bisa mengakses internet, lanjut ke langkah berikut.</p>

<h1>Mengakses VM dari Internet</h1>

<p>Minimal kita ingin agar VM kita tersebut bisa diakses melalui SSH.
Service SSH di Linux biasanya jalan di port <code>22</code>.
Karena port <code>22</code> di Proxmox Host sudah dipakai oleh dirinya sendiri,
kita harus pilih port lain, misalnya <code>10722</code>.
Teknik ini disebut dengan istilah <em>port forwarding</em></p>

<p>Perintahnya juga sama dengan perintah untuk NAT dari internet ke jaringan LAN,
tentu rekan-rekan yang biasa mengkonfigurasi internet gateway tidak merasa asing.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iptables -t nat -A PREROUTING -i vmbr0 -p tcp -m tcp --dport 10722 -j DNAT --to-destination 192.168.100.100:22</span></code></pre></td></tr></table></div></figure>


<p>Setelah itu, kita test dari komputer kita</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh root@202.202.202.202 -p 10722</span></code></pre></td></tr></table></div></figure>


<p>Seharusnya kita sudah bisa login ke dalam VM.</p>

<p>Selanjutnya, kalau ingin membuat <em>port forwarding</em> untuk port lain caranya sama.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iptables -t nat -A PREROUTING -i vmbr0 -p tcp -m tcp --dport 10780 -j DNAT --to-destination 192.168.100.100:80</span></code></pre></td></tr></table></div></figure>


<p>Perintah di atas akan membuka port <code>10780</code> di IP public Proxmox Host
dan data yang datang ke sana diarahkan ke port <code>80</code> di VM <code>107</code> yang memiliki IP private <code>192.168.100.100</code>.</p>

<p>Demikianlah, satu IP public yang kita miliki bisa dipakai oleh banyak VM yang ada dalam satu server tersebut.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mencari Relasi Foreign Key ke Tabel MySQL]]></title>
    <link href="http://software.endy.muhardin.com/java/mencari-relasi-foreign-key-ke-tabel-mysql/"/>
    <updated>2013-02-07T15:24:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/mencari-relasi-foreign-key-ke-tabel-mysql</id>
    <content type="html"><![CDATA[<p>Di aplikasi yang kita buat, biasanya ada fitur untuk menghapus data atau record tertentu.
Bila kita menggunakan database relasional yang memiliki fitur <em>referential integrity</em>,
kita akan dicegah bila data yang ingin kita hapus memiliki relasi ke data lain.</p>

<p>Contohnya, kita punya tabel <code>Produk</code>, yang kolom <code>id</code>nya digunakan sebagai <em>foreign key</em>
oleh tabel <code>Penjualan</code>.
Dengan demikian, pada waktu ingin menghapus data <code>Produk</code>, terlebih dulu kita cek ke tabel
<code>Penjualan</code>, apakah ada data transaksi yang berelasi ke <code>Produk</code> yang ingin kita hapus.</p>

<p>Akan menjadi masalah bila aplikasi kita sudah besar, tabelnya ada ratusan.
Bagaimana cara kita mencari tabel mana saja yang memiliki relasi ke tabel <code>Produk</code>?
Tentunya tidak mungkin dicek satu-persatu.</p>

<p>Dengan bantuan paman Google, berikut adalah cara mendapatkannya untuk database MySQL.</p>

<!--more-->


<p>Pertama, login dulu ke MySQL</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql -u root -p
</span><span class='line'>Password: 
</span><span class='line'>mysql&gt;</span></code></pre></td></tr></table></div></figure>


<p>Kemudian, gunakan database <code>information_schema</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>use information_schema</span></code></pre></td></tr></table></div></figure>


<p>Terakhir, jalankan query SQL berikut</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="k">TABLE_NAME</span><span class="p">,</span><span class="k">COLUMN_NAME</span><span class="p">,</span><span class="k">CONSTRAINT_NAME</span><span class="p">,</span>
</span><span class='line'><span class="n">REFERENCED_TABLE_NAME</span><span class="p">,</span><span class="n">REFERENCED_COLUMN_NAME</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">KEY_COLUMN_USAGE</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">REFERENCED_TABLE_NAME</span> <span class="o">=</span> <span class="s1">&#39;produk&#39;</span>
</span><span class='line'><span class="k">AND</span> <span class="n">REFERENCED_COLUMN_NAME</span> <span class="o">=</span> <span class="s1">&#39;id&#39;</span>
</span><span class='line'><span class="k">AND</span> <span class="n">TABLE_SCHEMA</span><span class="o">=</span><span class="s1">&#39;db_penjualan&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Inilah hasilnya</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">+</span><span class="c1">-------------------------------------------------------------------------------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="k">TABLE_NAME</span>         <span class="o">|</span> <span class="k">COLUMN_NAME</span> <span class="o">|</span> <span class="k">CONSTRAINT_NAME</span>     <span class="o">|</span> <span class="n">REFERENCED_TABLE_NAME</span> <span class="o">|</span> <span class="n">REFERENCED_COLUMN_NAME</span> <span class="o">|</span>
</span><span class='line'><span class="o">+</span><span class="c1">-------------------------------------------------------------------------------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">penjualan</span>          <span class="o">|</span> <span class="n">id_produk</span>   <span class="o">|</span> <span class="n">fk_penjualan_produk</span> <span class="o">|</span> <span class="n">produk</span>                <span class="o">|</span> <span class="n">id</span>                     <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">stok</span>               <span class="o">|</span> <span class="n">id_produk</span>   <span class="o">|</span> <span class="n">fk_stok_produk</span>      <span class="o">|</span> <span class="n">produk</span>                <span class="o">|</span> <span class="n">id</span>                     <span class="o">|</span>
</span><span class='line'><span class="o">+</span><span class="c1">-------------------------------------------------------------------------------------------+</span>
</span></code></pre></td></tr></table></div></figure>


<p>Penjelasan:</p>

<ul>
<li>Table Name : Nama Tabel yang memiliki referensi</li>
<li>Column Name : Nama Kolom yang merupakan <em>foreign key</em></li>
<li>Constraint Name : Nama constraint <em>foreign key</em></li>
<li>Referenced Table Name : Nama tabel yang dituju</li>
<li>Referenced Column Name : Nama kolom yang dituju <em>foreign key</em></li>
</ul>


<p>Demikian sekilas tutorial. Semoga bermanfaat dalam membuat validasi.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mematikan Location Service di Facebook Android]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/mematikan-location-service-di-facebook-android/"/>
    <updated>2013-02-04T11:23:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/mematikan-location-service-di-facebook-android</id>
    <content type="html"><![CDATA[<p>Jaman sekarang, berbagai layanan internet semakin ingin tahu saja
di mana kita sedang berada. Memang ada layanan yang dikhususkan untuk
mempublikasikan lokasi kita, seperti misalnya <a href="https://foursquare.com/">Foursquare</a> atau
<a href="https://latitude.google.com">Google Latitude</a>.
Tapi untuk kedua layanan tersebut, kita sendiri yang secara sukarela mempublikasikan lokasi kita.</p>

<p>Banyak aplikasi social lain yang sering kita gunakan, dan berusaha untuk mengetahui posisi kita setiap saat.
Tidak terkecuali aplikasi sejuta umat, yaitu <a href="http://facebook.com">Facebook</a>.
Setiap kali kita chat atau posting sesuatu, Facebook langsung memasang lokasi kita di posting atau pesan
yang kita taruh di Facebook.</p>

<p>Nah, pada artikel ini, kita akan membahas cara mematikan fitur tersebut
pada <a href="https://play.google.com/store/apps/details?id=com.facebook.katana">aplikasi Facebook yang berjalan di Android</a>.</p>

<!--more-->


<p>Ada dua tempat yang mempublikasikan lokasi kita, yaitu:</p>

<ul>
<li>Chat (Facebook Messenger)</li>
<li>Posting Status</li>
</ul>


<h1>Facebook Chat</h1>

<p>Bila kita sedang chat dengan teman di Facebook, maka di aplikasi akan tampil informasi lokasi kita
berikut dengan tombol panah untuk mematikan/menyalakan informasi lokasi tersebut.
Pada menu chat ini, tidak sulit untuk mematikannya, cukup sentuh saja icon tersebut hingga berganti warna
menjadi abu-abu. Biru artinya aktif, abu-abu artinya tidak aktif.</p>

<p>Lebih jelasnya bisa dilihat pada gambar berikut:</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/02/04/messenger-location.png" title="messenger-location" ></p>

<p>Biasanya, sekali dimatikan akan tetap mati sampai kita nyalakan lagi.
Tapi untuk amannya, jangan lupa dicek sebelum kirim tombol <code>Send</code>.</p>

<h1>Posting Status</h1>

<p>Nah untuk menu posting status, Facebook lebih rewel. Pertama, kita lihat dulu screenshot aplikasi
pada saat kita ingin memposting sesuatu.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/02/04/posting-location.png" title="posting-location" ></p>

<p>Kita bisa lihat bahwa lokasi kita tercantum di sana. Untuk mematikannya, kita tekan icon bola dunia.
Aplikasi akan menampilkan menu pemilihan lokasi. Kita klik tanda silang di pojok kanan bawah seperti pada screenshot berikut.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/02/04/location-menu.png" title="location-menu" ></p>

<p>Selanjutnya, layar akan kembali ke menu posting. Kita bisa lihat bahwa informasi lokasi sudah tidak ada.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/02/04/after-disable.png" title="after-disable" ></p>

<p>Yang menyebalkan, informasi lokasi ini akan kembali aktif pada waktu kita mau posting lagi.
Sehingga kita harus mematikannya tiap kali mau posting.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memahami Dependency Injection]]></title>
    <link href="http://software.endy.muhardin.com/java/memahami-dependency-injection/"/>
    <updated>2013-01-24T18:14:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/memahami-dependency-injection</id>
    <content type="html"><![CDATA[<p><a href="http://www.springsource.org/spring-framework">Spring Framework</a>
merupakan framework yang sangat populer
dan banyak digunakan orang di seluruh dunia.
Jargon utama yang sering kita dengar bersamaan dengan Spring Framework
adalah prinsip <em>Dependency Injection</em>. Ini adalah teknik pemrograman
yang digadang-gadang mampu merapikan aplikasi yang kita buat sehingga
mudah dipahami dan dikelola.</p>

<p>Tapi apakah yang dimaksud dengan <em>Dependency Injection</em> atau <em>Inversion of Control</em> itu?</p>

<!--more-->


<h1>Contoh Kasus</h1>

<p>Sebagai programmer, kita akan lebih mudah memahami suatu konsep
bila sudah melihat sendiri contoh kode program dan aplikasinya.
Untuk itu, kita akan membuat sebuah contoh kasus sederhana,
yaitu menyimpan data ke tabel <code>produk</code> dalam database.</p>

<p>Untuk titik awal, misalnya kita memiliki class <code>Produk</code> sebagai berikut:</p>

<h2>Produk.java</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Produk</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">kode</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">nama</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">BigDecimal</span> <span class="n">harga</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// getter dan setter tidak ditampilkan</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Supaya rapi, kode program untuk Create (insert), Read (select),
Update, dan Delete (CRUD), akan kita kumpulkan di dalam class <code>ProdukDao</code> sebagai berikut:</p>

<h2>ProdukDao.java</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProdukDao</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">create</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&quot;insert into produk (kode, nama, harga) &quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="n">sql</span> <span class="o">+=</span> <span class="s">&quot;(?,?,?)&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Connection</span> <span class="n">databaseConnection</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span><span class='line'>        <span class="n">PreparedStatement</span> <span class="n">ps</span> <span class="o">=</span> <span class="n">databaseConnection</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span><span class='line'>        <span class="n">ps</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getKode</span><span class="o">());</span>
</span><span class='line'>        <span class="n">ps</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getNama</span><span class="o">());</span>
</span><span class='line'>        <span class="n">ps</span><span class="o">.</span><span class="na">setBigDecimal</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getHarga</span><span class="o">());</span>
</span><span class='line'>        <span class="n">ps</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span>
</span><span class='line'>        <span class="n">databaseConnection</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Produk</span> <span class="nf">cariById</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">){</span>
</span><span class='line'>        <span class="c1">// implementasi tidak ditulis</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">){</span>
</span><span class='line'>        <span class="c1">// implementasi tidak ditulis</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">){</span>
</span><span class='line'>        <span class="c1">// implementasi tidak ditulis</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sebagai demonstrasi, kita akan menggunakan/memanggil <code>ProdukDao</code> ini dalam class
<code>ProdukDaoTest</code> sebagai berikut:</p>

<h2>ProdukDaoTest.java</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProdukDaoTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">xx</span><span class="o">){</span>
</span><span class='line'>        <span class="n">Produk</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Produk</span><span class="o">();</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setKode</span><span class="o">(</span><span class="s">&quot;P-001&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setNama</span><span class="o">(</span><span class="s">&quot;Produk 001&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setHarga</span><span class="o">(</span><span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="mf">10000.00</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ProdukDao</span> <span class="n">pd</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ProdukDao</span><span class="o">();</span>
</span><span class='line'>        <span class="n">pd</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dari ketiga class di atas, kita akan melihat:</p>

<ul>
<li>bagaimana implementasi tanpa Dependency Injection</li>
<li>bagaimana konsep Dependency Injection</li>
<li>bagaimana menggunakan Spring Framework untuk melakukan Dependency Injection</li>
</ul>


<p>Sebelumnya, apa itu dependency injection? Kalau diterjemahkan ke bahasa Indonesia,
kira-kira artinya adalah <em>menyediakan kebutuhan</em>.
Kebutuhan apa yang dimaksud?</p>

<p>Coba lihat class <code>ProdukDao</code>. Untuk bisa menjalankan tugasnya dengan baik,
dia membutuhkan object <code>DataSource</code>, yaitu koneksi ke database.
Bagaimana <code>ProdukDao</code> mendapatkan <code>DataSource</code> inilah yang menjadi pembahasan dalam <em>Dependency Injection</em> (DI).</p>

<h1>Tanpa DI</h1>

<p>Kalau kita tidak menggunakan prinsip DI, maka <code>ProdukDao</code> harus mengadakan sendiri object <code>DataSource</code>.
Kira-kira begini implementasinya:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProdukDao</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ProdukDao</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">dataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BasicDataSource</span><span class="o">();</span>
</span><span class='line'>        <span class="n">dataSource</span><span class="o">.</span><span class="na">setDriverClassName</span><span class="o">(</span><span class="s">&quot;com.mysql.jdbc.Driver&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">dataSource</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&quot;root&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">dataSource</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&quot;admin&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">dataSource</span><span class="o">.</span><span class="na">setUrl</span><span class="o">(</span><span class="s">&quot;jdbc:mysql://localhost/belajar&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">create</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&quot;insert into produk (kode, nama, harga) &quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="n">sql</span> <span class="o">+=</span> <span class="s">&quot;(?,?,?)&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Connection</span> <span class="n">databaseConnection</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span><span class='line'>        <span class="n">PreparedStatement</span> <span class="n">ps</span> <span class="o">=</span> <span class="n">databaseConnection</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span><span class='line'>        <span class="n">ps</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getKode</span><span class="o">());</span>
</span><span class='line'>        <span class="n">ps</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getNama</span><span class="o">());</span>
</span><span class='line'>        <span class="n">ps</span><span class="o">.</span><span class="na">setBigDecimal</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getHarga</span><span class="o">());</span>
</span><span class='line'>        <span class="n">ps</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span>
</span><span class='line'>        <span class="n">databaseConnection</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Produk</span> <span class="nf">cariById</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">){</span>
</span><span class='line'>        <span class="c1">// implementasi tidak ditulis</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">){</span>
</span><span class='line'>        <span class="c1">// implementasi tidak ditulis</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">){</span>
</span><span class='line'>        <span class="c1">// implementasi tidak ditulis</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Perlu kita sadari bahwa pada aplikasi yang sebenarnya, kode akses database tidak hanya <code>ProdukDao</code> saja.
Nantinya juga ada <code>CustomerDao</code>, <code>PenjualanDao</code>, dan sebagainya.
Di aplikasi berskala menengah, bisa ada ratusan class seperti ini,
sehingga untuk memahami situasinya, kita tidak boleh berpikir hanya di satu class ini saja.</p>

<p>Ada beberapa kelemahan dari cara tanpa DI ini, diantaranya:</p>

<ul>
<li>Konfigurasi koneksi database tersebar di banyak tempat, yaitu di semua <code>XxxDao</code></li>
<li>Object <code>dataSource</code> juga tersebar, tidak bisa satu <code>dataSource</code> dipakai bersama oleh semua <code>XxxDao</code></li>
<li>Karena konfigurasi dan inisialisasinya tersebar, bila ada perubahan (misalnya menggunakan <em>connection pooling</em>),
harus dilakukan di banyak tempat.</li>
<li>Semua perubahan di atas mengharuskan full compile karena banyaknya class yang terlibat.</li>
</ul>


<p>Untuk mengatasi keterbatasan di atas, kita gunakan prinsip DI.</p>

<h1>DI manual</h1>

<p>Bila kita gunakan prinsip DI, maka <code>ProdukDao</code> tidak lagi mengurus inisialisasi <code>dataSource</code>.
Dia cukup tahu beres dan tinggal pakai. Lalu siapa yang melakukan inisialisasi?
Boleh siapa saja, tapi untuk kesederhanaan ilustrasi, mari kita tulis saja di dalam <code>ProdukDaoTest</code>, sebagai berikut:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProdukDaoTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">xx</span><span class="o">){</span>
</span><span class='line'>        <span class="n">Produk</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Produk</span><span class="o">();</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setKode</span><span class="o">(</span><span class="s">&quot;P-001&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setNama</span><span class="o">(</span><span class="s">&quot;Produk 001&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setHarga</span><span class="o">(</span><span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="mf">10000.00</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">DataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BasicDataSource</span><span class="o">();</span>
</span><span class='line'>        <span class="n">dataSource</span><span class="o">.</span><span class="na">setDriverClassName</span><span class="o">(</span><span class="s">&quot;com.mysql.jdbc.Driver&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">dataSource</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&quot;root&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">dataSource</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&quot;admin&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">dataSource</span><span class="o">.</span><span class="na">setUrl</span><span class="o">(</span><span class="s">&quot;jdbc:mysql://localhost/belajar&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ProdukDao</span> <span class="n">pd</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ProdukDao</span><span class="o">();</span>
</span><span class='line'>        <span class="n">pd</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lalu bagaimana cara memasukkan (inject) ke dalam <code>ProdukDao</code>?
Kita harus sediakan jalan masuknya. Ada dua pilihan:</p>

<ul>
<li>membuat method untuk mengisi data (setter-injection)</li>
<li>menambah argumen di constructor (constructor-injection)</li>
</ul>


<p>Agar jelas, kita akan buatkan dua-duanya.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProdukDao</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ini kalau mau inject melalui constructor</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ProdukDao</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">ds</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">dataSource</span> <span class="o">=</span> <span class="n">ds</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ini kalau mau method sendiri (setter-injection)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDataSource</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">ds</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">dataSource</span> <span class="o">=</span> <span class="n">ds</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// method lain tidak ditampilkan supaya tidak bikin penuh</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Selanjutnya, dalam <code>ProdukDaoTest</code> kita bisa isikan object DataSource tersebut melalui constructor seperti ini:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ProdukDao</span> <span class="n">pd</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ProdukDao</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>ataupun melalui method setter seperti ini:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ProdukDao</span> <span class="n">pd</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ProdukDao</span><span class="o">();</span>
</span><span class='line'><span class="n">pd</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cara manual ini sudah lumayan merapikan kode program kita, karena bila ada perubahan terhadap inisialisasi dataSource, seperti misalnya:</p>

<ul>
<li>perubahan konfigurasi koneksi</li>
<li>perubahan implementasi connection pooling</li>
<li>ingin menggunakan managed DataSource melalui JNDI</li>
<li>dsb</li>
</ul>


<p>Kita cukup melakukan perubahan di satu tempat saja, yaitu dimana dia diinisialisasikan.</p>

<h1>DI Spring XML</h1>

<p>Walaupun bisa dilakukan secara manual, tetapi ada baiknya kita menggunakan Spring Framework untuk melakukan DI.
Beberapa alasannya antara lain:</p>

<ul>
<li>AOP (tidak dibahas pada artikel ini)</li>
<li>keseragaman antar project/aplikasi</li>
<li>standarisasi skillset. Bila cari programmer baru, cukup mensyaratkan pengetahuan Spring Framework.
Tidak perlu lagi ditraining tentang teknik DI yang kita karang sendiri.</li>
</ul>


<p>Spring Framework <strong>umumnya</strong> dikonfigurasi dengan file XML (walaupun bisa juga full Java).
Berikut adalah contoh file konfigurasinya, misalnya kita beri nama <code>konfig-spring.xml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>  <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>  <span class="na">xmlns:context=</span><span class="s">&quot;http://www.springframework.org/schema/context&quot;</span>
</span><span class='line'>  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span>
</span><span class='line'><span class="s">      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">class=</span><span class="s">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;driverClassName&quot;</span> <span class="na">value=</span><span class="s">&quot;com.mysql.jdbc.Driver&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;url&quot;</span> <span class="na">value=</span><span class="s">&quot;jdbc:mysql://localhost/belajar&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;username&quot;</span> <span class="na">value=</span><span class="s">&quot;root&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span> <span class="na">value=</span><span class="s">&quot;admin&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;produkDao&quot;</span> <span class="na">class=</span><span class="s">&quot;com.muhardin.endy.belajar.spring.ProdukDao&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">ref=</span><span class="s">&quot;dataSource&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>      
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>File konfigurasi tersebut kita baca dan gunakan dalam class <code>ProdukDaoTest</code>,
perhatikan perbedaan inisialisasi <code>DataSource</code> dan <code>ProdukDao</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProdukDaoTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">xx</span><span class="o">){</span>
</span><span class='line'>        <span class="n">Produk</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Produk</span><span class="o">();</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setKode</span><span class="o">(</span><span class="s">&quot;P-001&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setNama</span><span class="o">(</span><span class="s">&quot;Produk 001&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setHarga</span><span class="o">(</span><span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="mf">10000.00</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ApplicationContext</span> <span class="n">ctx</span>
</span><span class='line'>            <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&quot;classpath:konfig-spring.xml&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ProdukDao</span> <span class="n">pd</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">ProdukDao</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">pd</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pada contoh di atas, kita bisa lihat beberapa perbedaan yaitu:</p>

<ul>
<li>inisialisasi <code>DataSource</code> pindah ke dalam <code>konfig-spring.xml</code></li>
<li>tidak perlu lagi <em>mengisikan</em> <code>DataSource</code> ke dalam <code>ProdukDao</code>, karena sudah dilakukan oleh Spring.</li>
</ul>


<p>Walaupun demikian, masih ada sedikit ganjalan, yaitu:</p>

<ul>
<li>bila <code>XxxDao</code> jumlahnya ratusan, maka file <code>konfig-spring.xml</code> akan membengkak.</li>
</ul>


<p>Apa solusinya?</p>

<h1>DI Spring @Autowired</h1>

<p>Spring Framework menyediakan fitur <em>component-scan</em>, yaitu dia akan melihat isi <em>package</em> yang kita sebutkan,
kemudian akan mencari class-class yang diberi anotasi berikut:</p>

<ul>
<li><code>@Repository</code></li>
<li><code>@Service</code></li>
<li><code>@Controller</code></li>
<li><code>@Component</code></li>
</ul>


<p>Setelah ditemukan, maka dia akan melakukan inisialisasi terhadap class tersebut, dan lalu mengisi (inject)
semua kebutuhannya (dependency). Untuk injection ini, kita juga tidak perlu lagi menyediakan setter method maupun
menambahkan argumen di constructor. Kita dapat menggunakan anotasi <code>@Autowired</code>.</p>

<p>Berikut adalah konfigurasi <code>konfig-spring.xml</code> yang baru:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>  <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>  <span class="na">xmlns:context=</span><span class="s">&quot;http://www.springframework.org/schema/context&quot;</span>
</span><span class='line'>  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span>
</span><span class='line'><span class="s">      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">class=</span><span class="s">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;driverClassName&quot;</span> <span class="na">value=</span><span class="s">&quot;com.mysql.jdbc.Driver&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;url&quot;</span> <span class="na">value=</span><span class="s">&quot;jdbc:mysql://localhost/belajar&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;username&quot;</span> <span class="na">value=</span><span class="s">&quot;root&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span> <span class="na">value=</span><span class="s">&quot;admin&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">&quot;com.muhardin.endy.belajar.spring&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Perhatikan bahwa deklarasi <code>produkDao</code> telah digantikan dengan perintah <code>context:component-scan</code>.</p>

<p>Berikut adalah perubahan di <code>ProdukDao</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Repository</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProdukDao</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">create</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">){</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&quot;insert into produk (kode, nama, harga) &quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="n">sql</span> <span class="o">+=</span> <span class="s">&quot;(?,?,?)&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Connection</span> <span class="n">databaseConnection</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span><span class='line'>        <span class="n">PreparedStatement</span> <span class="n">ps</span> <span class="o">=</span> <span class="n">databaseConnection</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span><span class='line'>        <span class="n">ps</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getKode</span><span class="o">());</span>
</span><span class='line'>        <span class="n">ps</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getNama</span><span class="o">());</span>
</span><span class='line'>        <span class="n">ps</span><span class="o">.</span><span class="na">setBigDecimal</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getHarga</span><span class="o">());</span>
</span><span class='line'>        <span class="n">ps</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span>
</span><span class='line'>        <span class="n">databaseConnection</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// method lain tidak ditampilkan supaya tidak bikin penuh</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Perhatikan bahwa setter dan constructor injection sudah dihapus,
dan digantikan dengan anotasi <code>@Autowired</code>.
Semua field/property yang memiliki anotasi <code>@Autowired</code> akan diisikan oleh Spring dengan object bertipe-data sesuai.
Bila tidak ditemukan, maka aplikasi akan gagal start dengan pesan error seperti ini:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">SEVERE:</span> <span class="n">Context</span> <span class="n">initialization</span> <span class="n">failed</span>
</span><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">beans</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">BeanCreationException</span><span class="o">:</span>
</span><span class='line'><span class="n">Error</span> <span class="n">creating</span> <span class="n">bean</span> <span class="n">with</span> <span class="n">name</span> <span class="err">&#39;</span><span class="n">produkDao</span><span class="err">&#39;</span><span class="o">:</span>
</span><span class='line'><span class="n">Injection</span> <span class="n">of</span> <span class="n">autowired</span> <span class="n">dependencies</span> <span class="n">failed</span><span class="o">;</span>
</span><span class='line'><span class="n">nested</span> <span class="n">exception</span> <span class="n">is</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">beans</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">BeanCreationException</span><span class="o">:</span>
</span><span class='line'><span class="n">Could</span> <span class="n">not</span> <span class="n">autowire</span> <span class="nl">field:</span>
</span><span class='line'><span class="kd">private</span> <span class="n">javax</span><span class="o">.</span><span class="na">sql</span><span class="o">.</span><span class="na">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>
</span><span class='line'><span class="n">nested</span> <span class="n">exception</span> <span class="n">is</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">beans</span><span class="o">.</span><span class="na">factory</span><span class="o">.</span><span class="na">NoSuchBeanDefinitionException</span><span class="o">:</span>
</span><span class='line'><span class="n">No</span> <span class="n">matching</span> <span class="n">bean</span> <span class="n">of</span> <span class="n">type</span> <span class="o">[</span><span class="n">javax</span><span class="o">.</span><span class="na">sql</span><span class="o">.</span><span class="na">DataSource</span><span class="o">]</span> <span class="n">found</span> <span class="k">for</span> <span class="nl">dependency:</span>
</span><span class='line'><span class="n">expected</span> <span class="n">at</span> <span class="n">least</span> <span class="mi">1</span> <span class="n">bean</span> <span class="n">which</span> <span class="n">qualifies</span> <span class="n">as</span> <span class="n">autowire</span> <span class="n">candidate</span> <span class="k">for</span> <span class="k">this</span> <span class="n">dependency</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bila menemukan pesan error tersebut, artinya Spring tidak memiliki satupun object bertipe <code>DataSource</code>
dalam daftar pengelolaannya. Untuk bisa dikelola oleh Spring, ada beberapa caranya, yaitu:</p>

<ul>
<li>dideklarasikan secara tertulis seperti object <code>dataSource</code> di atas</li>
<li>discan otomatis melalui <code>component-scan</code> dan anotasi <code>@Repository</code>, <code>@Service</code>, <code>@Controller</code>, ataupun<code>@Component</code>.
Contohnya object <code>produkDao</code> di atas.</li>
</ul>


<p>Ada beberapa kesalahan yang umum terjadi sehingga muncul pesan error di atas, diantaranya</p>

<ul>
<li>sudah ada anotasi, tapi package tempatnya berada tidak didaftarkan dalam <code>component-scan</code></li>
<li>package sudah didaftarkan dalam <code>component-scan</code>, tapi classnya tidak diberikan anotasi <code>@Repository</code>, <code>@Service</code>, <code>@Controller</code>, ataupun<code>@Component</code>.</li>
<li>sudah ada anotasi, packagenya sudah didaftarkan, tapi file xml yang memuat konfigurasi tersebut tidak diload oleh aplikasi.
Ini biasa terjadi kalau satu aplikasi terdiri dari banyak file konfigurasi Spring (yang mana ini adalah hal yang umum terjadi)</li>
</ul>


<p>Lalu kapan dan bagaimana Spring membaca file konfigurasi? Ada beberapa cara:</p>

<ul>
<li>Ditulis dalam kode program : <code>new ClassPathXmlApplicationContext("classpath:konfig-spring.xml")</code></li>
<li>Bila aplikasinya berbasis web, biasanya diinisialisasi melalui <code>web.xml</code> seperti ini:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;context-param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;param-value&gt;</span>
</span><span class='line'>        classpath*:konfig-spring.xml
</span><span class='line'>    <span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'><span class="nt">&lt;/context-param&gt;</span>
</span><span class='line'><span class="nt">&lt;listener&gt;</span>
</span><span class='line'>    <span class="nt">&lt;listener-class&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="nt">&lt;/listener-class&gt;</span>
</span><span class='line'><span class="nt">&lt;/listener&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Demikianlah penjelasan tentang konsep Dependency Injection dan Spring Framework. Semoga bermanfaat.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membuat Changelog Liquibase]]></title>
    <link href="http://software.endy.muhardin.com/java/membuat-changelog-liquibase/"/>
    <updated>2013-01-10T10:03:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/membuat-changelog-liquibase</id>
    <content type="html"><![CDATA[<p>Di ArtiVisi, kami menggunakan tools bernama <a href="http://liquibase.org/">Liquibase</a> untuk mendefinisikan skema database.
Dengan Liquibase ini, skema database dapat disimpan dan dikelola versinya dalam Git.
Dia juga memiliki fitur untuk melakukan migrasi database pada saat aplikasi kita naik versi.
Bila terjadi error di versi baru, Liquibase juga bisa melakukan rollback
agar skema database kita kembali ke kondisi sebelum naik versi.</p>

<p>Skema database dalam Liquibase ditulis dalam format XML, disebut dengan istilah <code>changelog</code>.
Untuk project baru, ini bisa ditulis tangan secara manual,
tetapi untuk aplikasi yang sudah ada,
terlalu merepotkan kalau semua tabel yang sudah ada harus ditulis ulang skemanya.</p>

<!--more-->


<p>Untungnya Liquibase memiliki fitur untuk menulis changelog dari skema yang sudah ada.
Berikut langkah-langkahnya:</p>

<ol>
<li>Siapkan jar liquibase dan database</li>
<li>Siapkan file konfigurasi</li>
<li>Jalankan liquibase</li>
<li>Cek hasilnya</li>
</ol>


<h2>Siapkan jar liquibase dan database</h2>

<p>Database yang akan saya import memiliki konfigurasi sebagai berikut:</p>

<ul>
<li>Jenis Database : MySQL</li>
<li>Nama Database : merchant-simulator_development</li>
<li>Username Database : root</li>
<li>Password Database : admin</li>
</ul>


<p>Untuk itu, saya siapkan dua file jar, yaitu :</p>

<ul>
<li>mysql-connector-java-5.1.22.jar</li>
<li>liquibase-core-2.0.5.jar</li>
</ul>


<h2>File Konfigurasi</h2>

<p>Sebetulnya semua informasi ini bisa disebutkan dalam command line argument.
Tapi saya lebih suka menulis di file supaya mudah diedit.
Berikut isinya</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># liquibase.properties
</span><span class='line'>driver: com.mysql.jdbc.Driver
</span><span class='line'>classpath: mysql-connector-java-5.1.22.jar
</span><span class='line'>url: jdbc:mysql://localhost/merchant-simulator_development
</span><span class='line'>username: root
</span><span class='line'>password: admin
</span><span class='line'>changeLogFile: liquibase-output.xml</span></code></pre></td></tr></table></div></figure>


<p>Simpan file ini dengan nama <code>liquibase.properties</code> dan letakkan di folder yang sama dengan kedua file jar tersebut.</p>

<h2>Jalankan Liquibase</h2>

<p>Mari kita jalankan proses import dengan command berikut:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -jar liquibase-core-2.0.5.jar generateChangelog</span></code></pre></td></tr></table></div></figure>


<h2>Cek Hasilnya</h2>

<p>Perintah di atas akan menghasilkan file <code>liquibase-output.xml</code> yang isinya seperti ini:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;databaseChangeLog</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1357786892853-1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;createTable</span> <span class="na">tableName=</span><span class="s">&quot;c_application_config&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;id&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span> <span class="na">primaryKey=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;label&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;value&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/createTable&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1357786892853-2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;createTable</span> <span class="na">tableName=</span><span class="s">&quot;c_security_menu&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;id&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span> <span class="na">primaryKey=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;label&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;menu_action&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;menu_level&quot;</span> <span class="na">type=</span><span class="s">&quot;INT&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;menu_order&quot;</span> <span class="na">type=</span><span class="s">&quot;INT&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;menu_options&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;id_parent&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/createTable&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1357786892853-3&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;createTable</span> <span class="na">tableName=</span><span class="s">&quot;c_security_permission&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;id&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span> <span class="na">primaryKey=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;permission_label&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;permission_value&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/createTable&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1357786892853-4&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;createTable</span> <span class="na">tableName=</span><span class="s">&quot;c_security_role&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;id&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span> <span class="na">primaryKey=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/createTable&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1357786892853-5&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;createTable</span> <span class="na">tableName=</span><span class="s">&quot;c_security_role_menu&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;id_role&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;id_menu&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/createTable&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1357786892853-6&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;createTable</span> <span class="na">tableName=</span><span class="s">&quot;c_security_role_permission&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;id_role&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;id_permission&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/createTable&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1357786892853-7&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;createTable</span> <span class="na">tableName=</span><span class="s">&quot;c_security_user&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;id&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span> <span class="na">primaryKey=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;username&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;fullname&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;active&quot;</span> <span class="na">type=</span><span class="s">&quot;BIT&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;id_role&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/createTable&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1357786892853-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;createTable</span> <span class="na">tableName=</span><span class="s">&quot;t_tagihan_listrik&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;id&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span> <span class="na">primaryKey=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;admin&quot;</span> <span class="na">type=</span><span class="s">&quot;DECIMAL(19,2)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;bulan_tagihan&quot;</span> <span class="na">type=</span><span class="s">&quot;DATE&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;current_meter_reading_1&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;current_meter_reading_2&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;current_meter_reading_3&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;denda&quot;</span> <span class="na">type=</span><span class="s">&quot;DECIMAL(19,2)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;id_pelanggan&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;jatuh_tempo&quot;</span> <span class="na">type=</span><span class="s">&quot;DATE&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;lunas&quot;</span> <span class="na">type=</span><span class="s">&quot;BIT&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;meter_read_date&quot;</span> <span class="na">type=</span><span class="s">&quot;DATE&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;mitra_lunas&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;nama_pelanggan&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;nilai&quot;</span> <span class="na">type=</span><span class="s">&quot;DECIMAL(19,2)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;pajak&quot;</span> <span class="na">type=</span><span class="s">&quot;DECIMAL(19,2)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;power_consuming_category&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;previous_meter_reading_1&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;previous_meter_reading_2&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;previous_meter_reading_3&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;referensi_lunas&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;service_unit&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;service_unit_hone&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;subscriber_segmentation&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;waktu_lunas&quot;</span> <span class="na">type=</span><span class="s">&quot;DATETIME&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/createTable&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1357786892853-9&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;addPrimaryKey</span> <span class="na">columnNames=</span><span class="s">&quot;id_role, id_menu&quot;</span> <span class="na">tableName=</span><span class="s">&quot;c_security_role_menu&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1357786892853-10&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;addPrimaryKey</span> <span class="na">columnNames=</span><span class="s">&quot;id_role, id_permission&quot;</span> <span class="na">tableName=</span><span class="s">&quot;c_security_role_permission&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1357786892853-11&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;addForeignKeyConstraint</span> <span class="na">baseColumnNames=</span><span class="s">&quot;id_parent&quot;</span> <span class="na">baseTableName=</span><span class="s">&quot;c_security_menu&quot;</span> <span class="na">baseTableSchemaName=</span><span class="s">&quot;merchant-simulator_development&quot;</span> <span class="na">constraintName=</span><span class="s">&quot;fk_menu_parent&quot;</span> <span class="na">deferrable=</span><span class="s">&quot;false&quot;</span> <span class="na">initiallyDeferred=</span><span class="s">&quot;false&quot;</span> <span class="na">onDelete=</span><span class="s">&quot;NO ACTION&quot;</span> <span class="na">onUpdate=</span><span class="s">&quot;NO ACTION&quot;</span> <span class="na">referencedColumnNames=</span><span class="s">&quot;id&quot;</span> <span class="na">referencedTableName=</span><span class="s">&quot;c_security_menu&quot;</span> <span class="na">referencedTableSchemaName=</span><span class="s">&quot;merchant-simulator_development&quot;</span> <span class="na">referencesUniqueColumn=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1357786892853-12&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;addForeignKeyConstraint</span> <span class="na">baseColumnNames=</span><span class="s">&quot;id_menu&quot;</span> <span class="na">baseTableName=</span><span class="s">&quot;c_security_role_menu&quot;</span> <span class="na">baseTableSchemaName=</span><span class="s">&quot;merchant-simulator_development&quot;</span> <span class="na">constraintName=</span><span class="s">&quot;fk_role_menu_menu&quot;</span> <span class="na">deferrable=</span><span class="s">&quot;false&quot;</span> <span class="na">initiallyDeferred=</span><span class="s">&quot;false&quot;</span> <span class="na">onDelete=</span><span class="s">&quot;NO ACTION&quot;</span> <span class="na">onUpdate=</span><span class="s">&quot;NO ACTION&quot;</span> <span class="na">referencedColumnNames=</span><span class="s">&quot;id&quot;</span> <span class="na">referencedTableName=</span><span class="s">&quot;c_security_menu&quot;</span> <span class="na">referencedTableSchemaName=</span><span class="s">&quot;merchant-simulator_development&quot;</span> <span class="na">referencesUniqueColumn=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1357786892853-13&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;addForeignKeyConstraint</span> <span class="na">baseColumnNames=</span><span class="s">&quot;id_role&quot;</span> <span class="na">baseTableName=</span><span class="s">&quot;c_security_role_menu&quot;</span> <span class="na">baseTableSchemaName=</span><span class="s">&quot;merchant-simulator_development&quot;</span> <span class="na">constraintName=</span><span class="s">&quot;fk_role_menu_role&quot;</span> <span class="na">deferrable=</span><span class="s">&quot;false&quot;</span> <span class="na">initiallyDeferred=</span><span class="s">&quot;false&quot;</span> <span class="na">onDelete=</span><span class="s">&quot;NO ACTION&quot;</span> <span class="na">onUpdate=</span><span class="s">&quot;NO ACTION&quot;</span> <span class="na">referencedColumnNames=</span><span class="s">&quot;id&quot;</span> <span class="na">referencedTableName=</span><span class="s">&quot;c_security_role&quot;</span> <span class="na">referencedTableSchemaName=</span><span class="s">&quot;merchant-simulator_development&quot;</span> <span class="na">referencesUniqueColumn=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1357786892853-14&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;addForeignKeyConstraint</span> <span class="na">baseColumnNames=</span><span class="s">&quot;id_permission&quot;</span> <span class="na">baseTableName=</span><span class="s">&quot;c_security_role_permission&quot;</span> <span class="na">baseTableSchemaName=</span><span class="s">&quot;merchant-simulator_development&quot;</span> <span class="na">constraintName=</span><span class="s">&quot;fk_role_permission_permission&quot;</span> <span class="na">deferrable=</span><span class="s">&quot;false&quot;</span> <span class="na">initiallyDeferred=</span><span class="s">&quot;false&quot;</span> <span class="na">onDelete=</span><span class="s">&quot;NO ACTION&quot;</span> <span class="na">onUpdate=</span><span class="s">&quot;NO ACTION&quot;</span> <span class="na">referencedColumnNames=</span><span class="s">&quot;id&quot;</span> <span class="na">referencedTableName=</span><span class="s">&quot;c_security_permission&quot;</span> <span class="na">referencedTableSchemaName=</span><span class="s">&quot;merchant-simulator_development&quot;</span> <span class="na">referencesUniqueColumn=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1357786892853-15&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;addForeignKeyConstraint</span> <span class="na">baseColumnNames=</span><span class="s">&quot;id_role&quot;</span> <span class="na">baseTableName=</span><span class="s">&quot;c_security_role_permission&quot;</span> <span class="na">baseTableSchemaName=</span><span class="s">&quot;merchant-simulator_development&quot;</span> <span class="na">constraintName=</span><span class="s">&quot;fk_role_permission_role&quot;</span> <span class="na">deferrable=</span><span class="s">&quot;false&quot;</span> <span class="na">initiallyDeferred=</span><span class="s">&quot;false&quot;</span> <span class="na">onDelete=</span><span class="s">&quot;NO ACTION&quot;</span> <span class="na">onUpdate=</span><span class="s">&quot;NO ACTION&quot;</span> <span class="na">referencedColumnNames=</span><span class="s">&quot;id&quot;</span> <span class="na">referencedTableName=</span><span class="s">&quot;c_security_role&quot;</span> <span class="na">referencedTableSchemaName=</span><span class="s">&quot;merchant-simulator_development&quot;</span> <span class="na">referencesUniqueColumn=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1357786892853-16&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;addForeignKeyConstraint</span> <span class="na">baseColumnNames=</span><span class="s">&quot;id_role&quot;</span> <span class="na">baseTableName=</span><span class="s">&quot;c_security_user&quot;</span> <span class="na">baseTableSchemaName=</span><span class="s">&quot;merchant-simulator_development&quot;</span> <span class="na">constraintName=</span><span class="s">&quot;fk_user_role&quot;</span> <span class="na">deferrable=</span><span class="s">&quot;false&quot;</span> <span class="na">initiallyDeferred=</span><span class="s">&quot;false&quot;</span> <span class="na">onDelete=</span><span class="s">&quot;NO ACTION&quot;</span> <span class="na">onUpdate=</span><span class="s">&quot;NO ACTION&quot;</span> <span class="na">referencedColumnNames=</span><span class="s">&quot;id&quot;</span> <span class="na">referencedTableName=</span><span class="s">&quot;c_security_role&quot;</span> <span class="na">referencedTableSchemaName=</span><span class="s">&quot;merchant-simulator_development&quot;</span> <span class="na">referencesUniqueColumn=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1357786892853-17&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;createIndex</span> <span class="na">indexName=</span><span class="s">&quot;name&quot;</span> <span class="na">tableName=</span><span class="s">&quot;c_application_config&quot;</span> <span class="na">unique=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/createIndex&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1357786892853-18&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;createIndex</span> <span class="na">indexName=</span><span class="s">&quot;unique_permission_value&quot;</span> <span class="na">tableName=</span><span class="s">&quot;c_security_permission&quot;</span> <span class="na">unique=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;permission_value&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/createIndex&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1357786892853-19&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;createIndex</span> <span class="na">indexName=</span><span class="s">&quot;unique_role_name&quot;</span> <span class="na">tableName=</span><span class="s">&quot;c_security_role&quot;</span> <span class="na">unique=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/createIndex&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1357786892853-20&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;createIndex</span> <span class="na">indexName=</span><span class="s">&quot;unique_user_username&quot;</span> <span class="na">tableName=</span><span class="s">&quot;c_security_user&quot;</span> <span class="na">unique=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;username&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/createIndex&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'><span class="nt">&lt;/databaseChangeLog&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>File di atas siap diedit dan disimpan di repository version control.
Biasanya, edit yang saya lakukan:</p>

<ul>
<li>menggabungkan semua <code>createTable</code> menjadi satu changeset</li>
<li>menggabungkan semua <code>addForeignKeyConstraint</code> dan <code>createIndex</code> menjadi satu changeset</li>
<li>menambahkan loader untuk file csv sebagai data awal</li>
<li>mengganti nama file</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membuat Audit Log]]></title>
    <link href="http://software.endy.muhardin.com/java/membuat-audit-log/"/>
    <updated>2012-10-24T11:44:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/membuat-audit-log</id>
    <content type="html"><![CDATA[<h1>Membuat Audit Log dalam Aplikasi</h1>

<p>Dalam membuat aplikasi bisnis, kita sering diminta membuat audit log.</p>

<blockquote><p>Apa itu audit log?</p></blockquote>

<p>Audit log adalah catatan mengenai perubahan data dalam aplikasi.
Yang dicatat biasanya :</p>

<ul>
<li>kolom mana yang berubah</li>
<li>siapa yang mengubah</li>
<li>diubah dari apa menjadi apa</li>
<li>kapan dia berubah</li>
</ul>


<!--more-->


<p>Dengan menggunakan <a href="http://docs.jboss.org/hibernate/orm/4.1/devguide/en-US/html/ch15.html">Hibernate Envers</a>,
audit log ini bisa dibuat dengan mudah sekali.
Hibernate Envers adalah salah satu modul tambahan <a href="http://hibernate.org/">Hibernate</a> untuk keperluan ini.
Tentunya aplikasi kita harus menggunakan Hibernate supaya bisa memanfaatkan fitur ini.</p>

<h2>Konfigurasi Awal</h2>

<p>Konfigurasi dan setup awal sangat mudah, yaitu:</p>

<ol>
<li>Tambahkan JAR hibernate-envers ke dalam aplikasi</li>
<li>Tambahkan anotasi <code>@Audited</code> di class <code>@Entity</code> kita.</li>
</ol>


<p>Contoh perubahan ini bisa dilihat <a href="https://github.com/endymuhardin/belajar-auditlog/commit/05ca0c7c90b10cf64560d4cec933774aa91a8a81">di sini</a>.</p>

<h2>Audit Log Sederhana</h2>

<p>Entity class yang sudah ditambahi dengan annotation <code>@Audited</code> tampak seperti ini:</p>

<figure class='code'><figcaption><span>Kategori.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Entity</span> <span class="nd">@Audited</span>
</span><span class='line'><span class="nd">@Table</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;m_kategori&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Kategori</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Id</span> <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span><span class="o">=</span> <span class="n">GenerationType</span><span class="o">.</span><span class="na">AUTO</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Column</span><span class="o">(</span><span class="n">nullable</span><span class="o">=</span><span class="kc">false</span><span class="o">,</span> <span class="n">unique</span><span class="o">=</span><span class="kc">true</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">kode</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">nama</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// getter setter tidak ditampilkan</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pada awalnya, mapping di atas akan menghasilkan skema database seperti ini:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">m_kategori</span><span class="o">`</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">kode</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">nama</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">),</span>
</span><span class='line'>  <span class="k">UNIQUE</span> <span class="k">KEY</span> <span class="o">`</span><span class="n">kode</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">kode</span><span class="o">`</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Setelah ditambahi <code>@Audited</code>, Envers akan menambahkan satu tabel untuk keperluan audit log <code>m_kategori</code> dengan nama tabel ditambahi akhiran <code>_AUD</code> dan memiliki skema seperti ini:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">m_kategori_AUD</span><span class="o">`</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">REV</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">REVTYPE</span><span class="o">`</span> <span class="n">tinyint</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">kode</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">nama</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">,</span><span class="o">`</span><span class="n">REV</span><span class="o">`</span><span class="p">),</span>
</span><span class='line'>  <span class="k">KEY</span> <span class="o">`</span><span class="n">FK4263149C625F360</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">REV</span><span class="o">`</span><span class="p">),</span>
</span><span class='line'>  <span class="k">CONSTRAINT</span> <span class="o">`</span><span class="n">FK4263149C625F360</span><span class="o">`</span> <span class="k">FOREIGN</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">REV</span><span class="o">`</span><span class="p">)</span> <span class="k">REFERENCES</span> <span class="o">`</span><span class="n">REVINFO</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kolom dalam tabelnya tidak jauh berbeda, dengan perbedaan sebagai berikut:</p>

<ul>
<li><p>tambahan kolom <code>REV</code> yang menunjukkan urutan perubahan.
  Nilai <code>REV</code> ini tidak berurut karena penambahannya (increment) sharing dengan semua tabel lain.
  Bisa saja <code>REV</code> <code>1</code> mencatat perubahan di <code>m_kategori</code> sedangkan <code>REV</code> <code>2</code> mencatat perubahan <code>m_produk</code>.</p></li>
<li><p>kolom <code>REVTYPE</code> yang menunjukkan jenis perubahan.
  Nilainya <code>0</code> untuk <strong>insert</strong> record baru, <code>1</code> untuk <strong>modifikasi</strong>, dan <code>2</code> untuk <strong>hapus</strong></p></li>
<li><p>kolom <code>id</code> tidak lagi menjadi primary key sendirian, tapi bersama dengan kolom <code>REV</code></p></li>
</ul>


<p>Kita juga lihat ada relasi ke tabel <code>REVINFO</code>. Skemanya sebagai berikut:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">REVINFO</span><span class="o">`</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="k">timestamp</span><span class="o">`</span> <span class="nb">bigint</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class='line'>  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kolom <code>id</code> merupakan nilai yang bertambah terus (auto increment). Tabel ini akan diisi setiap kali ada revisi di tabel yang dipantau oleh Envers seperti tabel <code>m_kategori</code> kita di atas.
Tabel ini dishare oleh semua tabel audit log sehingga untuk satu tabel yang sama, nomer <code>REV</code> belum tentu berurutan. Bisa saja diselingi oleh nomer <code>REV</code> yang berkaitan dengan tabel lain. Kolom <code>timestamp</code> menunjukkan kapan revisi terjadi.</p>

<p>Untuk lebih memahami penggunaan tabel-tabel ini, mari kita lihat isi datanya.</p>

<p>Pertama, kita jalankan kode berikut dari aplikasi kita:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCrudKategori</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Kategori</span> <span class="n">k</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Kategori</span><span class="o">();</span>
</span><span class='line'>    <span class="n">k</span><span class="o">.</span><span class="na">setKode</span><span class="o">(</span><span class="s">&quot;K-999&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">k</span><span class="o">.</span><span class="na">setNama</span><span class="o">(</span><span class="s">&quot;Kategori 999&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assertNull</span><span class="o">(</span><span class="n">k</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>    <span class="n">belajarService</span><span class="o">.</span><span class="na">simpan</span><span class="o">(</span><span class="n">k</span><span class="o">);</span>
</span><span class='line'>    <span class="n">assertNotNull</span><span class="o">(</span><span class="n">k</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">k</span><span class="o">.</span><span class="na">setKode</span><span class="o">(</span><span class="s">&quot;K-999-X&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">k</span><span class="o">.</span><span class="na">setNama</span><span class="o">(</span><span class="s">&quot;Kategori 999-X&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">belajarService</span><span class="o">.</span><span class="na">simpan</span><span class="o">(</span><span class="n">k</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Kategori</span> <span class="n">kx</span> <span class="o">=</span> <span class="n">belajarService</span><span class="o">.</span><span class="na">cariKategoriById</span><span class="o">(</span><span class="n">k</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;K-999-X&quot;</span><span class="o">,</span> <span class="n">kx</span><span class="o">.</span><span class="na">getKode</span><span class="o">());</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;Kategori 999-X&quot;</span><span class="o">,</span> <span class="n">kx</span><span class="o">.</span><span class="na">getNama</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">belajarService</span><span class="o">.</span><span class="na">hapus</span><span class="o">(</span><span class="n">k</span><span class="o">);</span>
</span><span class='line'>    <span class="n">assertNull</span><span class="o">(</span><span class="n">belajarService</span><span class="o">.</span><span class="na">cariKategoriById</span><span class="o">(</span><span class="n">k</span><span class="o">.</span><span class="na">getId</span><span class="o">()));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Operasi di atas akan mengisi tabel audit sebagai berikut:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">select</span> <span class="o">*</span> <span class="n">from</span> <span class="n">m_kategori_AUD</span> <span class="n">order</span> <span class="n">by</span> <span class="n">id</span><span class="o">,</span><span class="n">REV</span><span class="o">,</span><span class="n">REVTYPE</span><span class="o">;</span>
</span><span class='line'><span class="o">+-----+-----+---------+---------+-----------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">id</span>  <span class="o">|</span> <span class="n">REV</span> <span class="o">|</span> <span class="n">REVTYPE</span> <span class="o">|</span> <span class="n">kode</span>    <span class="o">|</span> <span class="n">nama</span>                  <span class="o">|</span>
</span><span class='line'><span class="o">+-----+-----+---------+---------+-----------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="mi">101</span> <span class="o">|</span>   <span class="mi">2</span> <span class="o">|</span>       <span class="mi">0</span> <span class="o">|</span> <span class="n">K</span><span class="o">-</span><span class="mi">999</span>   <span class="o">|</span> <span class="n">Kategori</span> <span class="mi">999</span>          <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="mi">101</span> <span class="o">|</span>   <span class="mi">3</span> <span class="o">|</span>       <span class="mi">1</span> <span class="o">|</span> <span class="n">K</span><span class="o">-</span><span class="mi">999</span><span class="o">-</span><span class="n">X</span> <span class="o">|</span> <span class="n">Kategori</span> <span class="mi">999</span><span class="o">-</span><span class="n">X</span>        <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="mi">101</span> <span class="o">|</span>   <span class="mi">4</span> <span class="o">|</span>       <span class="mi">2</span> <span class="o">|</span> <span class="n">NULL</span>    <span class="o">|</span> <span class="n">NULL</span>                  <span class="o">|</span>
</span><span class='line'><span class="o">+-----+-----+---------+---------+-----------------------+</span>
</span></code></pre></td></tr></table></div></figure>


<p>Data dengan <code>REV</code> <code>1</code> dan <code>2</code> tidak ditampilkan karena mencatat record lain.
Dari isi tabel ini, kita bisa melihat bahwa terjadi tiga kali operasi pada record kategori dengan id 101, yaitu:</p>

<ol>
<li>Insert record baru. <code>REVTYPE</code> berisi <code>0</code>, artinya record baru. Kolom id, kode, dan nama berisi nilai yang pertama diisi.</li>
<li>Update kode dan nama. <code>REVTYPE</code> berisi <code>1</code>, artinya modifikasi. Kolom kode dan nama diisi dengan nilai setelah modifikasi</li>
<li>Delete record. <code>REVTYPE</code> berisi <code>2</code>, artinya hapus. Kolom kode dan nama diisi null karena datanya sudah tidak relevan (karena record dihapus).</li>
</ol>


<p>Berikut isi tabel <code>REVINFO</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">select</span> <span class="o">*</span> <span class="n">from</span> <span class="n">REVINFO</span><span class="o">;</span>
</span><span class='line'><span class="o">+----+---------------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">timestamp</span>     <span class="o">|</span>
</span><span class='line'><span class="o">+----+---------------+</span>
</span><span class='line'><span class="o">|</span>  <span class="mi">2</span> <span class="o">|</span> <span class="mi">1351521839648</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span>  <span class="mi">3</span> <span class="o">|</span> <span class="mi">1351521839718</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span>  <span class="mi">4</span> <span class="o">|</span> <span class="mi">1351521839801</span> <span class="o">|</span>
</span><span class='line'><span class="o">+----+---------------+</span>
</span></code></pre></td></tr></table></div></figure>


<p>Karena hanya mencatat timestamp saja, maka tidak ada yang perlu dijelaskan mengenai isi tabel <code>REVINFO</code>.</p>

<h2>Penambahan informasi yang ingin dicatat</h2>

<p>Secara default, Hibernate Envers hanya mencatat data yang berubah dan kapan dia berubah.
Untuk menambahkan catatan tentang username, perlu ada sedikit coding seperti bisa dilihat <a href="https://github.com/endymuhardin/belajar-auditlog/commit/e910b6bc5ef33ee61f0137c8297b0f2ec4f502fe">di sini</a>. Kita harus :</p>

<ol>
<li>Extends <code>DefaultRevisionEntity</code> dan menambahkan kolom username</li>
<li>Membuat <code>RevisionListener</code> untuk mengisi kolom username tersebut</li>
</ol>


<p>Data username biasanya diambilkan dari user yang sedang login di aplikasi (dan dengan sendirinya dialah yang melakukan perubahan data).</p>

<p>Setelah dilakukan dua modifikasi di atas, skema REVINFO menjadi sebagai berikut:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">REVINFO</span><span class="o">`</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="k">timestamp</span><span class="o">`</span> <span class="nb">bigint</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">username</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Berikut yang sudah terisi data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">REVINFO</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span><span class="c1">----+---------------+----------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="k">timestamp</span>     <span class="o">|</span> <span class="n">username</span> <span class="o">|</span>
</span><span class='line'><span class="o">+</span><span class="c1">----+---------------+----------+</span>
</span><span class='line'><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="mi">1351521839220</span> <span class="o">|</span> <span class="n">endy</span>     <span class="o">|</span>
</span><span class='line'><span class="o">|</span>  <span class="mi">2</span> <span class="o">|</span> <span class="mi">1351521839648</span> <span class="o">|</span> <span class="n">endy</span>     <span class="o">|</span>
</span><span class='line'><span class="o">|</span>  <span class="mi">3</span> <span class="o">|</span> <span class="mi">1351521839718</span> <span class="o">|</span> <span class="n">endy</span>     <span class="o">|</span>
</span><span class='line'><span class="o">|</span>  <span class="mi">4</span> <span class="o">|</span> <span class="mi">1351521839801</span> <span class="o">|</span> <span class="n">endy</span>     <span class="o">|</span>
</span><span class='line'><span class="o">|</span>  <span class="mi">5</span> <span class="o">|</span> <span class="mi">1351521840174</span> <span class="o">|</span> <span class="n">endy</span>     <span class="o">|</span>
</span><span class='line'><span class="o">|</span>  <span class="mi">6</span> <span class="o">|</span> <span class="mi">1351521840571</span> <span class="o">|</span> <span class="n">endy</span>     <span class="o">|</span>
</span><span class='line'><span class="o">|</span>  <span class="mi">7</span> <span class="o">|</span> <span class="mi">1351521840959</span> <span class="o">|</span> <span class="n">endy</span>     <span class="o">|</span>
</span><span class='line'><span class="o">|</span>  <span class="mi">8</span> <span class="o">|</span> <span class="mi">1351521841351</span> <span class="o">|</span> <span class="n">endy</span>     <span class="o">|</span>
</span><span class='line'><span class="o">+</span><span class="c1">----+---------------+----------+</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Penyesuaian Lain</h2>

<p>Selain penambahan kolom yang ingin dicatat, biasanya kita juga ingin melakukan penyesuaian lain seperti:</p>

<ul>
<li>akhiran di nama tabel audit (<code>_AUD</code>)</li>
<li>nama kolom nomer revisi (<code>REV</code>)</li>
<li>nama kolom jenis revisi (<code>REVTYPE</code>)</li>
<li>dan sebagainya</li>
</ul>


<p>Keterangan apa saja yang bisa diubah dan cara mengubahnya dapat dilihat di <a href="http://docs.jboss.org/hibernate/orm/4.1/devguide/en-US/html/ch15.html#d5e3937">dokumentasi konfigurasi Envers</a>.</p>

<p>Contoh kode yang lengkap bisa diambil di <a href="https://github.com/endymuhardin/belajar-auditlog">repository saya di Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Buku Panduan Markdown dan Pandoc]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/buku-panduan-markdown-dan-pandoc/"/>
    <updated>2012-09-26T12:26:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/buku-panduan-markdown-dan-pandoc</id>
    <content type="html"><![CDATA[<p>Menyusul <a href="http://software.endy.muhardin.com/aplikasi/membuat-dokumen-dengan-markdown-dan-pandoc/">postingan sebelumnya</a>, saya telah menulis buku panduan cara menggunakan Markdown dan Pandoc.</p>

<p>Buku ini tentu saja ditulis menggunakan Markdown dan dikonversi ke PDF menggunakan Pandoc. Silahkan digunakan:</p>

<ul>
<li>Source code ada di <a href="https://github.com/endymuhardin/buku-pandoc">Github</a></li>
<li>Hasil PDF yang sudah jadi bisa diunduh <a href="https://raw.github.com/endymuhardin/buku-pandoc/master/buku/markdown-dan-pandoc.pdf">di sini</a>.</li>
</ul>


<p>Semoga bermanfaat.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membuat dokumen dengan Markdown dan Pandoc]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/membuat-dokumen-dengan-markdown-dan-pandoc/"/>
    <updated>2012-09-05T11:53:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/membuat-dokumen-dengan-markdown-dan-pandoc</id>
    <content type="html"><![CDATA[<p>Sudah lama saya mencari format yang tepat untuk membuat dokumentasi. Baik untuk menulis ebook, user manual, modul pelatihan, dan berbagai keperluan penulisan lainnya. Beberapa fitur yang saya inginkan antara lain:</p>

<ol>
<li>berbentuk text file biasa. Dengan menggunakan format text file biasa, ada beberapa keuntungan yang bisa diambil:

<ul>
<li>Bisa dikelola di version control seperti Git atau Subversion</li>
<li>Bisa diedit di komputer, handphone, ataupun tablet</li>
<li>Ukurannya kecil, sehingga memudahkan penyimpanan di cloud storage seperti Dropbox</li>
</ul>
</li>
<li>Bisa dikonversi ke format lain, terutama pdf</li>
<li>Mudah dipahami</li>
<li>Bisa diwarnai dengan syntax highlighting</li>
<li>Bisa autocomplete</li>
</ol>


<p>Dari empat fitur di atas, yang wajib cuma yang pertama dan kedua saja. Fitur lainnya bersifat <em>nice to have</em>, ada syukur, gak ada juga tidak terlalu masalah.</p>

<!--more-->


<p>Setelah google kesana-kemari, ada dua format yang kira-kira memenuhi syarat di atas, yaitu <a href="http://en.wikipedia.org/wiki/Markdown">Markdown</a> dan <a href="http://en.wikipedia.org/wiki/DocBook">Docbook</a>. Dua-duanya mudah dipahami. Walaupun demikian, format Markdown lebih mudah diedit, karena menggunakan markup yang enak dilihat mata. Sedangkan Docbook menggunakan format XML, selain kurang WYSYWIG, juga bikin capek kelingking karena harus mengetik kurung siku terus menerus. Kurung siku ini juga menyulitkan kalau kita mengetik di handphone atau tablet.</p>

<p>Jadi, disimpulkan kita akan menggunakan format Markdown saja. Ini juga sejalan dengan aplikasi yang saya gunakan untuk menulis blog, yaitu <a href="http://octopress.org/">Octopress</a>. Untuk melihat bagaimana tampilan file markdown, silahkan unduh <a href="https://raw.github.com/endymuhardin/belajar-pandoc/master/01-akses-database-spring-25.md">file contoh yang saya gunakan di bawah</a>, kemudian buka dengan text editor primitif seperti Notepad atau Gedit.</p>

<p>Setelah dokumen ditulis, kita bisa melakukan konversi dengan menggunakan aplikasi bernama <a href="http://johnmacfarlane.net/pandoc/index.html">Pandoc</a>. Pandoc ini adalah aplikasi yang dibuat oleh <a href="http://johnmacfarlane.net/">John MacFarlane</a>, seorang profesor filosofi di University of California, Berkeley. Pandoc dibuat dengan bahasa pemrograman <a href="http://en.wikipedia.org/wiki/Haskell_(programming_language">Haskell</a>).</p>

<h1>Instalasi Pandoc</h1>

<p>Di Ubuntu, instalasinya tidak sulit, cukup jalankan perintah berikut:</p>

<p><code>sudo apt-get install pandoc texlive-latex-base texlive-xetex latex-beamer</code></p>

<p>Instalasi untuk Windows saya tidak tahu dan juga tidak berminat untuk cari tahu. Silahkan baca <a href="http://johnmacfarlane.net/pandoc/installing.html">petunjuk instalasi</a>.</p>

<h1>Cara Pemakaian</h1>

<p>Cara pakainya tidak sulit, cukup dengan perintah sederhana seperti ini:</p>

<p><code>pandoc -o hasil.pdf input.md</code></p>

<p>File <code>input.md</code> adalah tulisan kita dalam format markdown, sedangkan opsi <code>-o hasil.pdf</code> menunjukkan file output yang ingin dihasilkan. Pandoc cukup cerdas untuk mengetahui format output yang diinginkan dengan melihat ekstensi di nama file. Jadi, kalau kita berikan opsi <code>-o hasil.html</code>, dia akan mengkonversi tulisan kita menjadi file HTML.</p>

<p>Lebih jauh tentang cara pemakaian Pandoc bisa dilihat di <a href="http://johnmacfarlane.net/pandoc/README.html">user manualnya</a>. Selain itu, kita juga bisa melihat <a href="http://johnmacfarlane.net/pandoc/demos.html">berbagai contoh pemakaian Pandoc</a> di websitenya. Beberapa contoh yang menarik diantaranya adalah cara menghasilkan slide presentasi dengan format HTML, yaitu di contoh nomer 16.</p>

<h1>Customization</h1>

<p>Untuk kebutuhan modul pelatihan ArtiVisi, tentu kita membutuhkan sedikit penyesuaian, yaitu:</p>

<ul>
<li>font serif diganti menjadi Droid Serif. Font serif ini biasa digunakan untuk paragraf.</li>
<li>font sans diganti menjadi Droid Sans. Font sans biasa digunakan untuk judul.</li>
<li>font monospace diganti menjadi Inconsolata. Font monospace biasa digunakan untuk contoh kode program.</li>
<li>cover depan. Pandoc secara default tidak membuatkan cover depan. Kita perlu membuat template cover sendiri.</li>
</ul>


<p>Penyesuaian di atas dilakukan dengan cara membuat template dokumen. Template ini berbeda-beda tergantung jenis output yang akan dihasilkan.</p>

<h2>Template Open Office</h2>

<p>Untuk membuat template dokumen Open Office, berikut langkah-langkahnya:</p>

<ol>
<li>Generate dulu dokumen Open Office dengan perintah <code>pandoc -o hasil.odt input.md</code></li>
<li>Buka <code>hasil.odt</code> dengan Open Office.</li>
<li>Edit masing-masing style yang digunakan, misalnya TextBody, PreformattedText, dsb.</li>
<li>Simpan dokumen tersebut, dan rename menjadi <code>template.odt</code></li>
<li>Generate lagi dokumen Open Office menggunakan template tersebut dengan perintah <code>pandoc --reference-odt=template.odt -o hasil.odt input.md</code></li>
</ol>


<p>Cara ini saya dapatkan dari <a href="http://maketecheasier.com/use-pandoc-convert-text-to-ebook/2012/09/01">tutorial ini</a>.</p>

<h2>Template PDF</h2>

<p>Pandoc menghasilkan dokumen PDF secara dua tahap. Tahap pertama adalah konversi dari <code>Markdown</code> menjadi <code>LaTeX</code>. Kemudian dari format <code>LaTeX</code> akan dikonversi lagi menjadi <code>PDF</code>. Perlu diperhatikan, yang dimaksud <code>LaTeX</code> di sini adalah format penulisan dokumen, bukan bahan baku pembuatan alat kontrasepsi.</p>

<p>Dengan demikian, untuk menyesuaikan output PDF, kita perlu membuat template <code>LaTeX</code>. Prof John sudah memberi tahu cara pakai template di contoh nomer 14. Di situ kita bisa mengunduh <a href="http://johnmacfarlane.net/pandoc/demo/mytemplate.tex">contoh template</a> yang dia gunakan. Contoh template ini akan menjadi titik awal kita untuk melakukan penyesuaian.</p>

<p>Di contoh template tersebut, beliau sudah memasang font yang bisa dicustomize melalui opsi <code>--variable</code>. Yang kurang adalah halaman sampul (cover page). Saya menemukan <a href="http://www.latextemplates.com/">daftar template cover yang siap pakai</a>, dan juga <a href="http://en.wikibooks.org/wiki/LaTeX/Title_Creation">tutorial cara mendesain cover sendiri</a>. Untuk penyesuaian lebih lanjut, kita bisa berpedoman pada <a href="http://en.wikibooks.org/wiki/LaTeX/Command_Glossary">dokumentasi perintah Latex</a>.</p>

<p>Setelah template selesai dibuat, kita bisa langsung gunakan dengan perintah sebagai berikut:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>pandoc --template artivisi-template.tex  --variable <span class="nv">mainfont</span><span class="o">=</span><span class="s2">&quot;Droid Serif&quot;</span> --variable <span class="nv">sansfont</span><span class="o">=</span><span class="s2">&quot;Droid Sans&quot;</span> --variable <span class="nv">fontsize</span><span class="o">=</span>12pt --variable <span class="nv">version</span><span class="o">=</span>1.0 --variable <span class="nv">subtitle</span><span class="o">=</span><span class="s2">&quot;Mengakses database menggunakan Spring-JDBC&quot;</span> --latex-engine<span class="o">=</span>xelatex --toc -N -o hasil.pdf *md
</span></code></pre></td></tr></table></div></figure>


<p>Anda bisa melihat <a href="https://raw.github.com/endymuhardin/belajar-pandoc/master/output/coba.pdf">file PDF yang dihasilkan</a>, <a href="https://raw.github.com/endymuhardin/belajar-pandoc/master/00-cover.md">file markdown untuk cover</a>, <a href="https://raw.github.com/endymuhardin/belajar-pandoc/master/01-akses-database-spring-25.md">file markdown isi artikel</a>, dan <a href="https://raw.github.com/endymuhardin/belajar-pandoc/master/artivisi-template.tex">template LaTeX yang digunakan</a>. Atau bisa juga unduh <a href="https://nodeload.github.com/endymuhardin/belajar-pandoc/zipball/master">file zip</a> yang berisi semua file yang dibutuhkan untuk menjalankan perintah di atas.</p>

<h1>Kesimpulan</h1>

<p>Dengan menggunakan format berbasis text, kita bisa memperoleh keuntungan sebagai berikut:</p>

<ul>
<li>bisa diedit menggunakan aplikasi apa saja, termasuk Notepad</li>
<li>bisa dikelola menggunakan aplikasi version control</li>
<li>bisa diedit kapan saja dan di mana saja (menggunakan Dropbox) dengan device apa saja (handphone, tablet, komputer)</li>
<li>penulis bisa lebih fokus pada isi artikel, tidak memusingkan urusan formatting seperti besar kecil huruf, jenis font, penomoran bab, dan hal-hal lain yang bersifat tampilan</li>
</ul>


<p>Aplikasi pandoc bisa digunakan untuk mengkonversi berbagai format file seperti Markdown, Docbook, LaTeX, dan sebagainya menjadi berbagai format seperti PDF, HTML, Open Office, Microsoft Word, dan sebagainya.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Release Management]]></title>
    <link href="http://software.endy.muhardin.com/manajemen/release-management/"/>
    <updated>2012-08-29T18:01:00+07:00</updated>
    <id>http://software.endy.muhardin.com/manajemen/release-management</id>
    <content type="html"><![CDATA[<p>Release, atau di-Indonesia-kan menjadi rilis, adalah tahap yang paling penting dalam software development. Segala kegiatan hulu (upstream activity) lainnya seperti <a href="http://software.endy.muhardin.com/manajemen/fase-requirement/" title="Fase Requirement">requirement</a>, desain aplikasi, coding, testing, dan lainnya, semua dilakukan demi untuk menghasilkan software yang bisa dirilis. Sebagus apapun kita melakukan kegiatan lainnya, jika rilisnya tidak bagus, maka semua yang kita kerjakan menjadi tidak bagus. Sebaliknya, berbagai kesalahan dan kekurangan di kegiatan lain akan mudah dimaafkan dan dilupakan kalau kita menghasilkan rilis yang baik. Walaupun demikian, perlu diingat bahwa bila kita melakukan kegiatan hulu dengan baik, biasanya kita bisa menghasilkan rilis yang berkualitas baik secara konsisten.</p>

<p>Pada artikel ini, kita akan membahas pernak-pernik yang berkaitan dengan rilis. Apa itu rilis, berbagai jenis rilis, syarat dan ketentuan rilis, dan juga prosedur yang kita gunakan di ArtiVisi.</p>

<!--more-->


<h1>Apa itu rilis</h1>

<p>Rilis pada intinya adalah menyerahkan software yang sudah kita kerjakan ke pihak lain. Berdasarkan siapa yang dimaksud dengan pihak lain, kita membedakan rilis menjadi :</p>

<ul>
<li>rilis internal : menyerahkan software ke pihak internal tim pengembang, misalnya dari programmer ke tester.</li>
<li>rilis eksternal : menyerahkan ke pihak luar seperti client atau customer.</li>
</ul>


<p>Kita tidak harus menunggu sampai software selesai dikerjakan 100% untuk melakukan rilis. Berdasarkan tingkat penyelesaian pekerjaan, kita bisa membedakan rilis menjadi :</p>

<ul>
<li><p>development release : Ini adalah rilis yang dilakukan sebelum software selesai dikerjakan. Rilis ini dibuat untuk menunjukkan kemajuan dalam proses development, misalnya menunjukkan tambahan fitur baru ataupun sekedar menunjukkan perbedaan dengan rilis sebelumnya. Development release biasa dilakukan secara rutin dan periodik. Ada yang melakukannya secara mingguan, harian, bahkan dua kali sehari. Rilis jenis ini juga biasa disebut dengan unstable release (karena softwarenya belum stabil - sering hang atau error), milestone release, daily/nightly build release, atau alpha release.</p></li>
<li><p>testing release : Ini adalah rilis yang dilakukan setelah aplikasi siap untuk dites. Pada titik ini biasanya sudah tidak ada penambahan fitur lagi. Software yang dibuat diserahkan ke tester untuk dicari bugnya. Hasil laporan bug itu kemudian akan ditindak lanjuti sehingga menghasilkan testing release berikutnya. Kalau kita pernah mendengar istilah beta release, biasanya itu maksudnya adalah testing release. Orang sering membagi lagi testing release menjadi beta release dan release candidate. Pada prinsipnya, beta dan release candidate sama saja, bedanya ada di cakupan tester. Beta release khusus untuk dites oleh tester, sedangkan release candidate bisa juga dites oleh end-user.</p></li>
<li><p>final release : Rilis jenis ini menyatakan bahwa software sudah selesai dikerjakan, dites, dan laporan bugnya sudah ditindak lanjuti. Biasa disebut juga stable release, karena software yang dihasilkan bisa digunakan dengan lancar dan nyaman (stabil).</p></li>
</ul>


<h1>Manfaat Rilis</h1>

<p>Manfaat rilis tentunya adalah supaya software yang sudah susah payah kita buat, bisa bermanfaat bagi penggunanya dan sukur-sukur bisa menghasilkan uang bagi pembuatnya. Karena di atas kita sudah membahas berbagai jenis rilis, tentu juga ada macam-macam manfaat dari berbagai jenis rilis tersebut.</p>

<p>Development release sebaiknya dilakukan sesering mungkin. Agar tidak merepotkan, dilakukan menggunakan perangkat otomasi seperti <a href="http://jenkins-ci.org/" title="Jenkins Continuous Integration">Jenkins</a>. Manfaat dari development release adalah untuk memastikan integrasi antara fitur berjalan dengan baik. Sering kali pada saat membuat fitur X, secara tidak sengaja mempengaruhi fitur Y sehingga tidak berjalan dengan baik. Hal inilah yang coba dicegah dengan development release.</p>

<p>Testing release manfaatnya adalah supaya software yang kita buat bisa diperiksa oleh orang lain dengan perspektif yang berbeda dan lebih fresh. Programmer yang membuat aplikasi pastinya sudah hafal perilaku aplikasi yang dibuatnya, sehingga bisa menghindari error yang mungkin terjadi. Tapi tester atau user tidak memiliki pengetahuan tentang cara kerja internal aplikasi, sehingga lebih mungkin menemukan skenario yang belum diantisipasi oleh software.</p>

<p>Final release tentunya berguna supaya software kita bisa digunakan oleh masyarakat umum. Para pengguna (end user) biasanya menunggu sampai suatu software dinyatakan selesai, baru dia mau menggunakannya. Demikian juga bila aplikasi yang kita buat akan dibundel oleh orang lain (contohnya distro Linux, integrasi dengan aplikasi lain, dsb), tentu mereka akan menunggu keluarnya rilis final.</p>

<h1>Aturan Rilis</h1>

<p>Seperti kita bahas sebelumnya, tujuan rilis adalah supaya software kita bisa digunakan oleh orang lain. Oleh karena itu, kita harus memudahkan pengguna dalam memahami rilis yang kita keluarkan.</p>

<p>Hal paling penting dalam melakukan rilis adalah aturan penamaan. Dengan aturan penamaan yang baik, kita bisa:</p>

<ul>
<li>menjelaskan status rilis, apakah ini development release, testing, atau final.</li>
<li>menjelaskan kompatibilitas dengan versi sebelumnya dan aplikasi lain. Ini akan dijelaskan secara lebih detail sebentar lagi.</li>
<li>menjelaskan hubungan dengan rilis lainnya. Bila kita memiliki dua rilis, kita bisa membedakan mana rilis yang duluan dan mana yang belakangan.</li>
</ul>


<h1>Studi Kasus</h1>

<p>Untuk memudahkan pemahaman tentang penamaan rilis, mari kita karang studi kasusnya, yaitu Facebook Contact Backup.</p>

<blockquote><p>Aplikasi Facebook Contact Backup (FCB) adalah aplikasi yang bisa mendownload daftar contact kita di facebook, kemudian menuliskannya ke dalam text file. Contoh textfile akan dilampirkan di bawah. Untuk versi pertama, informasi kontak yang ditampilkan adalah : nama, email, no HP.</p></blockquote>

<p>Berikut contoh file yang dihasilkan oleh aplikasi FCB</p>

<figure class='code'><figcaption><span>facebook_contact.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;contacts&gt;</span>
</span><span class='line'>    <span class="nt">&lt;contact&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>Endy Muhardin<span class="nt">&lt;/contact&gt;</span>
</span><span class='line'>        <span class="nt">&lt;email&gt;</span>endy@geemail.com<span class="nt">&lt;/email&gt;</span>
</span><span class='line'>        <span class="nt">&lt;mobile&gt;</span>081298000468<span class="nt">&lt;/mobile&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/contact&gt;</span>
</span><span class='line'>    <span class="nt">&lt;contact&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>Ifnu Bima<span class="nt">&lt;/contact&gt;</span>
</span><span class='line'>        <span class="nt">&lt;email&gt;</span>ifnu@geemail.com<span class="nt">&lt;/email&gt;</span>
</span><span class='line'>        <span class="nt">&lt;mobile&gt;</span>+6281234567890<span class="nt">&lt;/mobile&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/contact&gt;</span>
</span><span class='line'><span class="nt">&lt;/contacts&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Karena aplikasi FCB kemudian menjadi populer, ada orang lain yang membuat aplikasi untuk mengisi phonebook di handphone bernama Handphone Contact Importer (HCI). Aplikasi HCI ini menggunakan aplikasi FCB untuk connect ke facebook dan mengambil data contact. Setelah datanya ada dalam format textfile, aplikasi HCI akan membaca text file tersebut dan kemudian mengisinya ke phonebook handphone.</p></blockquote>

<p>Aplikasi FCB dikembangkan dengan cepat sehingga menghasilkan beberapa rilis sebagai berikut:</p>

<h2>Rilis Pertama</h2>

<p>Memperbaiki format nomer handphone, sehingga semua diseragamkan menjadi format internasional. Nomer <code>081298000468</code> pada contoh di atas akan dikonversi menjadi <code>+6281298000468</code></p>

<h2>Rilis Kedua</h2>

<p>Fix protokol komunikasi ke Facebook, karena ada perubahan di Facebook API.</p>

<h2>Rilis Ketiga</h2>

<p>Menambahkan field ulang tahun sehingga format text file menjadi sebagai berikut :</p>

<figure class='code'><figcaption><span>facebook_contact.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;contacts&gt;</span>
</span><span class='line'>    <span class="nt">&lt;contact&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>Endy Muhardin<span class="nt">&lt;/contact&gt;</span>
</span><span class='line'>        <span class="nt">&lt;email&gt;</span>endy@geemail.com<span class="nt">&lt;/email&gt;</span>
</span><span class='line'>        <span class="nt">&lt;mobile&gt;</span>+6281298000468<span class="nt">&lt;/mobile&gt;</span>
</span><span class='line'>        <span class="nt">&lt;birthdate&gt;</span>1945-08-17<span class="nt">&lt;/birthdate&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/contact&gt;</span>
</span><span class='line'>    <span class="nt">&lt;contact&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>Ifnu Bima<span class="nt">&lt;/contact&gt;</span>
</span><span class='line'>        <span class="nt">&lt;email&gt;</span>ifnu@geemail.com<span class="nt">&lt;/email&gt;</span>
</span><span class='line'>        <span class="nt">&lt;mobile&gt;</span>+6281234567890<span class="nt">&lt;/mobile&gt;</span>
</span><span class='line'>        <span class="nt">&lt;birthdate&gt;</span>2011-11-11<span class="nt">&lt;/birthdate&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/contact&gt;</span>
</span><span class='line'><span class="nt">&lt;/contacts&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Rilis Keempat</h2>

<p>Ganti format xml menjadi json, mengikuti trend masa kini.</p>

<figure class='code'><figcaption><span>facebook_contact.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Endy Muhardin&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">email</span><span class="o">:</span> <span class="s2">&quot;endy@geemail.com&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">mobile</span><span class="o">:</span> <span class="s2">&quot;+6281298000468&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">birthdate</span><span class="o">:</span> <span class="s2">&quot;1945-08-17&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Ifnu Bima&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">email</span><span class="o">:</span> <span class="s2">&quot;ifnu@geemail.com&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">mobile</span><span class="o">:</span> <span class="s2">&quot;+6281234567890&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">birthdate</span><span class="o">:</span> <span class="s2">&quot;2011-11-11&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dengan studi kasus di atas, kita harus mempertimbangkan penomoran rilis untuk aplikasi FCB dengan benar, supaya aplikasi HCI bisa tahu apa yang harus dilakukan pada saat aplikasi FCB mengeluarkan rilis baru.</p>

<h1>Kompatibilitas</h1>

<p>Dalam mengeluarkan rilis untuk aplikasi FCB, kita harus mempertimbangkan aplikasi HCI agar tidak rusak. Pengaruh aplikasi FCB terhadap HCI dikenal dengan istilah kompatibilitas. Kompatibilitas dibedakan berdasarkan ketergantungan secara programmatic:</p>

<ul>
<li>binary compatibility : FCB terbaru disebut binary-compatible dengan HCI bila FCB yang sudah dicompile bisa langsung ditaruh di folder dan dipakai oleh HCI.</li>
<li>source compatibility : FCB terbaru disebut source-compatible dengan HCI bila FCB yang sudah dicompile tidak bisa langsung ditaruh begitu saja. HCI harus dicompile ulang dulu dengan FCB terbaru, baru HCI bisa dijalankan.</li>
</ul>


<p>Lebih lanjut tentang binary vs source compatibility bisa dibaca <a href="http://blogs.msdn.com/b/jmstall/archive/2008/03/10/binary-vs-source-compatibility.aspx">di artikel ini</a>.</p>

<p>Dan juga bisa dibedakan berdasarkan hubungannya dengan rilis terdahulu.</p>

<ul>
<li>backward compatibility : bila HCI versi terbaru bisa menggunakan format data FCB yang terdahulu. Misalnya, aplikasi HCI terbaru bisa membaca data versi baru (json), versi sebelumnya (xml), dan sebelumnya lagi (xml tanpa field birthdate)</li>
<li>forward compatibility : bila HCI versi jadul bisa membaca format data FCB yang lama (xml tanpa birthdate) dan yang lebih baru yang dirilis setelah HCI jadul tersebut (xml dengan birhtdate).</li>
</ul>


<p>Setelah kita memahami urusan kompatibilitas, kita bisa menentukan skema penamaan rilis, atau dikenal dengan istilah version numbering.</p>

<h1>Version Numbering</h1>

<p>Kita akan menggunakan <a href="http://apr.apache.org/versioning.html" title="Version Numbering APR">aturan dari Apache Portable Runtime</a> yang sudah diakui sebagai best-practices dalam version numbering. Aturan APR mengharuskan ada tiga komponen version number, yaitu :</p>

<ul>
<li>major number</li>
<li>minor number</li>
<li>patch number</li>
</ul>


<p>Contohnya, waktu pertama kita merilis FCB, kita beri nama <code>FCB-1.0.0</code>. Major numbernya 1, minor numbernya 0, patch numbernya 0.</p>

<p>Untuk rilis selanjutnya, kita menaikkan major/minor/patch number sesuai dengan pengaruhnya terhadap kompatibilitas. Aturannya sebagai berikut:</p>

<ul>
<li>major number dinaikkan bila FCB baru tidak kompatibel dengan FCB rilis sebelumnya. Bila HCI dipasang dengan FCB terbaru ini, HCI akan error.</li>
<li>minor number dinaikkan bila FCB baru mengandung penambahan fitur, tapi tetap kompatibel dengan HCI yang dibuat berdasarkan FCB lama. HCI versi lama tetap bisa jalan, walaupun tidak bisa memanfaatkan fitur yang baru.</li>
<li>patch dinaikkan bila tidak ada perubahan secara fitur, tapi cuma ada perbaikan di internal FCB yang tidak terlihat dari luar (misalnya optimasi koneksi jaringan, perubahan protokol ke arah Facebook, dsb)</li>
</ul>


<p>Selanjutnya, mari kita beri nomer sesuai studi kasus kita di atas.</p>

<ol>
<li>Rilis Pertama : diberi nama <code>1.1.0</code>, karena cuma terjadi perubahan di content saja. HCI yang dibuat dengan FCB versi <code>1.0.0</code> akan tetap berjalan lancar</li>
<li>Rilis Kedua : diberi nama <code>1.1.1</code>, karena perubahan protokol komunikasi dengan Facebook tidak mempengaruhi HCI sama sekali. HCI versi lama tetap bisa jalan dengan lancar.</li>
<li>Rilis Ketiga : diberi nama <code>1.2.0</code>, sama dengan rilis pertama. Ada penambahan fitur, tapi tidak membuat HCI jadi error. Dengan rilis ini, programmer HCI bisa menambahkan fitur baru misalnya reminder ulang tahun. Tapi HCI versi lama (tanpa reminder ulang tahun) tetap bisa digunakan dengan <code>FCB-1.2.0</code></li>
<li>Rilis Keempat : diberi nama <code>2.0.0</code>. Ini adalah perubahan signifikan. Untuk dapat menggunakan <code>FCB-2.0.0</code> ini, HCI harus mengalami perubahan signifikan. HCI versi lama tidak bisa digunakan dengan <code>FCB-2.0.0</code>. Agar dapat digunakan, programmer HCI harus mengeluarkan rilis baru yang bisa mengakomodasi format data JSON.</li>
</ol>


<p>Berikutnya, mari kita lihat pengaruhnya untuk HCI.</p>

<ol>
<li><code>HCI-1.0.0</code> : versi pertama, dibuat dengan <code>FCB-1.0.0</code></li>
<li>Rilis <code>FCB-1.1.0</code> : tidak ada tambahan fitur yang bisa dibuat di HCI, sehingga programmernya tidak coding.</li>
<li>Rilis <code>FCB-1.1.1</code> : tidak ada perubahan yang terlihat. Programmer HCI makan gaji buta sambil update status Facebook. Nganggurnya programmer HCI ini berarti <code>HCI-1.0.0</code> forward-compatible dengan <code>FCB-1.0.0</code>, <code>FCB-1.1.0</code>, hingga <code>FCB-1.1.1</code>.</li>
<li>Rilis <code>FCB-1.2.0</code> : ada field baru (birthdate) yang bisa dimanfaatkan, programmer HCI mulai coding.</li>
<li><code>HCI-1.1.0</code> : tambahan fitur reminder ulang tahun. <code>HCI-1.1.0</code> ini backward-compatible dengan <code>FCB-1.1.1</code>, <code>FCB-1.1.0</code>, maupun <code>FCB-1.0.0</code>.</li>
<li>Rilis <code>FCB-2.0.0</code> : HCI semua versi tidak dapat digunakan bila user meng-upgrade FCB-nya. Programmer HCI harus segera mengeluarkan rilis baru, tidak boleh coding sambil facebookan.</li>
<li><code>HCI-1.1.1</code> : bagi end-user, HCI terbaru ini tidak ada tambahan fiturnya. Tapi dia fixing bug, yang tadinya error pada waktu dijalankan (karena FCB-nya tidak kompatibel), menjadi tidak error.</li>
</ol>


<p>Selain major.minor.patch, ada kalanya orang juga menambahkan satu informasi lagi yang menyatakan kestabilan rilis. Berikut beberapa contohnya:</p>

<ul>
<li><code>FCB-1.0.1-SNAPSHOT</code> : ini biasanya digunakan untuk mencerminkan rilis daily build terbaru</li>
<li><code>FCB-1.0.0-20121212080808</code> : ini biasanya digunakan untuk menunjukkan hasil daily build tertentu</li>
<li><code>FCB-1.0.1-RC-01</code> : release candidate pertama</li>
<li><code>FCB-1.0.0-M2</code> : milestone kedua</li>
<li><code>FCB-1.0.0-Final</code> : final release. Ada orang yang menambahkan keyword Final, ada juga yang tidak.</li>
<li><code>FCB-1.0.0-GA</code> : generally available, sama dengan final release</li>
<li><code>FCB-1.0.0-RELEASE</code> : sama dengan GA dan Final</li>
</ul>


<p>Penomoran versi ini terlihat sepele saja. Tapi kalau kita tidak punya aturan penamaan yang jelas, maka orang lain akan bingung setiap kali ada rilis baru. Mereka tidak bisa menentukan apakah harus upgrade atau tidak, karena mereka tidak bisa tahu bagaimana kompatibilitas rilis ini dengan aplikasi lainnya. Salah satu contoh populer kekacauan yang disebabkan penomoran versi yang sembarangan <a href="http://news.ycombinator.com/item?id=1734936">bisa dilihat di komunitas Ruby</a>. Akibat aturan rilis Ruby tidak jelas, sehingga dibutuhkan aplikasi lain seperti RVM atau rbenv supaya antar versi Ruby tidak saling bentrok. Effort yang dikeluarkan untuk membuat dan memantain RVM dan rbenv tentu tidak sedikit. Ini semua disebabkan <em>hanya karena</em> penomoran versi belaka. Hasil akhir dari semua ini, sampai saat artikel ini ditulis, <a href="http://ryanbigg.com/2010/12/ubuntu-ruby-rvm-rails-and-you/">Ruby belum bisa dipaket dengan benar di distro Debian</a> dan turunannya (termasuk Ubuntu).</p>

<h1>Release Notes</h1>

<p>Tentunya penomoran versi saja tidak bisa memuat informasi yang detail. Kita membutuhkan sarana lain untuk memberikan informasi yang detail tentang isi dari suatu rilis. Untuk keperluan ini, biasanya orang membuat dokumen yang disebut Release Notes. Beberapa hal yang biasanya dicantumkan dalam release notes antara lain:</p>

<ul>
<li>fitur baru</li>
<li>bug yang diperbaiki</li>
<li>enhancement/improvement, yaitu perbaikan pada fitur yang ada</li>
<li>known issues, yaitu bug atau error yang sudah teridentifikasi tapi belum difix. Informasi ini menunjukkan bahwa programmernya sudah tahu bahwa ada bug, tapi karena satu dan lain hal belum memperbaikinya</li>
<li>kontributor, yaitu siapa saja yang berkontribusi di rilis ini.</li>
<li>to do, yaitu fitur apa yang direncanakan akan dibuat pada rilis berikut. Informasi ini bisa juga ditulis di dokumen terpisah bernama roadmap</li>
</ul>


<p>Contoh release notes bisa dilihat <a href="http://software.endy.muhardin.com/images/uploads/2012/08/RELEASE.txt" title="Contoh Release Notes">di sini</a>.</p>

<h1>Tools</h1>

<p>Ada beberapa hal yang perlu dilakukan pada waktu kita akan melakukan rilis, yaitu:</p>

<ul>
<li>menaikkan nomor versi di source code. Biasanya kita ada mencantumkan nomor versi di aplikasi, misalnya di halaman About.</li>
<li>membuat rekap perubahan yang terjadi sejak rilis sebelumnya</li>
<li>membuat tag di version control database</li>
</ul>


<p>Semua kegiatan di atas dapat dioptimasi dengan tools misalnya <a href="http://maven.apache.org/plugins/maven-release-plugin/" title="Maven Release Plugin">maven-release-plugin</a>. Cara pakainya bisa dilihat <a href="http://java.dzone.com/articles/automating-releases-maven-0">di sini</a>. Tapi beberapa orang melihat bahwa maven-release-plugin ini tidak memenuhi kebutuhannya, sehingga dia pakai <a href="http://www.axelfontaine.com/2011/01/maven-releases-on-steroids-adios.html">cara yang lain</a>.</p>

<p>Di ArtiVisi, kita sudah mencoba maven-release-plugin, dan berpendapat bahwa dia <a href="http://www.sonatype.com/people/2011/01/using-the-maven-release-plugin-things-to-know/">terlalu kaku</a> sehingga sulit dikonfigurasi agar sesuai dengan kebutuhan kita. Akhirnya kita menggunakan cara manual dengan prosedur sebagai berikut:</p>

<h2>Prosedur Rilis ArtiVisi</h2>

<p>Contoh skenario :</p>

<ul>
<li>Rilis sebelumnya : <code>1.2.0</code></li>
<li>Rilis sekarang : <code>1.2.1</code></li>
</ul>


<p>Langkah-langkah melakukan rilis :</p>

<ol>
<li><p>Generate Changelog dengan perintah <code>git shortlog 1.2.0..HEAD</code></p></li>
<li><p>Copy paste output dari langkah 1 ke dalam release notes.</p></li>
<li><p>Naikkan version number di dalam source code menggunakan Eclipse. Search file <code>pom.xml</code>, find <code>1.2.0</code> dan replace menjadi <code>1.2.1</code>.</p></li>
<li><p>Save semua file, kemudian commit ke Git dengan perintah <code>git commit -m "release 1.2.1"</code></p></li>
<li><p>Buat tag di Git dengan perintah <code>git tag -a -F RELEASE.txt 1.2.1</code></p></li>
</ol>


<h1>Penutup</h1>

<p>Demikianlah penjelasan tentang serba-serbi release management dalam software development. Mudah-mudahan bisa membuat project dan produk yang kita hasilkan lebih mudah dikelola.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Terima kasih Wordpress]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/terima-kasih-wordpress/"/>
    <updated>2012-08-09T13:54:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/terima-kasih-wordpress</id>
    <content type="html"><![CDATA[<p>Sejak pertama saya membuat blog, aplikasi yang saya gunakan adalah <a href="http://www.wordpress.org">Wordpress</a>. Aplikasi Wordpress sangat mudah digunakan dan banyak fiturnya. Selain itu, themes gratisan di internet juga berlimpah ruah, sehingga kita bisa ganti tampilan setiap hari kalau mau.</p>

<p>Walaupun demikian, zaman berganti, dan cara kita bekerja juga berubah. Saya saat ini lebih banyak berkutat di pemrograman dengan workflow sebagai berikut :</p>

<ol>
<li>Buka text editor</li>
<li>Edit source code</li>
<li>Jalankan di local dan test</li>
<li>Kalau sudah ok, simpan di version control (commit)</li>
<li>Ulangi ke langkah 2 sampai selesai</li>
<li>Begitu sudah siap untuk sharing hasil pekerjaan, upload (push) perubahan ke version control pusat.</li>
</ol>


<p>Workflow ini sayangnya tidak dapat dilakukan untuk menulis blog. Workflow saya dalam menulis blog biasanya seperti ini:</p>

<ol>
<li>Buka text editor</li>
<li>Ketik dalam format text file biasa, dengan menggunakan HTML tag bila perlu</li>
<li>Simpan di folder Dropbox selama masih draft</li>
<li>Setelah siap dipublish, buka Wordpress di browser</li>
<li>Login ke Wordpress</li>
<li>Create New Post</li>
<li>Copy - Paste dari text editor</li>
<li>Preview dan rapikan lagi</li>
<li>Publish</li>
</ol>


<p>Seperti bisa kita lihat, dengan workflow di atas, praktis fitur-fitur Wordpress yang serba canggih tidak termanfaatkan. Oleh karena itu, sudah tiba saatnya untuk mencari aplikasi blogging yang <strong>lebih sedikit</strong> fiturnya. Biasanya orang mengganti aplikasi dengan yang lebih banyak fiturnya, tapi kali ini saya melakukan hal yang sebaliknya.</p>

<!--more-->


<p>Setelah mencari berbagai alternatif, pilihan jatuh ke <a href="https://github.com/mojombo/jekyll/">Jekyll</a>. Jekyll adalah static content generator. Kita menulis artikel dalam format <a href="http://daringfireball.net/projects/markdown/">Markdown</a>, yaitu text file biasa dengan sedikit markup yang enak dilihat mata. Kalau kita pernah mengedit wiki, format Markdown tidak asing lagi bagi kita.</p>

<p>Cara kerja Jekyll berbeda dengan aplikasi blog atau CMS pada umumnya. Kalau kita menggunakan Wordpress, Joomla, Drupal, dsb, artikel kita akan disimpan di database. Berdasarkan URL atau link yang diklik pengunjung, aplikasi CMS akan mencarikan artikel di database, memproses formattingnya, dan menampilkan ke browser. Aplikasi CMS biasanya kita instal di server kita di internet, sehingga server kita tersebut harus mendukung bahasa pemrograman yang digunakan CMS dan juga harus memiliki database server. Sebagai contoh, untuk menjalankan Wordpress, server kita harus bisa PHP dan memiliki MySQL.</p>

<p>Berbeda dengan Wordpress, Joomla, Drupal, dan CMS pada umumnya, blog yang dibuat dengan Jekyll tidak dynamic. Semua variabel dan logika looping diproses di komputer kita sendiri. Hasil pemrosesan ini menghasilkan file HTML yang sudah jadi. File HTML inilah yang kita upload ke server. Dengan demikian, di dalam server semua file bersifat static.</p>

<p>Ada beberapa konsekuensi dari static website seperti ini.
Sisi positifnya :</p>

<ul>
<li>kebutuhan server menjadi lebih sederhana, tidak perlu lagi PHP dan MySQL</li>
<li>halaman artikel bisa ditampilkan dengan lebih cepat karena tidak perlu query dan pemrosesan</li>
<li>karena tidak ada query dan proses, mau berapapun request per detik tidak terlalu membebani CPU/RAM/Disk</li>
<li>anti dihack, kecuali sistem operasinya yang ditembus. Kalau kita pakai Wordpress dkk, kita harus rajin upgrade untuk menambal bug security yang baru saja difix.</li>
</ul>


<p>Sisi negatifnya :</p>

<ul>
<li>tidak bisa menampung komentar. Ini saya atasi dengan Facebook Comment.</li>
</ul>


<p>Nah, karena positifnya lebih banyak dari negatifnya, maka saya putuskan untuk migrasi.</p>

<p>Saya tidak menggunakan Jekyll yang aslinya, melainkan framework yang dibuat di atas Jekyll. Ada beberapa pilihan, misalnya <a href="http://jekyllbootstrap.com/">Jekyll Bootstrap (JB)</a>, <a href="http://ruhoh.com/">Ruhoh</a>, dan <a href="http://octopress.org">Octopress</a>. Ruhoh rupanya dibuat oleh orang yang sama dengan pembuat JB karena dia sudah bosan dengan JB, dan nampaknya dia juga sedang sibuk sehingga Ruhoh juga tidak dimaintain. Jadilah pilihan jatuh ke Octopress.</p>

<p>Octopress memiliki berbagai fitur, diantaranya:</p>

<ul>
<li>Source code formatting. Ini adalah fitur yang sulit digunakan di Wordpress. Harus instal berbagai plugin dan sering berantakan tampilannya. Ini menyebabkan saya harus menggunakan <a href="http://gist.github.com">Gist</a>.</li>
<li>Deploy script ke Github, Heroku, dan rsync. Dengan fitur ini, saya bisa membuat <a href="http://endymuhardin.github.com">mirror blog saya di Github</a>.</li>
<li>Berbagai plugin yang sudah disertakan secara built in, misalnya tag khusus untuk image dan video.</li>
</ul>


<p>Proses migrasi berjalan sebagai berikut :</p>

<ol>
<li>Setup Octopress</li>
<li>Customize theme</li>
<li>Unduh artikel lama di Wordpress menggunakan <a href="https://github.com/thomasf/exitwp/">exitwp.py</a></li>
<li>Bersihkan beberapa tag yang tidak kompatibel, diantaranya tabel, gist, dan image</li>
<li>Pindahkan artikel ke Octopress</li>
<li>Generate dan deploy</li>
</ol>


<h1>Setup Octopress</h1>

<p>Octopress disiapkan dengan beberapa langkah berikut :</p>

<ol>
<li>Install Ruby dengan RVM</li>
<li>Install Jekyll</li>
<li>Clone repository Octopress</li>
<li>Konfigurasi Octopress</li>
</ol>


<p>Ada beberapa konfigurasi yang saya lakukan, yaitu :</p>

<h2>Informasi Umum</h2>

<figure class='code'><figcaption><span>_config.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">url</span><span class="p">:</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">endy</span><span class="o">.</span><span class="n">artivisi</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">blog</span>
</span><span class='line'><span class="n">title</span><span class="p">:</span> <span class="no">Living</span> <span class="n">life</span> <span class="ow">and</span> <span class="n">make</span> <span class="n">it</span> <span class="n">better</span>
</span><span class='line'><span class="n">subtitle</span><span class="p">:</span> <span class="n">life</span><span class="p">,</span> <span class="n">learn</span><span class="p">,</span> <span class="n">contribute</span>
</span><span class='line'><span class="n">author</span><span class="p">:</span> <span class="no">Endy</span> <span class="no">Muhardin</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Permalink</h2>

<p>Supaya sama dengan URL blog lama, format URL di Octopress juga harus disesuaikan sbb :</p>

<figure class='code'><figcaption><span>_config.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">permalink</span><span class="p">:</span> <span class="sr">/:categories/</span><span class="ss">:title</span><span class="o">/</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Pagination</h2>

<p>Di halaman pertama cukup tampilkan 3 entri terbaru. Di sidebar, tampilkan 10 link artikel terakhir.</p>

<figure class='code'><figcaption><span>_config.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">paginate</span><span class="p">:</span> <span class="mi">3</span>
</span><span class='line'><span class="n">recent_posts</span><span class="p">:</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Customize Theme</h1>

<p>Supaya tidak keliatan seragam, saya mencari theme untuk Octopress. Sejauh ini baru menemukan <a href="https://github.com/amelandri/darkstripes">Darkstripes</a>, jadi langsung saja dipasang.</p>

<h1>Mengolah artikel lama</h1>

<p>Sebetulnya ada beberapa cara untuk memigrasi artikel lama. Saya menggunakan exitwp yang nampaknya lebih mudah. Berikut langkah-langkahnya :</p>

<ol>
<li>Export dulu artikel lama dari Wordpress ke format XML.</li>
<li>Jalankan exitwp.py untuk mengkonversi ke format markdown.</li>
</ol>


<h2>Memproses tag image</h2>

<p>Selanjutnya, saya harus membersihkan tag image dan caption bawaan Wordpress, karena tidak bisa tampil dengan baik. Saya menggunakan perintah sed di linux agar bisa memproses banyak file sekaligus.</p>

<p>Berikut perintah untuk memperbaiki tag image yang tadinya seperti ini <code>![Synergy Screenshot](/images/uploads/2006/05/synergy.gif)</code> menjadi seperti ini <code>{% img /uploads/2006/05/synergy.gif Synergy Screenshot %} </code>, saya gunakan perintah berikut :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>find . -name <span class="s2">&quot;*.markdown&quot;</span> -print | xargs sed -i <span class="s2">&quot;s|\[!\[\(.*\)\](\(.*\))\](\(.*\))|{% img \2 \1 %}|g&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tag caption juga harus dihilangkan, berikut perintahnya:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>find . -name <span class="s2">&quot;*.markdown&quot;</span> -print | xargs sed -i <span class="s2">&quot;s|\[caption.*\]\(.*\)\[/caption\]|\1|g&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Secara default, exitwp akan menghasilkan tag image dengan URL lengkap, misalnya <code>http://endy.artivisi.com/blog/wp-content|/images/uploads/2006/05/synergy.gif</code> dan masih mengarah ke Wordpress. Saya ingin mengubah ini menjadi URL relatif, yaitu <code>/images/uploads/2006/05/synergy.gif</code></p>

<p>Berikut perintahnya :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>find . -name <span class="s2">&quot;*.markdown&quot;</span> -print | xargs sed -i <span class="s2">&quot;s|http://endy.artivisi.com/blog/wp-content|/images|g&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Memproses tag gist</h2>

<p>Seperti saya tuliskan di sini, saya menggunakan plugin Wordpress untuk <a href="http://endy.artivisi.com/blog/Aplikasi/menggunakan-gist/">menampilkan Gist</a>. Octopress sudah memiliki dukungan sendiri terhadap Gist, sehingga harus ada proses konversi. Berikut perintahnya :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>find . -name <span class="s2">&quot;*.markdown&quot;</span> -print | xargs sed -i <span class="s2">&quot;s|\[gist id=\(.*\) file=\(.*\)\]|{% gist \1 \2 %}|g&quot;</span>
</span><span class='line'>find . -name <span class="s2">&quot;*.markdown&quot;</span> -print | xargs sed -i <span class="s2">&quot;s| bump=.||g&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Facebook Comment</h1>

<p>Untuk menggantikan fitur komentar, ada beberapa alternatif yang bisa digunakan, diantaranya :</p>

<ul>
<li>Disqus</li>
<li>Facebook</li>
<li>Tanpa comment</li>
</ul>


<p>Melihat audiens blog yang rata-rata memiliki akun Facebook, maka baiklah kita pilih Facebook saja. Cara mengaktifkannya bisa dibaca <a href="http://blog.grambo.me.uk/blog/2012/02/20/adding-facebook-comments-to-octopress/">di tutorial ini</a>. Ada sedikit bug disana, yaitu pada file <code>post.html</code> dan <code>page.html</code>. Harusnya seperti ini :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="n">site</span><span class="o">.</span><span class="n">facebook_appid</span> <span class="ow">and</span> <span class="n">page</span><span class="o">.</span><span class="n">comments</span> <span class="o">==</span> <span class="kp">true</span> <span class="sx">%}</span>
</span><span class='line'><span class="sx">  &lt;section&gt;</span>
</span><span class='line'><span class="sx">    &lt;h1&gt;Comments&lt;/h1&gt;</span>
</span><span class='line'><span class="sx">    &lt;div id=&quot;facebook_comments&quot; aria-live=&quot;polite&quot;&gt;</span>
</span><span class='line'><span class="sx">      {% include post/facebook_comments.html %}</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span><span class='line'><span class="sr">  &lt;/se</span><span class="n">ction</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">endif</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Penutup</h1>

<p>Sebetulnya sedih juga berpisah dengan Wordpress yang telah setia menemani hampir 7 tahun lamanya, tapi life must go on. Wordpress, terima kasih atas kebersamaan selama 7 tahun ini. Mudah-mudahan engkau akan berevolusi lebih baik lagi sehingga di lain waktu kita bisa bersama lagi.</p>
]]></content>
  </entry>
  
</feed>
