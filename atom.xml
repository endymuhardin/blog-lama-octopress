<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Living life and make it better]]></title>
  <link href="http://software.endy.muhardin.com/atom.xml" rel="self"/>
  <link href="http://software.endy.muhardin.com/"/>
  <updated>2013-10-30T10:30:15+07:00</updated>
  <id>http://software.endy.muhardin.com/</id>
  <author>
    <name><![CDATA[Endy Muhardin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mendapatkan Informasi System dengan Java]]></title>
    <link href="http://software.endy.muhardin.com/java/mendapatkan-informasi-system-dengan-java/"/>
    <updated>2013-10-29T09:52:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/mendapatkan-informasi-system-dengan-java</id>
    <content type="html"><![CDATA[<p>Pada salah satu project yang sedang saya kerjakan, ada kebutuhan untuk mendapatkan informasi mengenai sistem dimana aplikasi diinstal. Informasi yang dibutuhkan antara lain:</p>

<ul>
<li>Sistem Operasi</li>
<li>Kapasitas Memori</li>
<li>Kapasitas Disk</li>
<li>Jumlah Network Interface</li>
<li>MAC Address dari masing-masing Network Interface</li>
</ul>


<p>Dalam artikel ini, kita akan membahas cara mendapatkan berbagai informasi tersebut. Seperti biasa, kode program bisa diambil di <a href="https://github.com/endymuhardin/belajar-java-sysinfo">repository Github saya</a>.</p>

<!--more-->


<h2>Sistem Operasi</h2>

<p>Informasi tentang Sistem Operasi dapat diperoleh dengan menggunakan class java.lang.System. Dari class ini kita bisa menggunakan method getProperty yang berisi berbagai informasi tentang sistem. Daftar property yang tersedia dapat dilihat di <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/System.html#getProperties()">halaman dokumentasinya</a>. Property yang berkaitan dengan sistem operasi adalah:</p>

<ul>
<li>os.name</li>
<li>os.version</li>
<li>os.arch</li>
</ul>


<p>Berikut contoh penggunaannya</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">os</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;os.name&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">os</span> <span class="o">+=</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;os.version&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">os</span> <span class="o">+=</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;os.arch&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">os</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Di laptop saya, outputnya seperti ini:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">Linux:</span><span class="mf">3.11</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="nl">generic:</span><span class="n">amd64</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Kapasitas Memori</h2>

<p>Aplikasi Java berjalan di atas JVM, tidak langsung di atas sistem operasi. Untuk urusan memori, ada dua jenis memori yang kita kenal, yaitu memori yang disediakan untuk JVM dan memori yang tersedia di komputer (RAM). Hal ini sering menimbulkan kebingungan di programmer Java pemula, yaitu</p>

<blockquote><p>Komputer saya RAM-nya 8 GB, kenapa aplikasi Java saya cuma bisa pakai 2 GB?</p></blockquote>

<p>Biasanya penyebabnya adalah karena memori yang dialokasikan untuk JVM hanya 2 GB.</p>

<h3>Memori Fisik (RAM)</h3>

<p>Untuk mendapatkan informasi tentang memori fisik yang tersedia, kita gunakan class <code>com.sun.management.OperatingSystemMXBean</code>. Berikut cara mendapatkan object dari class tersebut.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">OperatingSystemMXBean</span> <span class="n">osBean</span>
</span><span class='line'>    <span class="o">=</span> <span class="o">(</span><span class="n">OperatingSystemMXBean</span><span class="o">)</span> <span class="n">ManagementFactory</span><span class="o">.</span><span class="na">getOperatingSystemMXBean</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Setelah itu, kita bisa gunakan untuk mendapatkan informasi memori sebagai berikut</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Long</span> <span class="n">memory</span> <span class="o">=</span> <span class="n">osBean</span><span class="o">.</span><span class="na">getTotalPhysicalMemorySize</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dokumentasi lengkap dari class tersebut bisa dibaca <a href="http://docs.oracle.com/javase/7/docs/jre/api/management/extension/com/sun/management/OperatingSystemMXBean.html">di sini</a>.</p>

<h3>Memori JVM</h3>

<p>Ada dua variabel yang menginformasikan memori JVM, yaitu memori yang dialokasikan, dan memori yang terpakai. Aplikasi kita boleh menggunakan memori maksimal sebanyak yang dialokasikan. Tapi aplikasi belum tentu menggunakan semuanya, hanya sebagian saja yang terpakai. Informasi memori JVM bisa didapatkan dari class <code>java.lang.Runtime</code>.</p>

<p>Berikut cara untuk mendapatkan memori yang dialokasikan untuk JVM</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Long</span> <span class="n">totalMemory</span> <span class="o">=</span> <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">totalMemory</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sedangkan untuk mendapatkan memori terpakai, kita kurangi <code>totalMemory</code> dengan <code>freeMemory</code> (memori yang tidak terpakai)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Long</span> <span class="n">freeMemory</span> <span class="o">=</span> <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">freeMemory</span><span class="o">();</span>
</span><span class='line'><span class="n">Long</span> <span class="n">terpakai</span> <span class="o">=</span> <span class="n">totalMemory</span> <span class="o">-</span> <span class="n">freeMemory</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lebih lengkapnya bisa dilihat langsung di <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Runtime.html#totalMemory()">dokumentasi class <code>Runtime</code></a></p>

<h2>Kapasitas Storage</h2>

<p>Informasi tentang storage bisa didapatkan di class <code>java.io.File</code>. Pertama, kita buat dulu objek <code>File</code> yang mengarah ke partisi yang ingin kita ketahui informasinya.</p>

<p>Untuk Windows, gunakan <code>C:</code>, <code>D:</code>, dan seterusnya.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">File</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;C:&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Untuk Linux, gunakan <code>/</code>, <code>/home</code>, dan sebagainya.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">File</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;/home&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ada beberapa method yang disediakan yaitu:</p>

<ul>
<li>totalSpace() : kapasitas storage</li>
<li>usableSpace() : kapasitas yang bisa digunakan</li>
<li>freeSpace() : ruang kosong</li>
</ul>


<p>Kita tentu bertanya-tanya, apa bedanya <code>usable</code> dan <code>free</code>? Free adalah ruang yang tidak terpakai, tapi belum tentu boleh dipakai karena masalah permission, ijin akses, dan sebagainya. Usable adalah ruang yang boleh dipakai. Kadang-kadang, nilai <code>usable</code> sama dengan nilai <code>free</code>. Penjelasannya bisa dibaca <a href="http://docs.oracle.com/javase/7/docs/api/java/io/File.html#getUsableSpace(">di sini</a>).</p>

<p>Cara pakainya tidak sulit.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Long</span> <span class="n">totalSpace</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">getTotalSpace</span><span class="o">();</span>
</span><span class='line'><span class="n">Long</span> <span class="n">usableSpace</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">getUsableSpace</span><span class="o">();</span>
</span><span class='line'><span class="n">Long</span> <span class="n">freeSpace</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">getFreeSpace</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Network Interface</h2>

<p>Informasi tentang network interface bisa didapatkan di <code>java.net.NetworkInterface</code>. Pertama, kita dapatkan dulu seluruh interface yang ada di komputer. Satu komputer (apalagi server) biasa memiliki lebih dari satu interface. Laptop saja biasanya punya dua, ethernet dan wifi.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Enumeration</span><span class="o">&lt;</span><span class="n">NetworkInterface</span><span class="o">&gt;</span> <span class="n">semuaInterface</span> <span class="o">=</span> <span class="n">NetworkInterface</span><span class="o">.</span><span class="na">getNetworkInterfaces</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Setelah itu, kita bisa melakukan loop untuk mendapatkan jumlah interface, nama interface, dan MAC addressnya.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Integer</span> <span class="n">jumlah</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="k">while</span><span class="o">(</span><span class="n">semuaInterface</span><span class="o">.</span><span class="na">hasMoreElements</span><span class="o">()){</span>
</span><span class='line'>    <span class="n">NetworkInterface</span> <span class="n">ni</span> <span class="o">=</span> <span class="n">semuaInterface</span><span class="o">.</span><span class="na">nextElement</span><span class="o">();</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Nama Interface : &quot;</span><span class="o">+</span><span class="n">ni</span><span class="o">.</span><span class="na">getDisplayName</span><span class="o">());</span>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">mac</span> <span class="o">=</span> <span class="n">ni</span><span class="o">.</span><span class="na">getHardwareAddress</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">mac</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>        <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">mac</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%02X%s&quot;</span><span class="o">,</span> <span class="n">mac</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">mac</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">?</span> <span class="s">&quot;-&quot;</span> <span class="o">:</span> <span class="s">&quot;&quot;</span><span class="o">));</span>     
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;MAC Address : &quot;</span><span class="o">+</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">jumlah</span><span class="o">++;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Jumlah interface : &quot;</span><span class="o">+</span><span class="n">jumlah</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Demikianlah cara mendapatkan informasi tentang sistem tempat aplikasi Java kita dijalankan.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Teknik Menggunakan Google]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/teknik-menggunakan-google/"/>
    <updated>2013-10-04T22:59:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/teknik-menggunakan-google</id>
    <content type="html"><![CDATA[<p>Pada <a href="http://software.endy.muhardin.com/life/otodidak/">artikel terdahulu</a>, sudah dibahas bahwa kemampuan terpenting yang harus dimiliki profesional IT (khususnya programmer) adalah kemampuan otodidak.</p>

<p>Kali ini, kita akan bahas kemampuan terpenting kedua yang harus dimiliki, yaitu teknik mendayagunakan saudara jauh kita yaitu Paman Google.</p>

<p>Seringkali kita temui sergahan para senior di berbagai forum ketika ada <em>newbie</em> yang bertanya</p>

<blockquote><p>Google dulu dong sebelum tanya !!!</p></blockquote>

<p>Tapi namanya juga <em>newbie</em>, pastinya gak tau cara googling yang efektif. Kalau dia mahir pakai Google, pasti sudah bukan <em>newbie</em> lagi namanya kan? ;)</p>

<p>Nah, begini caranya menggunakan Google.</p>

<!--more-->


<h2>Kasus Sederhana</h2>

<p>Seringkali terjadi, kita mengikuti diskusi di berbagai forum dan kemudian menemui istilah-istilah aneh yang baru kita dengar. Ini lazim terjadi kalau kita mengikuti komunitas yang baru, misalnya programmer ikut komunitas fotografi.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/10/teknik-menggunakan-google/php-wtf-2.png" title="PHP??? WTF!!!" ></p>

<p>Karena penasaran buru-buru pengen tau, secara refleks kita akan klik kotak komentar, lalu mengetik disana</p>

<blockquote><p>PHP apaan sih ??</p></blockquote>

<p><strong>STOP !!! Jangan lakukan !!!</strong></p>

<p>Itu hanya akan menunjukkan identitas kita sebagai manusia jadul yang <em>kamseupay</em>. Ada cara lain yang lebih berpendidikan, yaitu buka tab baru, lalu kita ketik disana.</p>

<p>Untuk kasus sederhana seperti ini, jawabannya bisa langsung ditemukan. Berikut contoh screenshot yang saya buat ketika ada orang yang menanyakan</p>

<blockquote><p>Apa itu OO Calc ?</p></blockquote>

<p>di sebuah <a href="https://www.facebook.com/groups/ForumJavaIndonesia/10151680460748017/?comment_id=10151680514093017">forum di Facebook</a>.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/10/teknik-menggunakan-google/tanya-paman-google.png" title="Apa itu OO Calc?" ></p>

<p>Semua jawaban ada di halaman tersebut, tanpa kita klik ke halaman berikutnya semua sudah tersaji di sana.</p>

<h2>Kasus Kompleks</h2>

<p>Nah sebagai programmer, tentu masalah yang kita hadapi jauh lebih rumit daripada sekedar <code>Apa itu OO Calc ?</code>. Kita ambil contoh lain di forum yang sama.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/10/teknik-menggunakan-google/arccot-java-00.png" title="Bagaimana menghitung arccot di Java?" ></p>

<p>TS menanyakan tentang suatu perhitungan matematika yang namanya <code>ARCCOT</code>. Melihat posting di atasnya, saya mendapatkan petunjuk bahwa beliau sedang membicarakan tentang <em>trigonometri</em>. Waduh, terakhir saya dengar istilah ini, teknologi <code>pager</code> belum lagi ditemukan orang. Nah, saya yakin banyak pembaca blog ini yang bahkan tidak tahu apa itu <code>pager</code>. Untuk itu, baiklah saya tunjukkan fotonya. Nih dia barangnya.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/10/teknik-menggunakan-google/pager.JPG" title="Pager" >
<img src="http://software.endy.muhardin.com/images/uploads/2013/10/teknik-menggunakan-google/pager_in_hand.jpg" title="Pager dipegang" ></p>

<p>Gambar diambil dari <a href="http://www.pagers.co.uk/shop/">sini</a> dan <a href="http://www.ebay.com/itm/MOTOROLA-ADVISOR-II-VHF-PAGER-143-152-9875-MHz-EMS-FIRE-PAGER-with-ZOOM-/190645429104">sana</a></p>

<p>Masih gak tau juga benda apakah itu? Nah, cukuplah menjadi ilustrasi seberapa jadulnya urusan trigonometri ini buat saya. Pada masa itu, bahkan Bill Gates belum lagi menciptakan Windows.</p>

<p>Lalu, apa yang harus dilakukan? Ya tentu saja buka tab baru, ketikkan <code>arccot java</code> di address bar. Ini hasilnya</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/10/teknik-menggunakan-google/arccot-java-01.png" title="Google arccot java" ></p>

<p>Baris ketiga nampaknya menarik, buka di tab baru. Bisa klik kanan lalu <code>Open in new tab</code>, atau klik dengan tombol tengah mouse. Klik tengah ini merupakan fitur andalan pada waktu kita googling. Buka link baris ketiga</p>

<p>Scroll ke bawah, sampai kita menemukan hal yang menarik. Saya menemukan dua, ini yang pertama</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/10/teknik-menggunakan-google/arccot-java-02.png" title="Hasil search halaman pertama jawaban pertama" ></p>

<p>dan scroll lagi ke bawah, dapat jawaban di bawahnya</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/10/teknik-menggunakan-google/arccot-java-03.png" title="Hasil search halaman pertama jawaban kedua" ></p>

<p>Waduh, dia menjelaskan tentang apa itu <code>arccot</code>, dan cara menghitungnya. Bahkan ada link ke Wikipedia segala. Nah, sebetulnya ini bukan urusan saya, tapi urusan <code>Irfan Rockability</code> yang bertanya di Facebook. Jadi saya tidak tertarik untuk belajar lagi trigonometri dari Wikipedia. Mari kita buka link di jawaban sebelumnya.</p>

<blockquote><p>This is it !! Inilah nasi selada ala chef Farah Quinn !!! It&#8217;s so yummy</p></blockquote>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/10/teknik-menggunakan-google/farah-quinn.jpg" title="This is it !!" ></p>

<p>Foto diambil <a href="http://sidomi.com/68276/ala-chef-nya-farah-quinn-kena-tegur-kpi/">dari sini</a>. Kurang jelas mana yang yummy, nasi selada atau orangnya ;)</p>

<p>Lho kok trigonometri yummy begitu? Nah, maksud saya, jawabannya sudah tersaji dengan lengkap di halaman yang kita buka tadi.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/10/teknik-menggunakan-google/arccot-java-04.png" title="Jawaban akhir" ></p>

<h2>Kesimpulan</h2>

<p>Sekarang ini jaman mudah. Mulai dari hal sederhana seperti <code>Apa itu OO Calc</code> sampai <code>Bagaimana cara menghitung arc cotangent dengan Java</code> sudah tersedia jawabannya di internet. Kadangkala langsung ketemu di halaman pertama. Kali lain harus melalui membuka 3 tab dan melalui 8 langkah. 3 tab itu bukan angka yang besar.</p>

<p>Jadi jangan malas, rajin-rajin Google.</p>

<blockquote><p>Ingatlah bahwa skill memilih keyword pencarian di Google akan berdampak signifikan terhadap perkembangan karir Anda. Skill ini hanya bisa didapatkan melalui <a href="http://software.endy.muhardin.com/life/lan-na-zha/">GongFu</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrasi Database dengan Liquibase]]></title>
    <link href="http://software.endy.muhardin.com/java/migrasi-database-dengan-liquibase/"/>
    <updated>2013-10-01T21:22:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/migrasi-database-dengan-liquibase</id>
    <content type="html"><![CDATA[<p>Salah satu kepuasan kita sebagai programmer adalah pada waktu aplikasi yang kita buat digunakan banyak user dan menghasilkan banyak manfaat bagi mereka. Sebagai konsekuensinya, akan banyak permintaan tambahan dari user untuk menambah fitur ataupun mengubah fitur yang sudah ada supaya makin nyaman digunakan.</p>

<p>Seringkali terjadi, perubahan yang diminta ini akan menyebabkan berubahnya skema database. Ini merupakan hal yang wajar dan umum terjadi, sehingga kita perlu menyiapkan mental untuk menerima kondisi ini sebagai sesuatu yang lumrah dan tidak mengerikan.</p>

<p>Tools yang sering saya gunakan untuk mengurus perubahan (evolusi) skema database adalah <a href="http://www.liquibase.org">Liquibase</a>. Pada <a href="http://software.endy.muhardin.com/java/membuat-changelog-liquibase/">artikel terdahulu</a>, kita sudah membahas cara menggunakan Liquibase untuk mengkonversi skema database menjadi XML supaya bisa dikelola di version control. Kali ini, kita akan menggunakan Liquibase untuk melakukan migrasi dari skema database antar versi aplikasi.</p>

<!--more-->


<p>Studi kasusnya sebagai berikut. Misalnya kita punya aplikasi versi <code>1.0</code> yang sudah berjalan di production (live) dan digunakan user. Aplikasi versi <code>1.0</code> ini kita kembangkan selama beberapa minggu &#8211;diberikan tambahan fitur, bug diperbaiki, tampilan diperindah, dan berbagai peningkatan lainnya&#8211; menjadi versi <code>2.0</code>. Antar kedua versi ini terjadi perubahan skema database. Kita ingin membuat script SQL untuk mengkonversi (migrasi) skema database versi <code>1.0</code> menjadi skema versi <code>2.0</code>. Untuk keperluan itu, kita gunakan Liquibase.</p>

<p>Liquibase memiliki kemampuan untuk membandingkan (diff) dua database, kemudian membuatkan file untuk migrasi dari skema yang satu (versi <code>1.0</code>) menjadi skema lainnya (versi <code>2.0</code>).</p>

<h2>Menyiapkan kedua database</h2>

<p>Langkah pertama adalah menyiapkan kedua versi database. Biasanya saya membuat dump dari database production (skema versi <code>1.0</code>), kemudian di-restore di tempat lain (misalnya di laptop). Kemudian saya juga menyiapkan database development yang menggunakan skema versi <code>2.0</code>.</p>

<p>Agar lebih jelas, kita namakan saja database yang diambil dari production dengan nama <code>aplikasi_v_1_0</code> dan database baru dengan nama <code>aplikasi_v_2_0</code>. Berikut adalah informasi koneksi JDBC untuk kedua database</p>

<h3>aplikasi_v_1_0</h3>

<ul>
<li>jdbc.driver = <code>com.mysql.jdbc.Driver</code></li>
<li>jdbc.url = <code>jdbc:mysql://localhost/aplikasi_v_1_0</code></li>
<li>jdbc.username = <code>root</code></li>
<li>jdbc.password = <code>coba</code></li>
</ul>


<h3>aplikasi_v_2_0</h3>

<ul>
<li>jdbc.driver = <code>com.mysql.jdbc.Driver</code></li>
<li>jdbc.url = <code>jdbc:mysql://localhost/aplikasi_v_2_0</code></li>
<li>jdbc.username = <code>root</code></li>
<li>jdbc.password = <code>coba</code></li>
</ul>


<h2>Konfigurasi Liquibase</h2>

<p>Seperti di artikel terdahulu, kita membutuhkan tiga file yang kita letakkan di folder yang sama, yaitu:</p>

<ul>
<li><code>mysql-connector-java-5.1.25.jar</code> : driver database</li>
<li><code>liquibase-core-2.0.5.jar</code> : aplikasi liquibase</li>
<li><code>liquibase.properties</code> : konfigurasi liquibase</li>
</ul>


<p>Sesuaikan kedua file jar dengan versi yang terbaru.</p>

<p>File <code>liquibase.properties</code> berisi konfigurasi yang dibutuhkan oleh liquibase. Berikut isinya</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>driver: com.mysql.jdbc.Driver
</span><span class='line'>classpath: mysql-connector-java-5.1.25.jar
</span><span class='line'>url: jdbc:mysql://localhost/aplikasi_v_2_0
</span><span class='line'>username: root
</span><span class='line'>password: admin
</span><span class='line'>referenceUrl: jdbc:mysql://localhost/aplikasi_v_1_0
</span><span class='line'>referenceUsername: root
</span><span class='line'>referencePassword: admin
</span><span class='line'>changeLogFile: changelog.xml</span></code></pre></td></tr></table></div></figure>


<p>Berikut penjelasan dari isi file:</p>

<ul>
<li>driver: JDBC driver sesuai merek database yang kita gunakan</li>
<li>classpath: lokasi file JDBC driver</li>
<li>url: JDBC url untuk database tujuan (versi <code>2.0</code>)</li>
<li>username: username untuk database tujuan (versi <code>2.0</code>)</li>
<li>password: password untuk database tujuan (versi <code>2.0</code>)</li>
<li>referenceUrl: JDBC url untuk database asal (versi <code>1.0</code>)</li>
<li>referenceUsername: username untuk database asal (versi <code>1.0</code>)</li>
<li>referencePassword: password untuk database asal (versi <code>1.0</code>)</li>
<li>changeLogFile: nama file tujuan untuk menulis hasil perbandingan kedua database</li>
</ul>


<h2>Menjalankan Liquibase : Membuat file changelog</h2>

<p>Pertama, kita buat dulu file changelog sesuai format Liquibase. Commandnya adalah sebagai berikut:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -jar liquibase-core-2.0.5.jar diffChangeLog</span></code></pre></td></tr></table></div></figure>


<p>Berikut output dari perintah di atas</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INFO 10/1/13 9:11 PM:liquibase: Reading tables for
</span><span class='line'> root@localhost @ jdbc:mysql://localhost/aplikasi_v_1_0 ...
</span><span class='line'>INFO 10/1/13 9:11 PM:liquibase: Reading views for
</span><span class='line'> root@localhost @ jdbc:mysql://localhost/aplikasi_v_1_0 ...
</span><span class='line'>INFO 10/1/13 9:11 PM:liquibase: Reading foreign keys for
</span><span class='line'> root@localhost @ jdbc:mysql://localhost/aplikasi_v_1_0 ...
</span><span class='line'>INFO 10/1/13 9:11 PM:liquibase: Reading primary keys for
</span><span class='line'> root@localhost @ jdbc:mysql://localhost/aplikasi_v_1_0 ...
</span><span class='line'>INFO 10/1/13 9:11 PM:liquibase: Reading columns for
</span><span class='line'> root@localhost @ jdbc:mysql://localhost/aplikasi_v_1_0 ...
</span><span class='line'>INFO 10/1/13 9:11 PM:liquibase: Reading unique constraints for
</span><span class='line'> root@localhost @ jdbc:mysql://localhost/aplikasi_v_1_0 ...
</span><span class='line'>INFO 10/1/13 9:11 PM:liquibase: Reading indexes for
</span><span class='line'> root@localhost @ jdbc:mysql://localhost/aplikasi_v_1_0 ...
</span><span class='line'>INFO 10/1/13 9:11 PM:liquibase: Sequences not supported for
</span><span class='line'> root@localhost @ jdbc:mysql://localhost/aplikasi_v_1_0 ...
</span><span class='line'>INFO 10/1/13 9:11 PM:liquibase: Reading tables for
</span><span class='line'> root@localhost @ jdbc:mysql://localhost/aplikasi_v_2_0 ...
</span><span class='line'>INFO 10/1/13 9:11 PM:liquibase: Reading views for
</span><span class='line'> root@localhost @ jdbc:mysql://localhost/aplikasi_v_2_0 ...
</span><span class='line'>INFO 10/1/13 9:11 PM:liquibase: Reading foreign keys for
</span><span class='line'> root@localhost @ jdbc:mysql://localhost/aplikasi_v_2_0 ...
</span><span class='line'>INFO 10/1/13 9:11 PM:liquibase: Reading primary keys for
</span><span class='line'> root@localhost @ jdbc:mysql://localhost/aplikasi_v_2_0 ...
</span><span class='line'>INFO 10/1/13 9:11 PM:liquibase: Reading columns for
</span><span class='line'> root@localhost @ jdbc:mysql://localhost/aplikasi_v_2_0 ...
</span><span class='line'>INFO 10/1/13 9:11 PM:liquibase: Reading unique constraints for
</span><span class='line'> root@localhost @ jdbc:mysql://localhost/aplikasi_v_2_0 ...
</span><span class='line'>INFO 10/1/13 9:11 PM:liquibase: Reading indexes for
</span><span class='line'> root@localhost @ jdbc:mysql://localhost/aplikasi_v_2_0 ...
</span><span class='line'>INFO 10/1/13 9:11 PM:liquibase: Sequences not supported for
</span><span class='line'> root@localhost @ jdbc:mysql://localhost/aplikasi_v_2_0 ...
</span><span class='line'>INFO 10/1/13 9:11 PM:liquibase: changelog.xml does not exist, creating
</span><span class='line'>Liquibase 'diffChangeLog' Successful</span></code></pre></td></tr></table></div></figure>


<p>Perintah ini akan menghasilkan file <code>changelog.xml</code> di folder tempat kita berada. File ini berisi perbedaan antar skema versi 1.0 dengan skema versi 2.0. Isinya seperti ini</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;databaseChangeLog</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1380636706862-1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;addColumn</span> <span class="na">tableName=</span><span class="s">&quot;m_customer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;allowed_addresses&quot;</span> <span class="na">type=</span><span class="s">&quot;VARCHAR(255)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/addColumn&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1380636706862-2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;addColumn</span> <span class="na">tableName=</span><span class="s">&quot;m_customer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;deleted&quot;</span> <span class="na">type=</span><span class="s">&quot;BIT&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/addColumn&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1380636706862-3&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;addColumn</span> <span class="na">tableName=</span><span class="s">&quot;m_plan&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;deleted&quot;</span> <span class="na">type=</span><span class="s">&quot;BIT&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/addColumn&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1380636706862-4&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;addColumn</span> <span class="na">tableName=</span><span class="s">&quot;m_provider&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;deleted&quot;</span> <span class="na">type=</span><span class="s">&quot;BIT&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/addColumn&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1380636706862-5&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;addColumn</span> <span class="na">tableName=</span><span class="s">&quot;m_rate&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;deleted&quot;</span> <span class="na">type=</span><span class="s">&quot;BIT&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/addColumn&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1380636706862-6&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;addColumn</span> <span class="na">tableName=</span><span class="s">&quot;m_routing&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;column</span> <span class="na">name=</span><span class="s">&quot;deleted&quot;</span> <span class="na">type=</span><span class="s">&quot;BIT&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;constraints</span> <span class="na">nullable=</span><span class="s">&quot;false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/column&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/addColumn&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1380636706862-7&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dropNotNullConstraint</span> <span class="na">columnDataType=</span><span class="s">&quot;VARCHAR(255)&quot;</span> <span class="na">columnName=</span><span class="s">&quot;bind_password&quot;</span> <span class="na">tableName=</span><span class="s">&quot;m_provider&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;changeSet</span> <span class="na">author=</span><span class="s">&quot;endy (generated)&quot;</span> <span class="na">id=</span><span class="s">&quot;1380636706862-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dropNotNullConstraint</span> <span class="na">columnDataType=</span><span class="s">&quot;VARCHAR(255)&quot;</span> <span class="na">columnName=</span><span class="s">&quot;bind_username&quot;</span> <span class="na">tableName=</span><span class="s">&quot;m_provider&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/changeSet&gt;</span>
</span><span class='line'><span class="nt">&lt;/databaseChangeLog&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kita lihat di atas bahwa antara skema versi <code>1.0</code> dan versi <code>2.0</code> terjadi perubahan sebagai berikut:</p>

<ul>
<li>penambahan kolom <code>allowed_address</code> di tabel <code>m_customer</code></li>
<li>penambahan kolom <code>deleted</code> di berbagai tabel lainnya</li>
<li>menghilangkan constraint <code>NOT NULL</code> di kolom <code>bind_username</code> dan <code>bind_password</code></li>
</ul>


<p>Kita bisa periksa file ini dan sesuaikan bila ada yang kurang tepat.</p>

<h2>Menjalankan Liquibase : Membuat script SQL</h2>

<p>File XML saja tentunya tidak bermanfaat banyak buat kita. Untuk bisa dieksekusi di database production, kita memerlukan script SQL. Untungnya Liquibase punya fitur untuk membuat script SQL. Berikut perintahnya</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>java -jar liquibase-core-2.0.5.jar updateSQL
</span></code></pre></td></tr></table></div></figure>


<p>Outputnya adalah sebagai berikut</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">--  *********************************************************************</span>
</span><span class='line'><span class="c1">--  Update Database Script</span>
</span><span class='line'><span class="c1">--  *********************************************************************</span>
</span><span class='line'><span class="c1">--  Change Log: changelog.xml</span>
</span><span class='line'><span class="c1">--  Ran at: 10/1/13 9:18 PM</span>
</span><span class='line'><span class="c1">--  Against: root@localhost@jdbc:mysql://localhost/aplikasi_v_2_0</span>
</span><span class='line'><span class="c1">--  Liquibase version: 2.0.5</span>
</span><span class='line'><span class="c1">--  *********************************************************************</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--  Lock Database</span>
</span><span class='line'><span class="c1">--  Changeset changelog.xml::1380636706862-1::endy (generated)::(Checksum: 3:87288bc453555824cb2e28ddafed9557)</span>
</span><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">m_customer</span><span class="o">`</span> <span class="k">ADD</span> <span class="o">`</span><span class="n">allowed_addresses</span><span class="o">`</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="o">`</span><span class="n">DATABASECHANGELOG</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">AUTHOR</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">COMMENTS</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">DATEEXECUTED</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">DESCRIPTION</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">EXECTYPE</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">FILENAME</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">ID</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">LIQUIBASE</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">MD5SUM</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">ORDEREXECUTED</span><span class="o">`</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;endy (generated)&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">NOW</span><span class="p">(),</span> <span class="s1">&#39;Add Column&#39;</span><span class="p">,</span> <span class="s1">&#39;EXECUTED&#39;</span><span class="p">,</span> <span class="s1">&#39;changelog.xml&#39;</span><span class="p">,</span> <span class="s1">&#39;1380636706862-1&#39;</span><span class="p">,</span> <span class="s1">&#39;2.0.5&#39;</span><span class="p">,</span> <span class="s1">&#39;3:87288bc453555824cb2e28ddafed9557&#39;</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--  Changeset changelog.xml::1380636706862-2::endy (generated)::(Checksum: 3:27e1f8b069e4471400f3deff5034bca9)</span>
</span><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">m_customer</span><span class="o">`</span> <span class="k">ADD</span> <span class="o">`</span><span class="n">deleted</span><span class="o">`</span> <span class="nb">BIT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="o">`</span><span class="n">DATABASECHANGELOG</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">AUTHOR</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">COMMENTS</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">DATEEXECUTED</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">DESCRIPTION</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">EXECTYPE</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">FILENAME</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">ID</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">LIQUIBASE</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">MD5SUM</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">ORDEREXECUTED</span><span class="o">`</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;endy (generated)&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">NOW</span><span class="p">(),</span> <span class="s1">&#39;Add Column&#39;</span><span class="p">,</span> <span class="s1">&#39;EXECUTED&#39;</span><span class="p">,</span> <span class="s1">&#39;changelog.xml&#39;</span><span class="p">,</span> <span class="s1">&#39;1380636706862-2&#39;</span><span class="p">,</span> <span class="s1">&#39;2.0.5&#39;</span><span class="p">,</span> <span class="s1">&#39;3:27e1f8b069e4471400f3deff5034bca9&#39;</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--  Changeset changelog.xml::1380636706862-3::endy (generated)::(Checksum: 3:14c13dec957537886d6035b32fd4c90c)</span>
</span><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">m_plan</span><span class="o">`</span> <span class="k">ADD</span> <span class="o">`</span><span class="n">deleted</span><span class="o">`</span> <span class="nb">BIT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="o">`</span><span class="n">DATABASECHANGELOG</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">AUTHOR</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">COMMENTS</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">DATEEXECUTED</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">DESCRIPTION</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">EXECTYPE</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">FILENAME</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">ID</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">LIQUIBASE</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">MD5SUM</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">ORDEREXECUTED</span><span class="o">`</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;endy (generated)&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">NOW</span><span class="p">(),</span> <span class="s1">&#39;Add Column&#39;</span><span class="p">,</span> <span class="s1">&#39;EXECUTED&#39;</span><span class="p">,</span> <span class="s1">&#39;changelog.xml&#39;</span><span class="p">,</span> <span class="s1">&#39;1380636706862-3&#39;</span><span class="p">,</span> <span class="s1">&#39;2.0.5&#39;</span><span class="p">,</span> <span class="s1">&#39;3:14c13dec957537886d6035b32fd4c90c&#39;</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--  Changeset changelog.xml::1380636706862-4::endy (generated)::(Checksum: 3:b54952b6be5eb80caf649dc75f974f65)</span>
</span><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">m_provider</span><span class="o">`</span> <span class="k">ADD</span> <span class="o">`</span><span class="n">deleted</span><span class="o">`</span> <span class="nb">BIT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="o">`</span><span class="n">DATABASECHANGELOG</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">AUTHOR</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">COMMENTS</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">DATEEXECUTED</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">DESCRIPTION</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">EXECTYPE</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">FILENAME</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">ID</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">LIQUIBASE</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">MD5SUM</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">ORDEREXECUTED</span><span class="o">`</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;endy (generated)&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">NOW</span><span class="p">(),</span> <span class="s1">&#39;Add Column&#39;</span><span class="p">,</span> <span class="s1">&#39;EXECUTED&#39;</span><span class="p">,</span> <span class="s1">&#39;changelog.xml&#39;</span><span class="p">,</span> <span class="s1">&#39;1380636706862-4&#39;</span><span class="p">,</span> <span class="s1">&#39;2.0.5&#39;</span><span class="p">,</span> <span class="s1">&#39;3:b54952b6be5eb80caf649dc75f974f65&#39;</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--  Changeset changelog.xml::1380636706862-5::endy (generated)::(Checksum: 3:6b840975b06488faa9ec0ed1d3e8d123)</span>
</span><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">m_rate</span><span class="o">`</span> <span class="k">ADD</span> <span class="o">`</span><span class="n">deleted</span><span class="o">`</span> <span class="nb">BIT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="o">`</span><span class="n">DATABASECHANGELOG</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">AUTHOR</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">COMMENTS</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">DATEEXECUTED</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">DESCRIPTION</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">EXECTYPE</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">FILENAME</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">ID</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">LIQUIBASE</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">MD5SUM</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">ORDEREXECUTED</span><span class="o">`</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;endy (generated)&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">NOW</span><span class="p">(),</span> <span class="s1">&#39;Add Column&#39;</span><span class="p">,</span> <span class="s1">&#39;EXECUTED&#39;</span><span class="p">,</span> <span class="s1">&#39;changelog.xml&#39;</span><span class="p">,</span> <span class="s1">&#39;1380636706862-5&#39;</span><span class="p">,</span> <span class="s1">&#39;2.0.5&#39;</span><span class="p">,</span> <span class="s1">&#39;3:6b840975b06488faa9ec0ed1d3e8d123&#39;</span><span class="p">,</span> <span class="mi">9</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--  Changeset changelog.xml::1380636706862-6::endy (generated)::(Checksum: 3:909c459661aacc260b40971e4215a481)</span>
</span><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">m_routing</span><span class="o">`</span> <span class="k">ADD</span> <span class="o">`</span><span class="n">deleted</span><span class="o">`</span> <span class="nb">BIT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="o">`</span><span class="n">DATABASECHANGELOG</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">AUTHOR</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">COMMENTS</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">DATEEXECUTED</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">DESCRIPTION</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">EXECTYPE</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">FILENAME</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">ID</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">LIQUIBASE</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">MD5SUM</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">ORDEREXECUTED</span><span class="o">`</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;endy (generated)&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">NOW</span><span class="p">(),</span> <span class="s1">&#39;Add Column&#39;</span><span class="p">,</span> <span class="s1">&#39;EXECUTED&#39;</span><span class="p">,</span> <span class="s1">&#39;changelog.xml&#39;</span><span class="p">,</span> <span class="s1">&#39;1380636706862-6&#39;</span><span class="p">,</span> <span class="s1">&#39;2.0.5&#39;</span><span class="p">,</span> <span class="s1">&#39;3:909c459661aacc260b40971e4215a481&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--  Changeset changelog.xml::1380636706862-7::endy (generated)::(Checksum: 3:ac26c24529898f4c1c2133225d3d5ee8)</span>
</span><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">m_provider</span><span class="o">`</span> <span class="k">MODIFY</span> <span class="o">`</span><span class="n">bind_password</span><span class="o">`</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="o">`</span><span class="n">DATABASECHANGELOG</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">AUTHOR</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">COMMENTS</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">DATEEXECUTED</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">DESCRIPTION</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">EXECTYPE</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">FILENAME</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">ID</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">LIQUIBASE</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">MD5SUM</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">ORDEREXECUTED</span><span class="o">`</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;endy (generated)&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">NOW</span><span class="p">(),</span> <span class="s1">&#39;Drop Not-Null Constraint&#39;</span><span class="p">,</span> <span class="s1">&#39;EXECUTED&#39;</span><span class="p">,</span> <span class="s1">&#39;changelog.xml&#39;</span><span class="p">,</span> <span class="s1">&#39;1380636706862-7&#39;</span><span class="p">,</span> <span class="s1">&#39;2.0.5&#39;</span><span class="p">,</span> <span class="s1">&#39;3:ac26c24529898f4c1c2133225d3d5ee8&#39;</span><span class="p">,</span> <span class="mi">11</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--  Changeset changelog.xml::1380636706862-8::endy (generated)::(Checksum: 3:968da08768e83eaaa863f0a3cafc204e)</span>
</span><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">m_provider</span><span class="o">`</span> <span class="k">MODIFY</span> <span class="o">`</span><span class="n">bind_username</span><span class="o">`</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="o">`</span><span class="n">DATABASECHANGELOG</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">AUTHOR</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">COMMENTS</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">DATEEXECUTED</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">DESCRIPTION</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">EXECTYPE</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">FILENAME</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">ID</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">LIQUIBASE</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">MD5SUM</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">ORDEREXECUTED</span><span class="o">`</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;endy (generated)&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">NOW</span><span class="p">(),</span> <span class="s1">&#39;Drop Not-Null Constraint&#39;</span><span class="p">,</span> <span class="s1">&#39;EXECUTED&#39;</span><span class="p">,</span> <span class="s1">&#39;changelog.xml&#39;</span><span class="p">,</span> <span class="s1">&#39;1380636706862-8&#39;</span><span class="p">,</span> <span class="s1">&#39;2.0.5&#39;</span><span class="p">,</span> <span class="s1">&#39;3:968da08768e83eaaa863f0a3cafc204e&#39;</span><span class="p">,</span> <span class="mi">12</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--  Release Database Lock</span>
</span></code></pre></td></tr></table></div></figure>


<p>Output tersebut bisa kita periksa dulu kebenarannya, kemudian kita edit bila perlu, lalu tinggal dijalankan di skema database versi <code>1.0</code> &#8230; voila &#8230; dia akan berubah menjadi database dengan skema versi <code>2.0</code>.</p>

<p>Demikianlah cara mudah untuk melakukan migrasi. Jangan lupa simpan isi file <code>changelog.xml</code> ke dalam version control supaya segala perubahan terhadap skema database tercatat riwayatnya.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lan Na Zha]]></title>
    <link href="http://software.endy.muhardin.com/life/lan-na-zha/"/>
    <updated>2013-08-25T16:38:00+07:00</updated>
    <id>http://software.endy.muhardin.com/life/lan-na-zha</id>
    <content type="html"><![CDATA[<p>Beberapa hari yang lalu, saya membaca artikel menarik tentang profesi IT.
Inti dari artikel tersebut adalah profesi di dunia IT <em>sucks</em> dengan beberapa alasan:</p>

<ol>
<li>Pemrograman termasuk kategori <em>temporary knowledge capital</em>, yaitu pengetahuan yang cepat kadaluarsa</li>
<li>Bahasa pemrograman, teknologi, dan platform berubah dengan sangat cepat</li>
<li>Gajinya kecil dan prestisenya rendah</li>
<li>Jenjang karir tidak jelas</li>
</ol>


<p>Artikel selengkapnya bisa dibaca <a href="http://www.halfsigma.com/2007/03/why_a_career_in.html">di sini</a>.</p>

<p>Untuk masalah nomer #3 dan #4, menurut saya lebih terkait pada masalah ambisi, attitude, dan <a href="http://software.endy.muhardin.com/life/otodidak/">self-improvement/kemampuan otodidak</a>. Di artikel ini, kita akan bahas solusi untuk masalah nomer #1 dan #2.</p>

<p>Seperti di artikel sebelumnya, kali ini kita juga akan mengambil teladan dari seorang tokoh di luar dunia IT. Siapa dia?</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/08/lan-na-zha/li-shu-wen.jpg" title="Li Shu Wen" ></p>

<p><em>gambar diambil dari <a href="http://mangafox.me/manga/kenji/v21/c003/3.html">MangaFox</a></em></p>

<p>Dia adalah Li Shu Wen, legenda <a href="http://en.wikipedia.org/wiki/B%C4%81j%C3%ADqu%C3%A1n">kungfu Delapan Mata Angin</a> yang diceritakan di <a href="http://mangafox.me/manga/kenji/">komik Kenji</a>.</p>

<!--more-->


<p>Sekilas kita lihat, memang dunia IT berkembang dengan sangat cepat. Bahasa pemrograman datang dan pergi dengan cepatnya. Waktu saya mulai belajar pemrograman dulu (tahun 2001), bahasa paling populer adalah PHP, VB, dan Delphi. Java waktu itu hanyalah mainan orang-orang di kampus. 12 tahun kemudian, kita mendengar banyak bahasa baru, misalnya:</p>

<ul>
<li>Go</li>
<li>Harlan</li>
<li>Kotlin</li>
<li>Rust</li>
<li>Dart</li>
<li>Clojure</li>
<li>dan banyak lagi yang lainnya</li>
</ul>


<p>Dan juga jangan dilupakan bahasa lama yang kembali ngetren, misalnya:</p>

<ul>
<li>Ruby</li>
<li>Python</li>
<li>JavaScript</li>
</ul>


<p>Hal yang sama berlaku juga di urusan platform. Beberapa tahun yang lalu, Blackberry adalah rajanya. Sebelum Blackberry, JavaME dan Symbian adalah platform utama di mobile. Jaman sekarang mereka semua sudah digusur oleh Android dan iPhone. Ini semua terjadi dalam kurun waktu 5 tahun saja. Jadi kalau 5 tahun yang lalu kemahiran kita dalam pemrograman JavaME membuat kita menjadi idola masyarakat, jaman sekarang kita tidak lebih dari seorang Pak Tua yang sudah mendekati usia pensiun ;)</p>

<p>Nah, saya termasuk salah satu Pak Tua tersebut. Tergabung dalam generasi dinosaurus yang masih tau apa itu CORBA, RMI, SOAP, XML, dan singkatan-singkatan lain yang tidak dipahami generasi masa kini yang urusannya adalah KML, JSON, dan kawan-kawannya. Bagaimana cara saya survive bisa menjadi pelajaran buat generasi 2013 yang akan menyusul menjadi Pak Tua dalam 5 tahun ke depan :D</p>

<p>Kuncinya ada di legenda kungfu jaman dulu, <a href="http://kenji.mangawiki.org/?p=1">Li Shu Wen</a> yang diceritakan dalam komik Kenji dengan nama Lie Syo Bun yang bisa dibaca online <a href="http://mangafox.me/manga/kenji/v21/c001/1.html">di sini</a>. Berikut sedikit bagian yang relevan dengan artikel ini, yaitu tentang gerakan Lan Na Zha.</p>

<blockquote><p>Untuk menjadi master di aliran kungfu Delapan Mata Angin, Li Shu Wen harus menguasai dua teknik, yaitu pukulan pamungkas dan teknik tombak. Dia menguasai pukulan pamungkas secara otodidak dengan mempertaruhkan nyawa. Baca ceritanya <a href="http://mangafox.me/manga/kenji/v21/c002/2.html">di bab dua Kenji volume 21</a>. Setelah itu, dia mendapat pengajaran dasar-dasar ilmu tombak di perguruannya. Karena sering berkelahi, maka Li Shu Wen hanya boleh menonton, tidak boleh mencoba. Gurunya mendemokan tiga gerakan dasar ilmu tombak, yaitu Lan (memutar ke luar), Na (memutar ke dalam), dan Zha (menusuk).</p></blockquote>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/08/lan-na-zha/lan-na-zha.jpg" title="Lan Na Zha" ></p>

<p><em>gambar diambil dari <a href="http://mangafox.me/manga/kenji/v21/c003/8.html">MangaFox</a></em></p>

<blockquote><p>Ketika gurunya mengajarkan teknik kombinasi yang lebih advanced, dia menolak belajar karena menganggap sudah cukup dengan tiga gerakan dasar itu saja, sehingga diskorsing oleh gurunya. Tapi bermodalkan tiga gerakan dasar ini saja, dia berhasil mengalahkan semua yang menantangnya, sehingga digelari Dewa Tombak. Baca cerita lengkapnya <a href="http://mangafox.me/manga/kenji/v21/c003/6.html">di sini</a>.</p></blockquote>

<p>Sedemikian universalnya teknik dasar ini, sehingga bisa kita temukan juga di komik lain, yaitu <a href="">Legenda Naga</a>.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/08/lan-na-zha/lan-na-zha-gongfu.jpg" title="Lan Na Zha Legenda Naga" ></p>

<p><em>gambar diambil dari <a href="http://mangafox.me/manga/ryuurouden/v07/c024/16.html">MangaFox</a></em></p>

<p>Lalu apa hubungannya dengan profesi di dunia IT? Pelajaran utama dari komik di atas adalah kita harus mengambil inti dari setiap pengetahuan yang kita miliki. Teknik implementasi bisa berubah dengan cepat, tapi konsep dasar tidak berubah. Tidak percaya? Coba kita lihat istilah-istilah yang sedang trendi di jaman sekarang:</p>

<ul>
<li>Functional Programming, Closure, Clojure, Scala, Groovy, Lambda Expression</li>
<li>Object Oriented Programming, UML</li>
<li>ORM</li>
<li>REST</li>
</ul>


<p>Mari kita telusuri apakah benar istilah tersebut membuat skill kita kadaluarsa?</p>

<h3>Functional Programming</h3>

<p><a href="http://en.wikipedia.org/wiki/Functional_programming">Menurut Wikipedia</a>, Functional programming sudah dikenal sejak tahun 1950. Bahasa yang terkenal adalah <a href="http://en.wikipedia.org/wiki/Lisp_(programming_language">LISP</a>) dan <a href="http://en.wikipedia.org/wiki/Haskell_(programming_language">Haskell</a>).</p>

<p>Jadi, apa yang ngetren dengan nama Clojure di masa kini, sebetulnya sudah ada sejak tahun 1950. Kalau saja kita menguasai konsep functional programming, bukan hanya teknik pemrograman Lisp/Haskell, maka konsep yang kita pahami tersebut akan memungkinkan kita menguasai Clojure dalam waktu satu bulan saja. Demikian juga dengan bahasa pemrograman functional lain seperti Scala, Groovy, dan fitur Lambda Expression yang akan hadir di Java 8.</p>

<h3>Object Oriented Programming</h3>

<p>Istilah OOP mungkin tidak terdengar terlalu modern. Tapi sebetulnya dia umurnya sama dengan Functional Programming, yaitu dikenal sejak tahun 1950. Bahasa pemrograman berparadigma OOP yang terkenal antara lain adalah Smalltalk.</p>

<p>Untuk mendokumentasikan desain aplikasi OOP, digunakan notasi UML. Notasi ini dirumuskan pada tahun 1990.</p>

<h3>ORM</h3>

<p>Object Relational Mapping atau ORM, sering kita kenal dengan istilah JPA, Hibernate, Toplink, dan sebagainya, sebetulnya bukan konsep baru. ORM hanyalah library yang mengkonversi hasil query database relasional menjadi object, dan sebaliknya. Adapun istilah-istilah yang sering kita temui dalam penggunaan ORM seperti:</p>

<ul>
<li><a href="http://stackoverflow.com/questions/97197/what-is-the-n1-selects-issue">n+1 select</a></li>
<li><a href="http://en.wikipedia.org/wiki/Cartesian_product">cartesian product</a></li>
<li><a href="http://en.wikipedia.org/wiki/Foreign_key#CASCADE">cascade operation</a></li>
</ul>


<p>adalah istilah umum yang juga ditemui di SQL. Sedangkan</p>

<ul>
<li>second level cache</li>
<li>lazy loading vs eager fetching</li>
</ul>


<p>merupakan teknik optimasi pengambilan data, yang tidak hanya berlaku untuk database relasional, tapi juga semua pengambilan data dari sumber eksternal seperti:</p>

<ul>
<li>file</li>
<li>web service</li>
<li>network socket</li>
<li>dan sebagainya</li>
</ul>


<h3>REST</h3>

<p><a href="http://en.wikipedia.org/wiki/Representational_state_transfer">REST</a>, sebetulnya hanyalah satu metode untuk mengakses service yang disediakan aplikasi lain. Secara konseptual, dia tidak berbeda dengan:</p>

<ul>
<li>SOAP</li>
<li>ISO-8583</li>
<li>IMAP</li>
<li>POP3</li>
<li>SMTP</li>
</ul>


<p>Intinya adalah ada aplikasi A yang ingin menyuruh aplikasi B melakukan sesuatu. Sesuatu di sini bisa menjalankan perintah tertentu, mengambilkan data, mematikan komputer, dan apapun yang bisa kita pikirkan. Begitu kita paham intinya, menyuruh aplikasi lain bisa dilakukan dengan berbagai cara lain, misalnya:</p>

<ul>
<li>mengirim SMS</li>
<li>mengirim email</li>
<li>mengirim data dengan format yang kita tentukan sendiri melalui jaringan (TCP/IP)</li>
<li>mengirim message chat melalui Yahoo Messenger, BBM, Google Hangout, Line, Whatsapp, dan apapun media lain</li>
</ul>


<p>Kita bisa generalisasi lagi menjadi konsep yang lebih mendasar, yaitu <a href="http://software.endy.muhardin.com/java/integrasi-aplikasi/">bagaimana menghubungkan (integrasi) antar beberapa aplikasi agar bisa bekerjasama</a>.</p>

<h2>Framework dan Library</h2>

<p>Kita juga sering pusing dengan cepatnya perkembangan framework dan library. Di dunia Java, kita bisa ambil contoh Spring Framework dan Java EE.</p>

<p>Walaupun demikian, dengan menggunakan prinsip Lan-Na-Zha, kita tidak perlu pusing. Coba kita bahas evolusinya.</p>

<h3>Java EE</h3>

<p>Jaman dulu namanya J2EE, beberapa jargon yang kita dengar adalah:</p>

<ul>
<li>Container Managed Transaction (CMT) : programmer tidak perlu <code>begin-commit/rollback</code> sendiri, diurus appserver</li>
<li>Enterprise Java Beans (EJB) : object yang diinisialisasi, dimaintain, dan dibersihkan oleh appserver</li>
<li>Session Beans : EJB yang bertugas menampung proses bisnis</li>
<li>Entity Beans : EJB yang bertugas menjadi mapping dari Java ke tabel database</li>
<li>Message Driven Beans : EJB yang bertugas menunggu message JMS dan beraksi begitu ada message</li>
</ul>


<p>Teknik implementasinya adalah sebagai berikut:</p>

<ol>
<li>Coding Session Beans, Entity Beans, Message Driven Beans menggunakan Java</li>
<li>Deklarasikan objectnya di file XML</li>
<li>Bila object tersebut saling terkait, tulis juga hubungannya di file XML</li>
<li>Konfigurasi CMT di file XML juga</li>
</ol>


<p>Jaman sekarang namanya JEE. Implementasinya beda, seperti ini:</p>

<ol>
<li>Coding Session Beans, Entity Beans, Message Driven Beans menggunakan Java</li>
<li>Tambahkan annotation <code>@Stateless</code>, <code>@Stateful</code>, <code>@Entity</code>, <code>@MessageDriven</code> supaya EJB dikelola oleh appserver</li>
<li>Bila object tersebut saling terkait, tulis juga hubungannya menggunakan <code>@Inject</code></li>
<li>CMT sudah diaktifkan by-default. Konfigurasi tambahan bisa dilakukan menggunakan <code>@TransactionAttribute</code></li>
</ol>


<p>Konsepnya tetap sama. Tidak percaya? Baiklah saya copy paste ;)</p>

<ul>
<li>Container Managed Transaction (CMT) : programmer tidak perlu <code>begin-commit/rollback</code> sendiri, diurus appserver</li>
<li>Enterprise Java Beans (EJB) : object yang diinisialisasi, dimaintain, dan dibersihkan oleh appserver</li>
<li>Session Beans : EJB yang bertugas menampung proses bisnis</li>
<li>Entity Beans : EJB yang bertugas menjadi mapping dari Java ke tabel database</li>
<li>Message Driven Beans : EJB yang bertugas menunggu message JMS dan beraksi begitu ada message</li>
</ul>


<p>Seperti kita lihat, kalau kita menghafalkan implementasi (konfigurasi XML), maka skill J2EE kita akan kadaluarsa begitu JavaEE 6 dirilis. Tapi kalau kita pahami benar-benar konsepnya (CMT, EJB), maka pemahaman tersebut masih relevan di JavaEE 5, JavaEE 6, dan kemungkinan besar juga di JavaEE 10 beberapa tahun yang akan datang ;)</p>

<h3>Spring Framework</h3>

<p>Bagi aliran non JavaEE, biasanya pakai Spring Framework. Di sinipun tidak jauh berbeda. Dulunya konfigurasi menggunakan XML, sekarang bisa pakai Annotation dan JavaConfig.</p>

<p>Implementasi jaman dulu:</p>

<ul>
<li>inisialisasi (me<code>new</code>kan object) ada di XML</li>
<li>transaction management dilakukan menggunakan AOP, juga di XML</li>
</ul>


<p>Contohnya bisa dilihat di <a href="http://sourceforge.net/p/playbilling/code/7/tree/trunk/web/WEB-INF/conf/ctx-billing.xml">kode program saya tahun 2006 - 7 tahun yang lalu</a>. Perhatikan bahwa setiap class <code>DAO</code> dideklarasikan di XML. Demikian juga konfigurasi transaction di bagian <code>transactionAttributes</code>.</p>

<p>Implementasi jaman sekarang:</p>

<ul>
<li>inisialisasi dilakukan melalui annotation</li>
<li>transaction management dikonfigurasi di annotation</li>
</ul>


<p>Contohnya bisa dilihat di <a href="http://software.endy.muhardin.com/java/konfigurasi-koneksi-database-dengan-spring/">kode program saya tahun 2013</a>.</p>

<p>Walaupun kode programnya berubah sama sekali, konsepnya tidak berubah dalam kurun waktu 7 tahun, yaitu:</p>

<ul>
<li><a href="http://software.endy.muhardin.com/java/memahami-dependency-injection/">Dependency Injection</a></li>
<li>Aspect Oriented Programming</li>
</ul>


<h2>Gong Fu</h2>

<p>Kalau kita baca terus kisah Li Shu Wen sampai <a href="http://mangafox.me/manga/kenji/v21/c005/10.html">bab 5</a>, kita akan mendapat pelajaran penting lainnya, yaitu <code>gongfu</code>. Gongfu artinya adalah <code>hasil yang didapat dari latihan</code>. Kita melakukan satu hal berulang-ulang, sehingga hal tersebut menjadi refleks dan bisa kita lakukan tanpa harus berpikir lagi.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/08/lan-na-zha/gongfu.jpg" title="Gong Fu" ></p>

<p><em>gambar diambil dari <a href="http://mangafox.me/manga/kenji/v21/c005/21.html">MangaFox</a></em></p>

<p>Salah satu latihan yang sering saya lakukan adalah membuat aplikasi dengan satu tabel database, satu form input, satu tabel list, lengkap dengan validasinya, menggunakan framework yang biasa digunakan (Spring dan Hibernate), <strong>dari nol</strong>. Dengan latihan tersebut, saya hafal dan tahu persis fungsi dan tujuan setiap baris kode program dan konfigurasi yang ada dalam aplikasi. Bila ada error, saya bisa mengatasinya dengan cepat dengan bermodalkan <code>gongfu</code> dalam mengintegrasikan berbagai framework.</p>

<blockquote><p>Di jaman content seperti saat ini, <em>gongfu</em> yang paling perlu dipupuk adalah <a href="http://software.endy.muhardin.com/aplikasi/teknik-menggunakan-google/">teknik googling</a>. Memilih keyword yang tepat supaya hasil search sesuai keinginan merupakan suatu skill khusus. Skill ini hanya bisa ditingkatkan melalui latihan.</p></blockquote>

<p>Khusus programmer, penting juga dilatih cara untuk mendebug error. Membaca pesan error, memisahkan mana yang relevan dan tidak, kemudian mencari tahu baris kode yang menyebabkan error, merupakan skill yang hanya bisa didapat melalui latihan.</p>

<p>Dalam melatih gongfu, ada satu prinsip yang penting untuk kita gunakan, yaitu <a href="http://joshvogelart.blogspot.com/2013/02/slow-is-smooth-and-smooth-is-fast.html">Slow is smooth, smooth is fast</a>. Artinya, kita lakukan langkah demi langkah seakurat mungkin walaupun perlahan. Fokusnya adalah <strong>melakukan secara benar</strong>. Seiring dengan durasi latihan kita, rangkaian gerakan tersebut akan tertanam menjadi refleks di otak kita, sehingga kita bisa melakukannya dengan lebih cepat. Ulangi terus dalam jangka waktu yang lama, maka kita akan bisa melakukan hal tersebut dengan sangat cepat, namun tetap akurat.</p>

<h2>Kesimpulan</h2>

<p>Belajar dari kisah Li Shu Wen di atas, kita tidak perlu khawatir dengan cepatnya perkembangan teknologi di dunia IT. Bila kita paham konsep dan prinsip dasarnya, kita tidak akan tertinggal. Teknik implementasi, bahasa pemrograman, platform, format data, protokol komunikasi, memang akan terus berubah sepanjang jaman. Tapi prinsip yang mendasarinya akan tetap berpulang pada konsep klasik dan akal sehat.</p>

<p>Jadi, bila kita belajar sesuatu, tidak hanya di dunia IT, jangan cepat puas begitu kita tahu <strong>bagaimana cara melakukannya</strong>. Gali terus sampai kita memahami <strong>tujuan kenapa kita melakukan hal tersebut</strong> dan <strong>berbagai cara lain untuk mencapai tujuan yang sama</strong>. Jangan puas begitu kita bisa <strong>insert data menggunakan ORM</strong>. Tapi gali terus sampai kita paham <strong>mengapa ORM dibuat</strong> dan <strong>bagaimana cara kerja/isi perut ORM</strong>.</p>

<p>Setelah paham, latih terus pemahaman konsep tersebut sampai kita mahir. Jangan berhenti ketika merasa sudah mahir, karena semua skill dan teknik perlu maintenance supaya tidak hilang.</p>

<p>Terakhir, untuk mendapatkan hasil maksimal, kombinasikan artikel ini dengan <a href="http://software.endy.muhardin.com/life/otodidak/">artikel sebelumnya</a>. Pahami prinsip dasar dari skill otodidak, kemudian latihan sampai mahir. Jangan menyerah kalau merasa sulit dalam belajar. Yang namanya belajar pasti sulit, kalau sudah tidak sulit lagi tandanya kita sudah bisa ;)</p>

<p>Juga jangan bosan bila kita tidak cepat memahami/menguasai sesuatu. Menguasai suatu konsep dan teknik dasar seringkali butuh waktu lama. Dalam komik Legenda Naga, Lan Na Zha dilatih selama enam bulan</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/08/lan-na-zha/lan-na-zha-gongfu.jpg" title="Lan Na Zha Legenda Naga" ></p>

<p><em>gambar diambil dari <a href="http://mangafox.me/manga/ryuurouden/v07/c024/16.html">MangaFox</a></em></p>

<p>Dalam komik Kenji, Li Shu Wen melatih kuda-kuda dasar selama 3 bulan. Tidak seperti aliran lain, selama periode tersebut siswa belum belajar memukul sama sekali.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/08/lan-na-zha/horse-stance-training.jpg" title="Latihan Kuda-kuda" ></p>

<p><em>gambar diambil dari <a href="http://mangafox.me/manga/kenji/v21/c007/6.html">MangaFox</a></em></p>

<p>Bagaimana dengan programming?</p>

<blockquote><p>Menurut Peter Norvig, <a href="http://norvig.com/21-days.html">belajar pemrograman butuh waktu 10 tahun</a>.</p></blockquote>

<p>Jadi, kalau kita belajar sesuatu, setelah dua minggu belum paham dan masih bingung, jangan khawatir. Masih ada waktu 10 tahun kurang
2 minggu lagi untuk belajar ;)</p>

<p>Nah, dengan artikel ini, mudah-mudahan orang bisa memahami mengapa di berbagai forum, milis, sesi kuliah dan pelatihan, saya selalu bersikeras supaya orang <a href="http://software.endy.muhardin.com/life/rtfm/">mencoba dulu sebelum bertanya/minta solusi</a>. Karena dengan mencoba, kita akan meningkatkan gongfu dalam skill problem solving.</p>

<p>Selamat berlatih ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Otodidak]]></title>
    <link href="http://software.endy.muhardin.com/life/otodidak/"/>
    <updated>2013-08-18T20:04:00+07:00</updated>
    <id>http://software.endy.muhardin.com/life/otodidak</id>
    <content type="html"><![CDATA[<p>Sebagai programmer, ada banyak tokoh yang bisa kita teladani, seperti Linus Torvalds, Bill Gates, Richard Stallman, Eric Raymond, Brian Kernighan, Dennis Ritchie, Erich Gamma, dan banyak lainnya. Tetapi di dunia modern seperti sekarang ini, dimana teknologi baru bermunculan lebih cepat dari kemampuan kita untuk bisa menggunakannya (apalagi bisa mempelajarinya), ada satu tokoh yang wajib kita teladani, bukan berasal dari dunia IT. Siapa dia?</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/08/otodidak/hatake-kakashi.jpg" title="Hatake Kakashi" ></p>

<p>Gambar diambil dari <a href="http://www.fanpop.com/clubs/kakashi/images/18899114/title/kakashi-hatake-screencap">Fanpop</a></p>

<p>Dia adalah Hatake Kakashi dari komik Naruto.</p>

<p>Kenapa begitu? Karena skill dan special ability yang dia miliki adalah juga skill dan special ability yang wajib dimiliki semua programmer tanpa kecuali, agar bisa selamat dari bencana pengangguran. Buat yang tidak mengikuti komik Naruto, berikut profil singkat Hatake Kakashi yang berkaitan dengan urusan programming. Sisanya bisa dibaca sendiri <a href="http://naruto.wikia.com/wiki/Kakashi_Hatake">di sini</a>.</p>

<!--more-->


<blockquote><p>Hatake Kakashi adalah guru (sensei) dari Uzumaki Naruto dan Uchiha Sasuke, dua tokoh sentral dalam komik Naruto. Dia memiliki julukan <em>Copy Ninja Kakashi</em>, karena kemampuannya untuk mengamati, menganalisa, dan menirukan jurus yang digunakan lawannya hanya dengan sekali lihat saja. Karena kemampuan khusus ini, lawannya menjadi serba salah. Mengeluarkan jurus andalan, resikonya dicuri dan digunakan melawan dia sendiri. Tidak mengeluarkan jurus, ya sama saja menyediakan diri menjadi sansak berjalan.</p></blockquote>

<p>Penggunaan skill ini bisa dibaca di <a href="http://komikbaru.com/Naruto/015/7">Naruto episode 15</a> dimana Kakashi bertarung melawan Momochi Zabuza. Kakashi melihat, menganalisa, mempelajari, menirukan, dan kemudian menghajar Zabuza dengan jurusnya sendiri.</p>

<p>Seorang programmer harus mampu menguasai konsep dan teknik baru dengan cepat, seperti halnya Copy Ninja Kakashi.
Ini disebabkan karena pengetahuan teknis dalam pemrograman bisa kadaluarsa dalam waktu yang cepat. Contohnya, di tahun 2003, programmer Java menggunakan framework yang disebut EJB 2 dan Struts 1 untuk membuat aplikasi. Hanya dalam kurun waktu 2 tahun (tahun 2005), kedua teknologi tersebut sudah usang dan diganti dengan jargon baru yang disebut SOAP. Saat ini di tahun 2013, siapapun yang berani menyebut-nyebut EJB 2, Struts 1, ataupun SOAP, terancam diledek sebagai Pak Tua ;) Di tahun 2013 ini, era-nya REST dan JavaScript. Entah apa lagi trend di masa depan.</p>

<p>Saya sendiri belajar banyak hal secara otodidak, diantaranya adalah pemrograman, fotografi, membaca Al Qur&#8217;an, bahkan kerajinan membuat gelang ;)</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/08/otodidak/camera-strap.jpg" title="Camera Strap buatan sendiri" ></p>

<p>Saking sering mempelajari segala sesuatu secara otodidak, saya seringkali malas diajari orang lain. Belum tentu cara mengajar dan cara berpikirnya sesuai dengan kebutuhan saya. Orang lain biasanya tidak tahu <em>modal awal</em> kita, sehingga bisa jadi terlalu banyak memberikan materi pemula, atau sebaliknya mengasumsikan saya sudah tau banyak hal dan langsung saja ke topik advanced.</p>

<blockquote><p>I am always ready to learn although I do not always like being taught</p><footer><strong>Winston Churchill</strong> <cite><a href='http://www.brainyquote.com/quotes/quotes/w/winstonchu106394.html'></a></cite></footer></blockquote>


<p>Dalam hal belajar otodidak, hal yang paling penting kita kuasai adalah:</p>

<ol>
<li>Membuat jalur belajar (roadmap), mana yang duluan, mana yang belakangan</li>
<li>Menentukan metode latihan untuk menguasai konsep atau teknik tertentu</li>
<li>Melakukan kegiatan belajar (membaca / menonton) yang diperlukan sesuai langkah #2 sampai paham</li>
<li>Kalau langkah #3 tidak efektif, revisi metode latihan (kembali ke #2)</li>
<li>Begitu sudah dikuasai cepat-cepat diabadikan dalam bentuk tulisan atau pelatihan supaya tidak cepat lupa</li>
</ol>


<p>Satu hal penting lainnya, kita juga harus tahu sampai di mana batasnya kita bisa belajar otodidak. Belajar membaca Al Qur&#8217;an, tidak boleh 100% otodidak. Ada materi tertentu -misalnya <em>makhrajul huruf</em>- yang harus diverifikasi oleh orang yang kompeten. Ini disebabkan karena Al Qur&#8217;an diwariskan secara lisan, bukan tulisan. Sehingga teknik membacanya harus dicek secara lisan juga apakah sudah benar atau belum. Selain itu, ilmu membaca Al Qur&#8217;an merupakan suatu ilmu yang harus jelas sanadnya. Teknik yang kita gunakan harus bisa ditelusuri asal-usulnya sampai ke Rasulullah SAW. Walaupun demikian, belajar otodidak dapat digunakan supaya kita tidak terlalu merepotkan guru kita.</p>

<p>Langkah #1 dan #2 juga penting apabila kita menjadi mengajari orang lain baik sebagai instruktur, guru, atau dosen. Pengajar yang baik mampu mendefinisikan urutan belajar dan metode latihan yang cocok untuk setiap muridnya. Contohnya, lagi-lagi dari komik Naruto, kita lihat bagaimana Kakashi membuatkan metode latihan untuk kontrol chakra pada Naruto, Sasuke, dan Sakura <a href="http://komikbaru.com/Naruto/018/2">di episode 18</a>. Lihat juga bagaimana Sensei Jiraiya memberikan latihan khusus untuk Naruto <a href="http://komikbaru.com/Naruto/150/16">di episode 150</a>.</p>

<p>Mari kita bahas satu persatu.</p>

<h2>Membuat Roadmap</h2>

<p>Langkah pertama yang harus kita lakukan adalah memetakan topik yang akan kita pelajari. Mana yang termasuk pengetahuan dasar (fundamental), mana yang tingkat menengah, mana yang tingkat lanjut. Kita juga harus menentukan urutan penguasaan materi. Sebagai contoh, untuk bisa memahami penggunaan framework Hibernate, kita harus paham dulu konsep SQL dan database relasional. Untuk bisa memahami <a href="http://www.infoq.com/minibooks/JTDS">berbagai strategi transaction dalam Java EE</a>, kita harus paham dulu <a href="http://software.endy.muhardin.com/java/database-transaction/">apa itu database transaction</a>.</p>

<p>Jalur untuk belajar Java sudah saya tuliskan di beberapa artikel:</p>

<ul>
<li><a href="http://software.endy.muhardin.com/java/road-to-java-se/">Java Fundamental</a>.</li>
<li><a href="http://software.endy.muhardin.com/java/road-to-java-ee/">Java EE</a></li>
</ul>


<p>Bila kita ikut kursus, sekolah, atau kuliah, dosen yang kompeten sudah membuatkan jalur belajar ini sehingga peserta tinggal mengikutinya. Tapi bila kita ingin belajar secara otodidak, kita harus memiliki kemampuan untuk membuat jalur ini sendiri.</p>

<blockquote><p>Bagaimana cara membuat roadmap belajar?</p></blockquote>

<p>Pertama, kita kumpulkan dulu semua materi yang berkaitan dengan topik yang ingin kita pelajari. Sebagai contoh, pada waktu saya belajar fotografi, semua artikel dan video yang berhasil saya kumpulkan saya masukkan ke <a href="https://springpad.com/#!/endy.muhardin/notebooks/belajarfotografi/blocks">Springpad</a>.</p>

<p>Materi ini tidak perlu dibaca/ditonton semua. Pada tahap ini kita hanya mengumpulkan dan mengelompokkan. Biasanya saya hanya membaca/menonton sedikit bagian di awal, tengah, dan akhir saja. Dari hasil skimming ini, saya kelompokkan menjadi materi dasar, menengah, dan lanjut. Untuk materi fotografi, hasil pengelompokannya bisa dilihat <a href="https://springpad.com/#!/endy.muhardin/notebooks/belajarfotografi/blocks/note/learningpath">di sini</a>.</p>

<p>Beberapa pertimbangan dalam membuat roadmap:</p>

<ul>
<li>urutan penguasaan materi. Misalnya sebelum Hibernate, harus paham JDBC dulu. Sebelum Spring MVC harus paham Servlet dan JSP dulu.</li>
<li>tingkat kompleksitas materi. Materi tingkat lanjut biasanya baru bisa dipahami dengan menggabungkan konsep-konsep tingkat dasar. Contohnya untuk bisa memahami <code>@Transactional</code>, kita harus paham dulu <a href="http://software.endy.muhardin.com/java/database-transaction/">konsep umum database transaction</a>, <a href="http://www.infoq.com/minibooks/JTDS">apa itu distributed transaction dan berbagai strategi penggunaannya</a>, baru kemudian terakhir <a href="http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/transaction.html">bagaimana cara pakainya dalam kode program</a>.</li>
<li>urutan dan pengelompokan ini tidak bersifat final. Sepanjang perjalanan kita belajar, kita akan beberapa kali mengoreksi sudut pandang kita, mengubah prioritas mana yang penting mana yang tidak, dan juga mengubah pemahaman kita terhadap suatu konsep. Pada waktu itu terjadi, jangan sungkan untuk merevisi roadmap. Toh ini kita buat untuk diri sendiri, ya bebas saja kalau mau diubah kapanpun. Ini adalah hal yang normal.</li>
</ul>


<h2>Menentukan Metode Latihan</h2>

<p>Selain konsep di atas, kita juga perlu menentukan latihan yang dibutuhkan. Contohnya seperti ini:</p>

<ol>
<li><p>Memahami akses database Java menggunakan JDBC</p>

<ul>
<li>membuat koneksi database</li>
<li>memasukkan data ke dalam database (insert)</li>
<li>mengubah data dalam database (update)</li>
<li>mengambil data dari database (select)</li>
<li>menghapus data dalam database (delete)</li>
</ul>
</li>
<li><p>Memahami fitur aplikasi web Java</p>

<ul>
<li>menangani request terhadap URL tertentu</li>
<li>menerima variabel melalui HTTP GET</li>
<li>menerima variabel melalui HTTP POST</li>
<li>implementasi login menggunakan HTTP Session dan Filter</li>
<li>membuat inisialisasi aplikasi web menggunakan Listener</li>
<li>upload/download file</li>
</ul>
</li>
</ol>


<p>Kalau kita tidak otodidak, melainkan kursus, sekolah, atau kuliah, pengajar sudah membuatkan daftar latihan ini buat kita.
Kita tinggal ikuti. Masalahnya adalah, metode latihan yang dibuatkan pengajar biasanya disesuaikan untuk kebutuhan orang banyak dari berbagai latar belakang. Kadang cocok dengan kita, kadang tidak cocok. Bila kita otodidak, kita bisa menentukan metode latihan yang sesuai dengan kebutuhan kita.</p>

<p>Bila kita ingin menjadi pengajar, kita juga harus bisa melihat karakteristik murid dan membuatkan metode latihan yang cocok dengan murid tersebut. Dalam komik Naruto, ini dicontohkan Sensei Jiraiya <a href="http://komikbaru.com/Naruto/092/13">di episode 92</a>, pada waktu dia membuatkan latihan khusus sesuai bakat Naruto.</p>

<p>Yang perlu diperhatikan dalam menentukan metode latihan adalah tujuan dari suatu latihan. Setiap kegiatan yang kita lakukan harus memiliki tujuan akhir, yaitu pemahaman konsep tertentu atau penguasaan teknik tertentu.</p>

<p>Latihan yang kita rancang haruslah mencukupi, tapi tidak berlebihan. Jangan sampai dalam latihan untuk menguasai materi Z, kita terpaksa melakukan semua kegiatan dari A sampai Y. Contohnya, bila kita ingin menguasai Hibernate, tidak perlu membuat tampilan desktop/web secara lengkap. Cukup method <code>public static void main</code> saja dengan data yang dihardcode, dibuat kode programnya sampai bisa masuk ke tabel database.</p>

<p>Hal lain yang juga penting, kita tidak perlu menyusun program latihan sampai materi tingkat lanjut. Kenapa begitu? Karena pada waktu kita baru mulai di tingkat dasar, tentu kita belum paham materi tingkat lanjut, sehingga belum tau metode latihan yang sesuai dengan materi tersebut. Kalaupun dipaksakan, hasilnya tidak akan bagus dan kemungkinan besar pasti akan direvisi lagi di tengah jalan. Jadi daripada dua kali kerja, lebih baik tidak usah dikerjakan dulu sebelum waktunya.</p>

<p>Sama seperti urutan materi, jangan ragu untuk merevisi program latihan di tengah jalan.</p>

<h2>Belajar dan Berlatih</h2>

<p>Setelah urutan belajar dan daftar latihan kita susun, kita harus luangkan waktu untuk melakukannya dengan benar sampai ke tujuan. Artinya, setelah membaca artikel tertentu dan melakukan program latihan tertentu, pastikan bahwa kita menguasai konsep dan teknik yang kita tuju. Bila masih belum paham konsepnya, atau belum mahir tekniknya, ulangi atau revisi program latihannya.</p>

<p>Beberapa latihan yang saya lakukan dapat dilihat di repository Github saya, misalnya:</p>

<ul>
<li><a href="https://github.com/endymuhardin/belajar-restful">belajar-restful</a> : latihan untuk memahami arsitektur <a href="http://en.wikipedia.org/wiki/Representational_state_transfer">REST</a></li>
<li><a href="https://github.com/endymuhardin/belajar-sip">belajar-sip</a> : latihan untuk memahami <a href="http://en.wikipedia.org/wiki/Session_Initiation_Protocol">Session Initiation Protocol</a> menggunakan Java</li>
<li><a href="https://github.com/endymuhardin/belajar-akses-database-java">belajar-akses-database-java</a> : latihan untuk memahami berbagai metode akses database</li>
<li><a href="https://github.com/endymuhardin/belajar-spring-android">belajar-spring-android</a> : latihan untuk memahami struktur project aplikasi Android dengan Maven</li>
<li><a href="https://github.com/endymuhardin/belajar-velocity-textoutput">belajar-velocity-textoutput</a> : latihan untuk menguasai penggunaan library <a href="http://velocity.apache.org">Velocity</a> untuk membuat cetakan printer dot matrix</li>
<li><a href="https://github.com/endymuhardin/belajar-ssl">belajar-ssl</a> : latihan untuk memahami konfigurasi SSL</li>
<li><a href="https://github.com/endymuhardin/belajar-auditlog">belajar-auditlog</a> : latihan untuk menguasai library <a href="http://www.jboss.org/envers">Hibernate Envers</a>, library untuk membuat history perubahan database</li>
<li><a href="https://github.com/endymuhardin/belajar-spring-integration">belajar-spring-integration</a> : latihan untuk menguasai library <a href="http://www.springsource.org/spring-integration">Spring Integration</a></li>
<li><a href="https://github.com/endymuhardin/belajar-spring-data-jpa">belajar-spring-data-jpa</a> : latihan untuk menguasai library <a href="http://www.springsource.org/spring-data/jpa">Spring Data JPA</a></li>
<li><a href="https://github.com/endymuhardin/belajar-spring-security">belajar-spring-security</a> : latihan untuk menguasai library <a href="http://www.springsource.org/spring-security">Spring Security</a></li>
<li><a href="https://github.com/endymuhardin/belajar-jmf">belajar-jmf</a> : latihan untuk mencoba fitur <a href="http://www.oracle.com/technetwork/java/javase/tech/index-jsp-140239.html">Java Media Framework</a></li>
<li><a href="https://github.com/endymuhardin/belajar-software-testing">belajar-software-testing</a> : latihan untuk mencoba software testing dengan Maven</li>
<li><a href="https://github.com/endymuhardin/belajar-ws">belajar-ws</a> : latihan untuk mencoba berbagai teknik dan framework <a href="http://en.wikipedia.org/wiki/SOAP">SOAP</a></li>
<li><a href="https://github.com/endymuhardin/belajar-extjs">belajar-extjs</a> : latihan untuk memahami framework javascript <a href="http://www.sencha.com/products/extjs">ExtJS</a></li>
<li><a href="https://github.com/endymuhardin/belajar-css">belajar-css</a> : latihan untuk memahami CSS, berguna untuk yang sama sekali belum tau apa itu CSS</li>
<li><a href="https://github.com/endymuhardin/belajar-spring">belajar-spring</a> : latihan untuk memahami cara penggunaan <a href="http://www.springsource.org/spring-framework">Spring Framework</a></li>
<li><a href="https://github.com/endymuhardin/belajar-servlet">belajar-servlet</a> : latihan untuk memahami fundamental aplikasi web dalam Java</li>
<li><a href="https://github.com/endymuhardin/belajar-jsf">belajar-jsf</a> : latihan untuk memahami penggunaan framework <a href="http://www.oracle.com/technetwork/java/javaee/javaserverfaces-139869.html">JSF</a></li>
<li><a href="https://github.com/endymuhardin/belajar-jpos">belajar-jpos</a> : latihan untuk memahami penggunaan library <a href="http://jpos.org/">JPos</a> untuk menangani message <a href="http://en.wikipedia.org/wiki/ISO_8583">ISO-8583</a></li>
</ul>


<p>Dari latihan yang sekian banyak, kita bisa melihat bahwa tidak ada yang instan di dunia ini. Untuk menguasai berbagai hal secara otodidak, kita harus mencoba dengan tangan sendiri sampai paham. Pantau terus koleksi repository saya untuk mengamati bagaimana proses belajar saya. Semua repository yang diawali dengan nama <code>belajar-</code> adalah repository latihan yang saya buat untuk memahami sesuatu.</p>

<h2>Menulis dan Mengajar</h2>

<blockquote><p>If you can&#8217;t explain it simply, you don&#8217;t understand it well enough.</p><footer><strong>Albert Einstein</strong> <cite><a href='http://blog.ampli.com/2012/03/albert-einstein-quotes-education-15-of.html'>blog.ampli.com/2012/03/&hellip;</a></cite></footer></blockquote>


<p>Salah satu kelemahan saya dalam urusan belajar adalah easy come easy go. Setelah puluhan tahun belajar macam-macam hal secara otodidak, maka saya bisa belajar hal baru dalam waktu relatif singkat. Walaupun demikian, kapasitas otak manusia ternyata ada batasnya. Setiap kali saya mempelajari sesuatu yang baru, ada saja pengetahuan lama yang hilang. Contohnya, pada waktu saya belajar Linux dan networking, pengetahuan akuntansi saya memudar. Demikian juga setelah lama berfokus di pemrograman Java, konsep dan perintah aplikasi <code>iptables</code> (aplikasi firewall di Linux) yang dulu saya hafal, saya lupa semua.</p>

<p>Untuk mengatasi masalah tersebut, ada beberapa cara yang saya lakukan:</p>

<ol>
<li>Sering menggunakan konsep dan teknik yang dimaksud. Sebagai contoh, supaya saya tidak lupa <a href="http://software.endy.muhardin.com/linux/backup-home-folder/">cara menggunakan rsync</a>, saya selalu menggunakannya untuk copy file dari laptop ke komputer lain atau ke harddisk external.</li>
<li>Mencatatnya di blog. Perintah <code>iptables</code> adalah sesuatu yang jarang saya pakai, karena sebagai orang normal, saya tidak mengkonfigurasi firewall setiap hari. Bahkan belum tentu saya lakukan sebulan sekali. Agar tidak lupa, pemakaian yang sering saya gunakan seperti <a href="http://software.endy.muhardin.com/linux/network-address-translation/">internet connection sharing</a> dan <a href="http://software.endy.muhardin.com/linux/setup-proxmox-dengan-1-ip-public/">port forwarding</a> saya tuliskan di blog. Demikian juga halnya untuk <a href="http://software.endy.muhardin.com/aplikasi/memasang-sertifikat-ssl/">cara konfigurasi SSL</a>.</li>
<li>Mengajarkannya pada orang lain. Ini adalah salah satu alasan mengapa saya mengajar di Universitas Pancasila dan berbagai pelatihan. Dengan mengajar, saya memperdalam pengetahuan saya tentang materi yang diajarkan, dan juga mencegah supaya tidak lupa.</li>
</ol>


<p>Demikianlah penjelasan tentang otodidak. Skill ini adalah salah satu solusi untuk mengatasi beratnya perjuangan di dunia IT seperti dibahas <a href="http://www.halfsigma.com/2007/03/why_a_career_in.html">di artikel ini</a>. Ada solusi lain yaitu menguasai konsep, bukan teknis implementasi yang bisa dibaca di <a href="(http://software.endy.muhardin.com/life/lan-na-zha/">artikel berikutnya</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Menggunakan SSD di Ubuntu]]></title>
    <link href="http://software.endy.muhardin.com/linux/menggunakan-ssd-di-ubuntu/"/>
    <updated>2013-07-16T13:40:00+07:00</updated>
    <id>http://software.endy.muhardin.com/linux/menggunakan-ssd-di-ubuntu</id>
    <content type="html"><![CDATA[<p>Beberapa minggu yang lalu, saya mengganti harddisk menjadi SSD (Solid State Disk).
Pengaruhnya sangat signifikan, dari tekan tombol power sampai desktop siap digunakan hanya makan waktu &lt; 10 detik.
Sebelumnya juga tidak terlalu lama, tapi masih berkisar di atas 1 menit. Demikian juga setelah login, menyalakan Google Chrome, hanya sekejap mata browser sudah tampil. Sebelumnya butuh waktu 5-10 detik.</p>

<p>Pemasangan harddisk tidak jauh berbeda dengan proses instalasi harddisk pada umumnya. Tinggal lepas harddisk lama, dan pasang yang baru. Walaupun demikian, ada beberapa tuning yang harus kita lakukan berkaitan dengan karakteristik SSD, yaitu:</p>

<ul>
<li>optimasi file/folder temporary</li>
<li>mengganti scheduler</li>
<li>optimasi proses hapus</li>
</ul>


<!--more-->


<h2>Opsi atime</h2>

<p>Pada waktu awal dikeluarkan, SSD sudah memiliki karakteristik baca-tulis yang sangat cepat, karena tidak ada bagian bergerak (moving parts) di dalamnya. Walaupun demikian, ada kekurangan SSD (dan juga flashdisk USB yang biasa kita gunakan) yaitu umur pakainya yang relatif pendek. Semakin sering ditulis dan dihapus, maka umurnya semakin pendek.</p>

<p>Karena keterbatasan tersebut, maka ada beberapa <a href="http://askubuntu.com/questions/1400/how-do-i-optimize-the-os-for-ssds">tips tuning Linux</a> supaya dia tidak terlalu sering tulis-hapus, yaitu:</p>

<ul>
<li>mematikan fungsi <code>atime</code>. Fungsi <code>atime</code> gunanya untuk mengupdate keterangan di file dan folder, menunjukkan kapan dia terakhir diakses.</li>
<li>memindahkan file temporary dan logfile ke memori sehingga tidak menulis ke harddisk.</li>
</ul>


<p>Seiring perkembangan teknologi, keterbatasan umur SSD ini sudah berhasil diatasi. <a href="http://www.storagesearch.com/ssdmyths-endurance.html">Sebuah percobaan di tahun 2007</a> membuktikan bahwa bila kita melakukan tulis-hapus-tulis-hapus dengan kecepatan 80Mbps 24 jam sehari, maka SSD bisa bertahan sampai 51 tahun. Itu percobaan tahun 2007, tentu di tahun 2013 ini SSD sudah semakin baik. Lagipula dalam kurun waktu tersebut kita pasti akan mengganti harddisk. Bukan karena rusak, melainkan karena sudah tidak muat lagi menampung segala macam foto, musik, video yang kita miliki. Seperti halnya di tahun 2000, kita sudah merasa cukup dengan floppy disk 1,4 MB :)</p>

<p>Jadi sebetulnya kita tidak perlu khawatir lagi, khususnya dengan fungsi <code>atime</code> pada Linux.</p>

<p>Bagi yang masih khawatir, bisa mematikan fungsi <code>atime</code> ini pada file <code>/etc/fstab</code> dengan menambahkan opsi <code>noatime</code>. Berikut isi file <code>/etc/fstab</code> yang asli</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># / was on /dev/sda1 during installation
</span><span class='line'>UUID=a7c6516b-b6c7-481a-b85f-5297f6ffcbbb        /     ext4    errors=remount-ro 0  1
</span><span class='line'># /home was on /dev/sda6 during installation
</span><span class='line'>UUID=0dfcd40a-28bd-4d7f-8e41-4ab85ef776fa        /home ext4    defaults          0  2</span></code></pre></td></tr></table></div></figure>


<p>Dan ini yang telah ditambahi opsi <code>noatime</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># / was on /dev/sda1 during installation
</span><span class='line'>UUID=a7c6516b-b6c7-481a-b85f-5297f6ffcbbb        /     ext4    noatime,nodiratime,errors=remount-ro 0   1
</span><span class='line'># /home was on /dev/sda6 during installation
</span><span class='line'>UUID=0dfcd40a-28bd-4d7f-8e41-4ab85ef776fa        /home ext4    noatime,nodiratime,defaults          0   2</span></code></pre></td></tr></table></div></figure>


<p>Tapi sekali lagi saya tekankan bahwa ini tidak perlu. Selain umur pakai SSD yang sudah dijelaskan di atas, juga optimasi di sisi Linux sendiri. Secara default, <a href="http://askubuntu.com/questions/2099/is-it-worth-to-tune-ext4-with-noatime">Linux masa kini menggunakan opsi <code>relatime</code> yang lebih cerdas daripada <code>atime</code></a>.</p>

<h2>Temporary File/Folder</h2>

<p>Optimasi ini bermanfaat tidak cuma untuk harddisk SSD. Intinya, file temporary yang biasanya ada di folder <code>/tmp</code> dan berbagai log aplikasi yang ada di <code>/var/log</code> akan kita pindahkan ke RAM. Akses baca-tulis dari RAM jauh lebih cepat daripada disk. Konsekuensinya, file yang dipindah ke memori ini akan hilang pada waktu komputer direstart. Untuk komputer desktop tidak masalah karena kita jarang menggunakan logfile. Tapi ini menjadi masalah buat server, karena logfile berguna untuk kebutuhan analisa dan troubleshooting bila terjadi masalah.</p>

<p>Untuk memindahkan kegiatan baca-tulis folder <code>/tmp</code> dan <code>/var/log</code> dari harddisk ke memori, tambahkan baris berikut di <code>/etc/fstab</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tmpfs  /tmp            tmpfs   defaults,noatime,mode=1777 0 0
</span><span class='line'>tmpfs  /var/spool      tmpfs   defaults,noatime,mode=1777 0 0
</span><span class='line'>tmpfs  /var/log        tmpfs   defaults,noatime,mode=0755 0 0</span></code></pre></td></tr></table></div></figure>


<p>Entri yang ada labelnya <code>tmpfs</code> artinya akan disimpan di RAM.</p>

<p>Semua file dan folder yang bersifat sementara bisa kita pindahkan ke <code>tmpfs</code>. Beberapa orang juga menaruh <code>/var/cache/apt/archives</code> (berisi file <code>*.deb</code> yang diunduh selama proses instalasi) dalam <code>tmpfs</code> agar tidak bikin penuh harddisk. Saya tidak melakukannya karena membutuhkan file ini untuk keperluan [upgrade dan replikasi instalasi].</p>

<p>Walaupun demikian, folder <code>/var/tmp</code> jangan disimpan di <code>tmpfs</code>, karena dia <a href="http://linuxers.org/article/differences-between-tmp-and-vartmp">berbeda dengan file temporary lainnya</a></p>

<h2>I/O Scheduler</h2>

<p>Linux secara default menganggap kita menggunakan harddisk tradisional. Dia menggunakan sistem antrian (scheduler) <a href="http://en.wikipedia.org/wiki/CFQ">CFQ</a>, mendahulukan request yang lokasinya terdekat dengan posisi jarum harddisk (sehingga lebih cepat). Karena SSD tidak pakai jarum, akses ke semua tempat dalam disk kecepatannya sama, sehingga tidak perlu diatur seperti CFQ. Untuk itu, kita bisa gunakan scheduler <a href="http://en.wikipedia.org/wiki/Deadline_scheduler">deadline</a> yang lebih cepat.</p>

<p>Posisi scheduler yang sedang aktif bisa dilihat dengan perintah berikut</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /sys/block/sda/queue/scheduler</span></code></pre></td></tr></table></div></figure>


<p>Outputnya di Ubuntu saya seperti ini</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>noop [deadline] cfq</span></code></pre></td></tr></table></div></figure>


<p>Artinya yang sedang aktif adalah <code>deadline</code>, dan pilihan lain yang tersedia adalah <code>noop</code> dan <code>cfq</code>. Entah kenapa, Ubuntu sudah memilih <code>deadline</code> secara default, sehingga saya tidak perlu melakukan konfigurasi tambahan. Namun bila kondisinya berbeda di komputer Anda, tambahkan dua baris ini di akhir file <code>/etc/rc.local</code> di atas baris <code>exit 0</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo deadline &gt; /sys/block/sda/queue/scheduler
</span><span class='line'>echo 1 &gt; /sys/block/sda/queue/iosched/fifo_batch</span></code></pre></td></tr></table></div></figure>


<p>Ganti <code>sda</code> dengan nama device harddisk Anda.</p>

<h2>Optimasi Proses Hapus</h2>

<p>Harddisk SSD memiliki <a href="http://en.wikipedia.org/wiki/TRIM">fitur TRIM</a> yang memungkinkan SSD mencatat blok mana yang sudah tidak terpakai (karena filenya dihapus), sehingga bisa digunakan lagi oleh file lain. Fitur TRIM ini bisa dilakukan secara otomatis maupun secara manual.</p>

<p>Untuk mengaktifkan TRIM otomatis, tambahkan opsi <code>discard</code> di <code>/etc/fstab</code> seperti ini</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># / was on /dev/sda1 during installation
</span><span class='line'>UUID=a7c6516b-b6c7-481a-b85f-5297f6ffcbbb       /       ext4    discard,errors=remount-ro 0  1
</span><span class='line'># /home was on /dev/sda6 during installation
</span><span class='line'>UUID=0dfcd40a-28bd-4d7f-8e41-4ab85ef776fa       /home   ext4    discard,defaults          0  2</span></code></pre></td></tr></table></div></figure>


<p>Walaupun demikian, TRIM otomatis <a href="https://patrick-nagel.net/blog/archives/337">kadangkala malah membuat lambat</a>. Untuk itu, kadangkala kita perlu menjalankan trim secara manual dengan perintah berikut</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo fstrim -v /
</span><span class='line'>sudo fstrim -v /home</span></code></pre></td></tr></table></div></figure>


<p>Perintah tersebut dijalankan untuk setiap partisi dalam harddisk SSD kita. Contohnya seperti di atas bila Anda seperti saya, memisahkan antara partisi <code>/</code> dan <code>/home</code>.</p>

<p>Kita juga bisa menjalankannya secara terjadwal menggunakan <code>cron</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memasang Sertifikat SSL]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/memasang-sertifikat-ssl/"/>
    <updated>2013-07-12T14:14:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/memasang-sertifikat-ssl</id>
    <content type="html"><![CDATA[<p>Setelah kita menjalankan semua prosedur untuk mendapatkan digital certificate, tiba saatnya kita memasangnya di webserver supaya bisa melayani request https. Pada artikel ini, kita akan membahas konfigurasi https pada webserver yang sering digunakan. Karena banyaknya merek webserver yang beredar di pasaran, kita akan ambil dua sebagai perwakilan, yaitu Tomcat mewakili webserver Java, dan Nginx mewakili non-Java. Webserver Java merek lain seperti JBoss, Jetty, Glassfish, dan rekan-rekannya memiliki cara konfigurasi yang mirip dengan Tomcat. Demikian juga Apache HTTPD, Lighttpd, Mongrel, dan sejawatnya memiliki cara konfigurasi yang mirip dengan Nginx.</p>

<p>Artikel ini adalah bagian terakhir dari 4 artikel, yaitu:</p>

<ol>
<li><a href="http://software.endy.muhardin.com/aplikasi/apa-itu-ssl/">Apa itu SSL</a></li>
<li><a href="http://software.endy.muhardin.com/aplikasi/membuat-self-signed-certificate/">Membuat self-signed certificate</a></li>
<li><a href="http://software.endy.muhardin.com/aplikasi/membeli-sertifikat-ssl/">Membeli sertifikat SSL</a></li>
<li><a href="http://software.endy.muhardin.com/aplikasi/memasang-sertifikat-ssl/">Memasang sertifikat SSL</a></li>
</ol>


<!--more-->


<p>Untuk mengaktifkan fitur https pada webserver, pada prinsipnya kita membutuhkan tiga jenis file:</p>

<ol>
<li>Private Key</li>
<li>Certificate yang sudah diberikan signature oleh Certificate Authority (CA)</li>
<li>Certificate CA yang memberikan signature. File jenis ini bisa terdiri dari banyak file, tergantung apakah CA tersebut memiliki intermediate certificate atau tidak</li>
</ol>


<p>Sebagai contoh, kita akan gunakan file-file berikut yang didapatkan dari <a href="https://www.startssl.com/?app=1">penyedia SSL gratis StartSSL</a>. File self-signed yang kita buat di artikel bagian kedua juga bisa digunakan, malah lebih mudah karena sertifikat CA hanya satu, sedangkan yang dari StartSSL ada 2 file, satu Root CA dan satu Intermediate CA. Berikut adalah file-file tersebut:</p>

<ol>
<li>Private Key : <code>demo.muhardin.com.key</code></li>
<li>Sertifikat yang sudah ditandatangani CA : <code>demo.muhardin.com.crt</code></li>
<li>Sertifikat Root CA : <code>ca.pem</code></li>
<li>Sertifikat Intermediate CA : <code>sub.class1.server.ca.pem</code></li>
</ol>


<p>Ekstensi file <code>crt</code> dan <code>pem</code> sama saja. Sama-sama file text yang bisa dibuka dengan Gedit atau Notepad.</p>

<h2>SSL dengan Nginx</h2>

<h3>Pengecekan Awal</h3>

<p>Sebelum mulai, pastikan dulu virtual host kita sudah berjalan. Berikut konfigurasi virtual host saya</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server{
</span><span class='line'>    server_name demo.muhardin.com;
</span><span class='line'>    root /var/www/demo.muhardin.com/public_html;
</span><span class='line'>    index index.html;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Bila kita jalankan di laptop sendiri (localhost), tambahkan baris berikut di <code>/etc/hosts</code> supaya pada waktu kita mengakses alamat <code>http://demo.muhardin.com</code> akan diarahkan ke Nginx di laptop sendiri.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>127.0.0.1    demo.muhardin.com</span></code></pre></td></tr></table></div></figure>


<p>Coba browse ke <code>http://demo.muhardin.com</code>, pastikan bisa diakses dengan baik.</p>

<h3>Private Key</h3>

<p>Private key kita normalnya disimpan dalam bentuk terenkripsi dengan passphrase. Kita bisa menggunakan file ini apa adanya, tapi setiap kali Nginx dijalankan, kita harus mengentri passphrasenya. Ini tentu lebih aman, karena private key kita selalu berada dalam bentuk yang terlindungi.</p>

<p>Tapi untuk keperluan development, pada saat private key juga bikinan sendiri, kita bisa membuka file ini menjadi bentuk plain text dengan perintah berikut</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl rsa -in demo.muhardin.com.key -out demo.muhardin.com.key.txt</span></code></pre></td></tr></table></div></figure>


<p>Tentu kita akan ditanyai passphrase. Setelah itu file private key yang tidak terenkripsi (plain text) akan dibuat di <code>demo.muhardin.key.txt</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Enter pass phrase for demo.muhardin.com.key:
</span><span class='line'>writing RSA key</span></code></pre></td></tr></table></div></figure>


<h3>CA Certificate</h3>

<p>Bila CA kita memiliki rantai sertifikat, kita harus gabungkan semua menjadi satu file. Ini bisa dilakukan dengan membuka semuanya di text editor, kemudian select all, copy, paste isinya ke file baru. Dimulai dari Root CA sampai ke Intermediate paling bawah.</p>

<p>CA yang memiliki rantai sertifikat contohnya Comodo. Kita bisa lihat informasi rantainya <a href="https://support.comodo.com/index.php?_m=knowledgebase&amp;_a=viewarticle&amp;kbarticleid=1182">di sini</a>. Sebagai contoh, bila kita mendapatkan Free Certificate dari Comodo, maka rantainya adalah:</p>

<ol>
<li>Root : AddTrustExternalCARoot.crt</li>
<li>Intermediate 1 : UTNAddTrustSGCCA.crt</li>
<li>Intermediate 2 : ComodoUTNSGCCA.crt</li>
<li>Intermediate 3 : EssentialSSLCA_2.crt</li>
</ol>


<p>Setelah itu terakhir barulah sertifikat kita sendiri yang ditandatangani oleh Intermediate 3.</p>

<p>Kita bisa juga menggabungkan semuanya menggunakan perintah linux. Contohnya, seandainya <code>demo.muhardin.com.crt</code> ditandatangani oleh Comodo, maka perintahnya adalah sebagai berikut:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat demo.muhardin.com.crt EssentialSSLCA_2.crt ComodoUTNSGCCA.crt UTNAddTrustSGCCA.crt AddTrustExternalCARoot.crt &gt; sertifikat-gabungan.crt</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Awas jangan salah urutannya. Mulai dari sertifikat kita sendiri, kemudian intermediate 3 yang menandatangani sertifikat kita sendiri, intermediate 2, begitu seterusnya sampai sertifikat Root di paling akhir.</p></blockquote>

<h3>Konfigurasi Nginx</h3>

<p>Berikut adalah konfigurasi Nginx yang harus ditambahkan.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>listen 443 default_server ssl;
</span><span class='line'>ssl_certificate     /etc/nginx/sertifikat-gabungan.crt;
</span><span class='line'>ssl_certificate_key /etc/nginx/demo.muhardin.com.key.txt;</span></code></pre></td></tr></table></div></figure>


<p>Isi konfigurasi virtual host <code>demo.muhardin.com</code> selengkapnya</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server{
</span><span class='line'>    server_name demo.muhardin.com;
</span><span class='line'>    root /var/www/demo.muhardin.com/public_html;
</span><span class='line'>    index index.html;
</span><span class='line'>
</span><span class='line'>    listen 443 default_server ssl;
</span><span class='line'>    ssl_certificate     /etc/nginx/sertifikat-gabungan.crt;
</span><span class='line'>    ssl_certificate_key /etc/nginx/demo.muhardin.com.key.txt;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>SSL dengan Tomcat</h2>

<p>Tomcat dan juga webserver Java lainnya membutuhkan file keystore yang berisi semua sertifikat dan private key yang dibutuhkan. Untuk itu, kita akan memasukkan private key, sertifikat yang sudah ditandatangani CA, dan sertifikat milik CA (beserta semua intermediate) ke dalam keystore. Prosedurnya sebagai berikut:</p>

<ol>
<li>Buat database berisi private key dan sertifikat domain yang sudah ditandatangani CA dalam format PKCS#12. Ini dilakukan menggunakan <code>openssl</code></li>
<li>Konversi format PKCS#12 menjadi JKS menggunakan keytool</li>
<li>Import sertifikat CA dan sertifikat intermediate satu persatu</li>
<li>Pasang di Tomcat</li>
</ol>


<h3>Membuat database PKCS12</h3>

<p>Gabungkan dulu semua sertifikat CA menjadi satu file. Ini penting dilakukan, kalau tidak rantai sertifikasinya tidak akan tersambung dan browser kita tetap akan menampilkan peringatan seperti SSL self-signed. Sama seperti penggabungan pada waktu konfigurasi Nginx, mulai dari intermediate CA yang menandatangani sertifikat kita, terus berurutan sampai Root CA di posisi terakhir.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat EssentialSSLCA_2.crt ComodoUTNSGCCA.crt UTNAddTrustSGCCA.crt AddTrustExternalCARoot.crt &gt; ca-chain.crt</span></code></pre></td></tr></table></div></figure>


<p>Verifikasi apakah sertifikat kita sudah lengkap rantainya sampai ke Root CA</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl verify -CAfile ca-chain.crt demo.muhardin.com.crt</span></code></pre></td></tr></table></div></figure>


<p>Kalau tidak tersambung sampai Root CA, pesan errornya seperti ini</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>demo.muhardin.com.crt: OU = Domain Control Validated, OU = EssentialSSL, CN = demo.muhardin.com
</span><span class='line'>error 20 at 0 depth lookup:unable to get local issuer certificate</span></code></pre></td></tr></table></div></figure>


<p>Kalau sukses, outputnya seperti ini</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>demo.muhardin.com.crt: OK</span></code></pre></td></tr></table></div></figure>


<p>Jalankan perintah berikut untuk membuat database PKCS12 berisi private key, sertifikat domain, dan rantai sertifikat CA</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl pkcs12 -export -chain \
</span><span class='line'>-inkey myserver.key \
</span><span class='line'>-in demo.muhardin.com.crt \
</span><span class='line'>-name "demo.muhardin.com" \
</span><span class='line'>-CAfile ca-chain.crt \
</span><span class='line'>-caname "Intermediate 3" \
</span><span class='line'>-caname "Intermediate 2" \
</span><span class='line'>-caname "Intermediate 1" \
</span><span class='line'>-caname "Root CA" \
</span><span class='line'>-out demo.muhardin.com.p12</span></code></pre></td></tr></table></div></figure>


<p>Opsi <code>caname</code> gunanya untuk memberi nama untuk sertifikat CA agar lebih mudah dipahami sertifikat mana mengacu ke CA mana. Urutannya harus sesuai dengan urutan file yang kita gabungkan pada langkah sebelumnya.</p>

<p>Kita akan ditanyai passphrase tiga kali. Pertama untuk membuka private key, kedua dan ketiga untuk password database PKCS12.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Enter pass phrase for demo.muhardin.com.key:
</span><span class='line'>Enter Export Password:
</span><span class='line'>Verifying - Enter Export Password:</span></code></pre></td></tr></table></div></figure>


<p>Kita akan mendapatkan file <code>demo.muhardin.com.p12</code>.</p>

<h3>Konversi PKCS12 menjadi JKS</h3>

<p>JKS adalah format database key dalam Java, atau dikenal dengan istilah keystore. Kita bisa membuatnya dengan cara import dari database berformat PKCS12. Berikut perintahnya:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keytool -importkeystore \
</span><span class='line'>-srcstoretype PKCS12 \
</span><span class='line'>-srckeystore demo.muhardin.com.p12 \
</span><span class='line'>-destkeystore demo.muhardin.com.jks</span></code></pre></td></tr></table></div></figure>


<p>Kita akan ditanyai password sebanyak tiga kali. Pertama dan kedua adalah password keystore JKS yang baru, sedangkan password ketiga adalah password database PKCS12 yang kita buat di langkah sebelumnya.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Enter destination keystore password:
</span><span class='line'>Re-enter new password: 
</span><span class='line'>Enter source keystore password:
</span><span class='line'>Entry for alias 1 successfully imported.
</span><span class='line'>Import command completed:  1 entries successfully imported, 0 entries failed or cancelled</span></code></pre></td></tr></table></div></figure>


<p>Verifikasi hasilnya menggunakan perintah berikut</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keytool -keystore demo.muhardin.com.jks -list</span></code></pre></td></tr></table></div></figure>


<p>Berikut outputnya, menyatakan bahwa kita sudah punya satu data dalam <code>demo.muhardin.com.jks</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Enter keystore password:
</span><span class='line'>
</span><span class='line'>Keystore type: JKS
</span><span class='line'>Keystore provider: SUN
</span><span class='line'>
</span><span class='line'>Your keystore contains 1 entry
</span><span class='line'>
</span><span class='line'>demo.muhardin.com, Jul 9, 2013, PrivateKeyEntry, 
</span><span class='line'>Certificate fingerprint (SHA1): 10:A6:A1:7B:A4:46:10:38:0C:5C:72:77:FA:EB:86:46:91:DA:E7:C0</span></code></pre></td></tr></table></div></figure>


<h3>Konfigurasi Tomcat</h3>

<p>Copy file <code>demo.muhardin.com.jks</code> ke dalam folder konfigurasi Tomcat. Di laptop saya lokasinya ada di <code>/opt/tomcat/conf</code>. Lalu buka file <code>server.xml</code> di folder yang sama menggunakan text editor. Edit baris berikut</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Connector</span> <span class="na">port=</span><span class="s">&quot;8443&quot;</span> <span class="na">protocol=</span><span class="s">&quot;HTTP/1.1&quot;</span> <span class="na">SSLEnabled=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>    <span class="na">maxThreads=</span><span class="s">&quot;150&quot;</span> <span class="na">scheme=</span><span class="s">&quot;https&quot;</span> <span class="na">secure=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>    <span class="na">clientAuth=</span><span class="s">&quot;false&quot;</span> <span class="na">sslProtocol=</span><span class="s">&quot;TLS&quot;</span>
</span><span class='line'>    <span class="na">keystoreFile=</span><span class="s">&quot;conf/demo.muhardin.com.jks&quot;</span>
</span><span class='line'>    <span class="na">keystorePass=</span><span class="s">&quot;test1234&quot;</span>
</span><span class='line'>    <span class="na">keyAlias=</span><span class="s">&quot;demo.muhardin.com&quot;</span>
</span><span class='line'><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sesuaikan variabel berikut:</p>

<ul>
<li>keystoreFile : lokasi keystore JKS</li>
<li>keystorePass : password untuk membuka keystore</li>
<li>keyAlias : nama alias untuk sertifikat domain (karena isi keystore ada 3 entri, harus dijelaskan mana yang akan digunakan)</li>
</ul>


<h2>Test</h2>

<p>Setelah semua selesai dikonfigurasi, Nginx bisa dites dengan mengakses <code>https://demo.muhardin.com</code>, sedangkan Tomcat bisa diakses di <code>https://demo.muhardin.com:8443</code>.</p>

<p>Bila kita menggunakan sertifikat dari CA resmi, walaupun gratis kita akan mendapatkan warna hijau di address bar</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/07/ssl/04-tomcat-https-green.png" title="Tomcat HTTPS Green" ></p>

<p>Namun bila kita menggunakan CA buatan sendiri (self-signed), maka pada waktu pertama diakses, kita akan diberikan peringatan.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/07/ssl/01-ssl-warning.png" title="Peringatan SSL Self Signed" ></p>

<p>Agar bisa tetap diakses, kita bisa klik Add Exception. Kita akan diperlihatkan informasi tentang sertifikat SSL</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/07/ssl/02-add-exception.png" title="Add Exception" ></p>

<p>Kita bisa melihat detail informasi dari sertifikat tersebut, siapa pemilik server dan siapa yang menandatangani sertifikatnya</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/07/ssl/03-certificate-info.png" title="Detail Informasi Sertifikat" ></p>

<p>Bila kita klik Confirm Security Exception, barulah halaman web kita ditampilkan. Tapi masih ada warna merah di address bar.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/07/ssl/05-tomcat-https-red.png" title="Tomcat HTTPS Red" ></p>

<h2>Error yang umum terjadi</h2>

<h3>Password private key berbeda dengan password keystore</h3>

<p>Kadangkala pada waktu menjalankan Tomcat, kita menjumpai pesan error berikut</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>SEVERE: Catalina.start
</span><span class='line'>LifecycleException:  Protocol handler initialization failed: java.io.IOException: Cannot recover key
</span></code></pre></td></tr></table></div></figure>


<p>Ini disebabkan karena password untuk membuka keystore berbeda dengan password untuk membuka private key. Biasanya terjadi bila kita mengganti password keystore setelah melakukan import. Keytool hanya akan mengganti password keystore, tapi tidak mengganti password private key.</p>

<p>Kita harus samakan dulu dengan mengganti salah satunya.</p>

<p>Bila ingin mengganti password private key, berikut perintahnya</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>keytool -keystore demo.muhardin.com.jks -alias demo.muhardin.com -keypasswd
</span><span class='line'>Enter keystore password: Masukkan password keystore
</span><span class='line'>Enter key password for <span class="nt">&lt;loket.asialink.co.id&gt;</span>: Masukkan password private key yang lama
</span><span class='line'>New key password for <span class="nt">&lt;loket.asialink.co.id&gt;</span>: Masukkan password private key yang baru, samakan dengan password keystore
</span><span class='line'>Re-enter new key password for <span class="nt">&lt;loket.asialink.co.id&gt;</span>: Konfirmasi password private key yang baru
</span></code></pre></td></tr></table></div></figure>


<p>Atau bila ingin mengganti password keystore, berikut perintahnya</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>keytool -keystore demo.muhardin.com.jks -storepasswd
</span></code></pre></td></tr></table></div></figure>


<h3>Certificate Chain tidak tersambung</h3>

<p>Ada kalanya sertifikat yang sudah kita beli mahal-mahal tetap menimbulkan warning di browser. Ini bisa disebabkan karena dua hal, yaitu:</p>

<ol>
<li><p>CA tidak dikenali oleh browser. Pastikan kita membeli sertifikat dari CA yang dikenali browser. Daftarnya bisa dilihat <a href="http://en.wikipedia.org/wiki/Comparison_of_SSL_certificates_for_web_servers">di Wikipedia</a></p></li>
<li><p>Kita tidak menginstal rantai sertifikat dengan benar.</p></li>
</ol>


<p>Untuk masalah kedua, kita bisa periksa menggunakan perintah <code>openssl</code> di commandline sebagai berikut</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>openssl s_client -connect demo.muhardin.com:443
</span></code></pre></td></tr></table></div></figure>


<p>Kadangkala kita mendapat pesan error berikut</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>CONNECTED(00000003)
</span><span class='line'>140315329672896:error:14077438:SSL routines:SSL23_GET_SERVER_HELLO:tlsv1 alert internal error:s23_clnt.c:741:
</span></code></pre></td></tr></table></div></figure>


<p>Hal tersebut disebabkan karena <a href="https://bugs.launchpad.net/ubuntu/+source/openjdk-6/+bug/1006776">bug pada OpenJDK</a>, gunakan opsi <code>-ssl3</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>openssl s_client -connect demo.muhardin.com:443 -ssl3
</span></code></pre></td></tr></table></div></figure>


<p>Bila <a href="http://blog.fnsecurity.org/2013/02/proper-ssl-chaining.html">sertifikat kita tidak tersambung sampai Root CA</a>, maka kita akan mendapat error seperti ini</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>CONNECTED(00000003)
</span><span class='line'>depth=0 description = KWbw1iy6BUBg3JQ8, C = ID, CN = demo.muhardin.com, emailAddress = endy.muhardin@gmail.com
</span><span class='line'>verify error:num=20:unable to get local issuer certificate
</span><span class='line'>verify return:1
</span><span class='line'>depth=0 description = KWbw1iy6BUBg3JQ8, C = ID, CN = demo.muhardin.com, emailAddress = endy.muhardin@gmail.com
</span><span class='line'>verify error:num=27:certificate not trusted
</span><span class='line'>verify return:1
</span><span class='line'>depth=0 description = KWbw1iy6BUBg3JQ8, C = ID, CN = demo.muhardin.com, emailAddress = endy.muhardin@gmail.com
</span><span class='line'>verify error:num=21:unable to verify the first certificate
</span><span class='line'>verify return:1
</span></code></pre></td></tr></table></div></figure>


<p>Periksa lagi pembuatan sertifikat kita. Pastikan rantai sertifikat CA sudah diimport dengan benar. Biasanya ini terjadi pada waktu pembuatan keystore Java. Coba ikuti lagi langkah-langkah di atas dengan teliti.</p>

<p>Sertifikat yang benar harusnya mengeluarkan output seperti ini</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>CONNECTED(00000003)
</span><span class='line'>depth=2 C = IL, O = StartCom Ltd., OU = Secure Digital Certificate Signing, CN = StartCom Certification Authority
</span><span class='line'>verify error:num=19:self signed certificate in certificate chain
</span><span class='line'>verify return:0
</span><span class='line'>---
</span><span class='line'>Certificate chain
</span><span class='line'> 0 s:/description=KWbw1iy6BUBg3JQ8/C=ID/CN=demo.muhardin.com/emailAddress=endy.muhardin@gmail.com
</span><span class='line'>   i:/C=IL/O=StartCom Ltd./OU=Secure Digital Certificate Signing/CN=StartCom Class 1 Primary Intermediate Server CA
</span><span class='line'> 1 s:/C=IL/O=StartCom Ltd./OU=Secure Digital Certificate Signing/CN=StartCom Class 1 Primary Intermediate Server CA
</span><span class='line'>   i:/C=IL/O=StartCom Ltd./OU=Secure Digital Certificate Signing/CN=StartCom Certification Authority
</span><span class='line'> 2 s:/C=IL/O=StartCom Ltd./OU=Secure Digital Certificate Signing/CN=StartCom Certification Authority
</span><span class='line'>   i:/C=IL/O=StartCom Ltd./OU=Secure Digital Certificate Signing/CN=StartCom Certification Authority
</span></code></pre></td></tr></table></div></figure>


<p>Kita bisa lihat pada output di atas bahwa:</p>

<ul>
<li>issuer di sertifikat 0 sama dengan subject di sertifikat 1</li>
<li>issuer di sertifikat 1 sama dengan subject di sertifikat 2</li>
<li>issuer di sertifikat 2 sama dengan subject dirinya sendiri (self-signed)</li>
</ul>


<p>Root CA memang self-signed, karena dia paling atas. Sertifikat self-signed milik Root CA inilah yang ditanam di dalam aplikasi seperti dijelaskan di <a href="http://software.endy.muhardin.com/aplikasi/apa-itu-ssl/">artikel bagian pertama</a>.</p>

<p>Demikianlah langkah-langkah untuk mengaktifkan SSL di Tomcat dan Nginx. Selamat mencoba. Kalau ada error atau hal yang kurang jelas, silahkan ditulis di komentar.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membeli Sertifikat SSL]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/membeli-sertifikat-ssl/"/>
    <updated>2013-07-11T19:55:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/membeli-sertifikat-ssl</id>
    <content type="html"><![CDATA[<p>Pada waktu saya pertama kali ingin membeli sertifikat SSL, saya dihadapkan pada berbagai jenis sertifikat yang bisa dibeli. Butuh waktu dan usaha yang relatif besar untuk mengetahui maksud dari macam-macam jenis sertifikat tersebut. Pada artikel ini, kita akan membahas berbagai jenis sertifikat tersebut dengan bahasa yang mudah dipahami.</p>

<p>Artikel ini adalah bagian ketiga dari 4 artikel, yaitu:</p>

<ol>
<li><a href="http://software.endy.muhardin.com/aplikasi/apa-itu-ssl/">Apa itu SSL</a></li>
<li><a href="http://software.endy.muhardin.com/aplikasi/membuat-self-signed-certificate/">Membuat self-signed certificate</a></li>
<li><a href="http://software.endy.muhardin.com/aplikasi/membeli-sertifikat-ssl/">Membeli sertifikat SSL</a></li>
<li><a href="http://software.endy.muhardin.com/aplikasi/memasang-sertifikat-ssl/">Memasang sertifikat SSL</a></li>
</ol>


<!--more-->


<h2>Vendor SSL</h2>

<p>Ada banyak sekali vendor SSL yang tersedia. Beberapa yang populer antara lain:</p>

<ul>
<li><a href="http://www.comodo.com/">Comodo</a></li>
<li><a href="http://www.verisign.com/">Verisign</a></li>
<li><a href="http://www.verizonenterprise.com/products/security/identity/ssl/">Cybertrust/Verizon</a></li>
<li><a href="http://www.startssl.com/">StartSSL</a></li>
<li>dan masih banyak yang lain lagi</li>
</ul>


<p>Masing-masing vendor menyediakan berbagai paket dan kategori, masing-masing diberi nama yang terdengar canggih dan hi-tech. Ini semua membuat kita yang baru pertama kali membeli sertifikat menjadi bingung. Berdasarkan hasil tanya-tanya dan googling, akhirnya saya mendapatkan metode pengelompokan yang lebih mudah dipahami end-user.</p>

<p>Kita bisa membedakan sertifikat SSL berdasarkan dua hal:</p>

<ul>
<li>cakupan penggunaan</li>
<li>prosedur validasi</li>
</ul>


<h2>Penggunaan Sertifikat</h2>

<p>Sertifikat SSL biasanya digunakan untuk webserver dan mailserver. Kedua layanan ini bekerja berdasarkan nama domain. Misalnya saya punya domain <code>artivisi.com</code>. Dari domain ini, saya bisa memiliki banyak server misalnya:</p>

<ul>
<li>www.artivisi.com : website perusahaan</li>
<li>demo.artivisi.com : situs untuk demo produk dan layanan</li>
<li>mail.artivisi.com : mail server, untuk mengirim dan menerima email</li>
</ul>


<p>Kita bisa membedakan jenis sertifikat SSL berdasarkan penggunaannya pada domain di atas menjadi:</p>

<ul>
<li>single domain</li>
<li>wildcard domain</li>
<li>multi domain</li>
</ul>


<h3>Single Domain</h3>

<p>Sertifikat single domain hanya bisa digunakan di satu domain saja. Misalnya kita membeli sertifikat untuk <code>www.artivisi.com</code> sehingga website ArtiVisi bisa diakses melalui <code>https://www.artivisi.com</code>. Sertifikat yang kita beli ini hanya bisa digunakan untuk domain <code>www.artivisi.com</code>. Dia tidak bisa kita pasang di mail server yang memiliki nama <code>mail.artivisi.com</code>.</p>

<p>Bila kita membutuhkan SSL untuk <code>mail.artivisi.com</code>, kita harus membeli sertifikat sekali lagi. Demikian seterusnya, masing-masing domain/subdomain harus memiliki sertifikat sendiri.</p>

<blockquote><p>Wah, apa tidak merepotkan? Belum lagi harganya pasti akan jadi mahal kalau setiap subdomain harus beli lagi.</p></blockquote>

<p>Nah, pada saat kita merasa kerepotan dan kemahalan, tiba saatnya kita membeli sertifikat <code>wildcard domain</code></p>

<h3>Wildcard Domain</h3>

<p>Sertifikat ini disebut wildcard karena satu sertifikat bisa digunakan untuk seluruh subdomain. CA akan membuatkan sertifikat dengan CN <code>*.artivisi.com</code>, sehingga bisa digunakan untuk <code>www.artivisi.com</code>, <code>mail.artivisi.com</code>, dan seluruh subdomain <code>artivisi.com</code>.</p>

<p>Harganya tentu lebih mahal daripada single domain. Sebagai gambaran kita lihat <a href="http://www.symantec.com/page.jsp?id=compare-ssl-certificates">harga dari Verisign</a>. Single domain harganya $400 dan wildcard harganya $1200. Kita baru balik modal kalau punya 3 subdomain.</p>

<h3>Multi Domain / SAN Extended</h3>

<p>Sertifikat dengan extended validation (akan dibahas di bawah) tidak bisa menggunakan mekanisme wildcard. Untuk itu, diakali dengan menaruh banyak nama domain di field <code>subject alternative name</code> (SAN), sehingga satu sertifikat bisa digunakan di banyak nama domain.</p>

<p>Dengan klasifikasi penggunaan ini, kita bisa memilih mana yang akan kita gunakan. Umumnya kita cuma memilih antara single dan wildcard. Pada kasus tertentu dimana kita menggunakan Extended Validation, barulah kita mempertimbangkan antara single domain dan multi domain.</p>

<h2>Prosedur Validasi</h2>

<p>Berdasarkan prosedur validasi, sertifikat SSL dibagi menjadi tiga jenis:</p>

<ul>
<li>Domain Validation (DV)</li>
<li>Organization Validation (OV)</li>
<li>Extended Validation (EV)</li>
</ul>


<h3>Domain Validation</h3>

<p>Metode validasi yang paling mudah dan cepat adalah domain validation. Saking mudahnya, biasanya proses ini dilakukan dengan aplikasi dan tidak melibatkan campur tangan manusia, sehingga lebih murah.</p>

<p>Domain validation memastikan bahwa pemohon benar-benar punya akses terhadap domain. Berikut cara kerjanya:</p>

<ol>
<li><p>Pemohon mengirim CSR pada CA berisi domain yang akan disertifikasi. Misalnya <code>demo.muhardin.com</code>.</p></li>
<li><p>CA akan mencari tahu siapa pemilik domain tersebut menggunakan fasilitas whois. Disana nantinya ada informasi email pemilik domain. Contoh output whois seperti ini:</p>

<p> <img src="http://software.endy.muhardin.com/images/uploads/2013/07/ssl/output-whois.png" title="Output Whois" ></p></li>
<li><p>Adakalanya orang yang membeli domain berbeda dengan orang teknis yang mengurus domain, sehingga alamat email di whois tidak bisa digunakan. Bila terjadi seperti ini, pemohon bisa minta CA menggunakan email lain, biasanya <code>postmaster@muhardin.com</code> atau <code>webmaster@muhardin.com</code>. Ini adalah alamat email standar untuk administrasi mailserver dan webserver. Jadi pastikan kedua alamat email ini dilindungi dengan baik dan hanya diberikan aksesnya pada orang yang berhak.</p></li>
<li><p>CA mengirim email ke alamat yang ditentukan di langkah sebelumnya. Di email tersebut ada kode verifikasi untuk memastikan bahwa pemohon benar-benar punya akses ke alamat email tersebut.</p></li>
<li><p>Pemohon membuktikan bahwa dia telah menerima email verifikasi. Cara yang umum dilakukan antara lain memasukkan kode verifikasi ke website CA, atau mengklik link verifikasi yang ada dalam email.</p></li>
<li><p>Setelah verifikasi dilakukan, CA akan mengirim sertifikat domain yang telah ditandatangani. Atau pemohon juga bisa mengunduhnya di website CA.</p></li>
</ol>


<p>Pada level validasi ini, CA memastikan identitas pemohon berupa:</p>

<ul>
<li>akses/kontrol terhadap domain</li>
</ul>


<h3>Organization Validation</h3>

<p>Selangkah lebih jauh, ada yang namanya Organization Validation. Pada validasi level ini, CA melakukan validasi tambahan terhadap organisasi yang meminta sertifikat SSL. Biasanya pemohon harus mengirim akta perusahaan atau bukti legalitas lainnya.</p>

<p>Pada level validasi ini, CA memastikan identitas pemohon berupa:</p>

<ul>
<li>akses/kontrol terhadap domain</li>
<li>legalitas organisasi pemilik domain</li>
</ul>


<h3>Extended Validation</h3>

<p>Pada metode validasi sebelumnya, CA sama sekali tidak melakukan validasi terhadap orang/contact person.</p>

<p><a href="http://en.wikipedia.org/wiki/Extended_Validation_Certificate">Metode Extended Validation</a> adalah metode validasi yang paling lengkap.</p>

<p>Di sini CA juga akan menghubungi langsung contact person dari organisasi pemohon sertifikat. Detail teknisnya saya kurang paham karena belum pernah membeli sertifikat EV. Konon katanya, EV ini melibatkan pemeriksaan fisik berupa kunjungan atau pertemuan dengan perwakilan organisasi.</p>

<p>Mengingat tingkat ketelitian dalam validasinya, maka sertifikat level EV tidak boleh diterbitkan dalam bentuk <em>wildcard</em>. Ini disebabkan karena sertifikat wildcard memungkinkan kita membuat domain tanpa harus divalidasi CA. Bila kita ingin satu sertifikat untuk banyak domain, maka kita harus menggunakan Subject Alternative Name (SAN), dimana masing-masing nama domain akan divalidasi satu-persatu.</p>

<p>Sertifikat yang memiliki validasi EV akan terlihat berbeda di browser, ditandai dengan adanya <em>green bar</em> seperti di Internet Banking Mandiri</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/07/ssl/green-bar-mandiri.png" title="Green Bar Mandiri" ></p>

<p>atau di KlikBCA</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/07/ssl/01-green-bar.png" title="Green Bar BCA" ></p>

<p>Kita bisa melihat informasi detail tentang sertifikat SSL dengan cara klik green bar tersebut</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/07/ssl/02-green-bar-info.png" title="Informasi Green Bar" ></p>

<p>Pada level validasi EV, CA memastikan identitas pemohon berupa:</p>

<ul>
<li>akses/kontrol terhadap domain</li>
<li>legalitas organisasi pemilik domain</li>
<li>keberadaan fisik organisasi dan contact person yang ditugaskan mewakilinya</li>
</ul>


<h3>Memilih metode validasi</h3>

<blockquote><p>Dari ketiga metode ini, pilih mana?</p></blockquote>

<p>Pertimbangan pertama tentu masalah harga. Makin teliti validasinya, biaya akan semakin tinggi.</p>

<p>Pertimbangan kedua adalah masalah kerepotannya. Makin tinggi level validasi, makin banyak dokumen yang harus kita siapkan.</p>

<p>Satu hal yang perlu diperhatikan, <a href="http://unmitigatedrisk.com/?p=203">pengunjung awam tidak akan bisa membedakan antara Domain Validation dan Organization Validation</a> . Jadi kalau ingin memilih, cukup dua yang dipertimbangkan, Extended Validation (EV) atau non-EV.</p>

<p>Perlu diperhatikan juga bahwa validasi tidak menjamin keamanan 100%. Pernah ada kasus website palsu di Amerika Serikat yang memiliki sertifikat asli. Ceritanya bisa dibaca <a href="http://voices.washingtonpost.com/securityfix/2006/02/the_new_face_of_phishing_1.html">di sini</a>.</p>

<h3>Memilih CA</h3>

<p>CA yang menjajakan sertifikat di internet sangat banyak. Mulai dari yang gratis sampai yang mahal. Sepintas terlihat ada CA yang kredibilitasnya tinggi seperti Cybertrust atau VeriSign yang banyak dipakai bank di Indonesia, dan juga ada yang jarang terdengar seperti StartSSL atau Cacert. Kredibilitas CA ini mempengaruhi harga. Untuk produk yang setingkat, misalnya produk termurah single domain dengan domain validation, harganya bisa berbeda beberapa kali lipat. Coba bandingkan harga <a href="http://www.mangkukmerah.com/ssl">Comodo</a> dengan <a href="http://www.symantec.com/en/aa/theme.jsp?themeid=compare-ssl-certificates">Verisign</a>. Harga Comodo 240 ribu rupiah, sedangkan VeriSign 4 juta rupiah.</p>

<p>Walaupun demikian, menurut pandangan saya pribadi, masalah kredibilitas ini tidak terlalu signifikan pengaruhnya terhadap pengunjung. Sebagai ilustrasi, kita yang sering menggunakan internet banking apa pernah tahu siapa CA yang digunakan oleh bank kita? Atau apakah kita tahu siapa itu Cybertrust atau VeriSign?</p>

<p>Untuk menambah added value, beberapa CA mengeluarkan stempel (seal) yang bisa dipasang di website. Contohnya bisa dilihat di KlikBCA berikut</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/07/ssl/01-green-bar.png" title="Green Bar BCA" ></p>

<p>atau Internet Banking Mandiri berikut</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/07/ssl/stempel-ca-mandiri.png" title="Green Bar Mandiri" ></p>

<p>Tapi menurut saya, stempel inipun juga tidak menambah keyakinan pengunjung, karena siapapun bisa memasang logo tersebut dengan mudah.</p>

<p>Ada faktor lain yang lebih penting dipertimbangkan menurut saya, yaitu kompatibilitasnya di berbagai browser. CA mahal biasanya kompatibel di semua browser, sedangkan CA murah kadang-kadang tidak diakui browser, sehingga menimbulkan warning seperti halnya self-signed certificate. Kalau memang tetap mengeluarkan warning, ya buat apa kita beli. Lebih baik pakai yang gratisan saja.</p>

<p>Demikianlah penjelasan tentang bermacam-macam sertifikat SSL yang tersedia di pasaran. Silahkan pilih yang sesuai dengan kebutuhan. Setelah sertifikat didapatkan, baik self-signed atau dari CA resmi, kita akan membahas <a href="http://software.endy.muhardin.com/aplikasi/memasang-sertifikat-ssl/">cara instalasinya di artikel selanjutnya</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membuat Self Signed Certificate]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/membuat-self-signed-certificate/"/>
    <updated>2013-07-09T13:41:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/membuat-self-signed-certificate</id>
    <content type="html"><![CDATA[<p>Idealnya, sertifikat SSL disetujui (signed) oleh Certificate Authority (CA).
Proses persetujuan ini biasanya dikenakan biaya, walaupun ada juga yang <a href="http://www.startssl.com/?app=1">gratisan</a>.
Sertifikat yang disetujui CA memiliki batas waktu pemakaian. Setelah waktu tersebut habis, maka sertifikat tidak bisa digunakan dan kita harus mengurus perpanjangannya.</p>

<p>Kondisi ini tentu kurang menyenangkan pada waktu kita ada di fase development. Untuk itu kita ingin membuat sertifikat sendiri, dan kemudian menyetujuinya sendiri juga. Ini disebut dengan istilah <code>self-signed certificate</code>. Bila diakses di browser, <code>self-signed certificate</code> ini akan menimbulkan peringatan seperti screenshot dibawah.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/07/ssl/01-ssl-warning.png" title="Halaman Warning" ></p>

<p>Agar bisa mengakses halaman tersebut, kita perlu menambahkan exception. Kita akan dikonfirmasi seperti pada layar berikut</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/07/ssl/02-add-exception.png" title="Add Exception" ></p>

<p>Tapi tidak masalah, karena pada fase development yang pakai aplikasi/website ini hanya kita sendiri, bukan end-user. Nantinya sebelum dipublish untuk umum, belilah sertifikat yang benar.</p>

<p>Artikel ini adalah bagian kedua dari 4 artikel, yaitu:</p>

<ol>
<li><a href="http://software.endy.muhardin.com/aplikasi/apa-itu-ssl/">Apa itu SSL</a></li>
<li><a href="http://software.endy.muhardin.com/aplikasi/membuat-self-signed-certificate/">Membuat self-signed certificate</a></li>
<li><a href="http://software.endy.muhardin.com/aplikasi/membeli-sertifikat-ssl/">Membeli sertifikat SSL</a></li>
<li><a href="http://software.endy.muhardin.com/aplikasi/memasang-sertifikat-ssl/">Memasang sertifikat SSL</a></li>
</ol>


<!--more-->


<h2>Garis Besar Prosedur</h2>

<p>Ada beberapa langkah yang perlu kita lakukan untuk membuat self-signed certificate. Berikut adalah hasil akhir yang kita harapkan setelah semua prosedur dilalui:</p>

<ul>
<li>File private key yang dienkripsi dengan password</li>
<li>File certificate yang sudah disetujui CA</li>
<li>File certificate milik CA. Untuk self-signed filenya cuma satu. Tapi ketika kita membeli sertifikat berbayar, file dari CA ini bisa banyak tergantung dari rantai approval dari CA tersebut.</li>
<li>Khusus untuk aplikasi Java, ketiga file tersebut harus dimasukkan ke dalam database yang disebut dengan istilah <code>keystore</code></li>
</ul>


<p>Berikut adalah langkah-langkah untuk membuat self-signed certificate:</p>

<ol>
<li>Buat private key</li>
<li>Buat permohonan persetujuan sertifikat, dalam bahasa Inggris disebut Certificate Signing Request (CSR)</li>
<li>Buat dulu CA yang akan menandatangani sertifikat. Langkah ini tidak diperlukan bila kita membeli sertifikat dari CA.</li>
<li>Setujui CSR oleh CA yang dibuat sendiri. Langkah ini juga harusnya dilakukan oleh CA yang benar.</li>
<li>Khusus aplikasi Java, masukkan semua file yang dibutuhkan ke dalam <code>keystore</code></li>
</ol>


<h2>Aplikasi yang dibutuhkan</h2>

<p>Ada dua aplikasi yang umum digunakan untuk melakukan prosedur di atas, yaitu <code>openssl</code> dan <code>keytool</code>. Aplikasi <code>openssl</code> biasanya sudah terinstal di distro Linux populer sehingga kita tinggal pakai saja. Aplikasi <code>keytool</code> merupakan bawaan dari Java SDK. Kita harus menginstal dulu Java SDK untuk bisa menggunakan aplikasi ini.</p>

<p>Kedua aplikasi bisa melakukan semua prosedur di atas. Pertanyaan penting yang kita hadapi adalah</p>

<blockquote><p>Mana yang lebih baik pakai openssl atau keytool ?</p></blockquote>

<p>Setelah mencoba kedua aplikasi, saran saya adalah: gunakan OpenSSL untuk semua proses, kecuali memasukkan file ke dalam keystore. OpenSSL tidak bisa mengelola keystore, sehingga kita harus pakai keytool.</p>

<blockquote><p>Kenapa begitu?</p></blockquote>

<p>Untuk aplikasi web, sertifikat SSL biasanya digunakan oleh webserver. Bila aplikasi kita Java, maka webservernya adalah Tomcat atau Jetty. Apabila non Java, biasanya Apache HTTPD, Nginx, Lighttpd, atau lainnya.</p>

<p>Webserver untuk aplikasi Java membutuhkan file sertifikat dalam bentuk keystore, sedangkan webserver untuk aplikasi non Java membutuhkan sertifikat dalam bentuk file text.</p>

<p>Dari bentuk file text kita bisa membuat bentuk keystore dengan mudah. Cukup berbekal <code>openssl</code> dan <code>keytool</code> pekerjaan sudah bisa diselesaikan. Tapi sebaliknya, mengeluarkan private key dari keystore menjadi file text <a href="http://conshell.net/wiki/index.php/Keytool_to_OpenSSL_Conversion_tips">relatif sulit dan membutuhkan aplikasi tambahan</a>.</p>

<p>Oleh karena itu, pada artikel ini, semua langkah akan dilakukan dengan OpenSSL. Keytool akan digunakan di bagian terakhir pada waktu kita ingin memasang sertifikat di Tomcat.</p>

<h2>Struktur Folder</h2>

<p>Sebagai studi kasus, kita akan membuat aplikasi web yang dihosting dengan nama domain <code>demo.muhardin.com</code>. Seluruh file yang terlibat dalam rangkaian artikel ini bisa diambil di <a href="https://github.com/endymuhardin/belajar-ssl">repository Github</a>. Perhatikan juga <a href="https://github.com/endymuhardin/belajar-ssl/commits/master">history commit</a> untuk mengetahui urutan langkah-langkah yang dilakukan.</p>

<p>Siapkan dua folder, <code>ca</code> dan <code>demo.muhardin.com</code>. Folder <code>ca</code> akan digunakan untuk operasional CA yaitu menyetujui CSR yang masuk. Sedangkan folder <code>demo.muhardin.com</code> berisi semua file yang dibutuhkan webserver kita supaya bisa menjalankan HTTPS.</p>

<p>Nantinya bila kita membeli sertifikat berbayar, kita tidak perlu membuat folder <code>ca</code> ini.</p>

<h2>Membuat Private Key</h2>

<p>Kita ingin membuat private key dengan konfigurasi sebagai berikut:</p>

<ul>
<li>ukuran key : 2048 bit</li>
<li>algoritma : RSA</li>
<li>enkripsi : AES 256 bit</li>
</ul>


<p>Berikut adalah perintahnya, lakukan di dalam folder <code>demo.muhardin.com</code> :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl genrsa -aes256 2048 &gt; demo.muhardin.com.key</span></code></pre></td></tr></table></div></figure>


<p>Berikut adalah outputnya</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Generating RSA private key, 2048 bit long modulus
</span><span class='line'>......+++
</span><span class='line'>.................................+++
</span><span class='line'>e is 65537 (0x10001)
</span><span class='line'>Enter pass phrase:
</span><span class='line'>Verifying - Enter pass phrase:</span></code></pre></td></tr></table></div></figure>


<p>Kita diminta passphrase untuk mengenkripsi private key tersebut. Saya masukkan <code>test1234</code> sebagai password. Setelah selesai, kita akan mendapatkan satu file bernama <code>demo.muhardin.com.key</code>. Isinya adalah private key yang dienkripsi dengan algoritma AES berkekuatan 256 bit.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-----BEGIN RSA PRIVATE KEY-----
</span><span class='line'>Proc-Type: 4,ENCRYPTED
</span><span class='line'>DEK-Info: AES-256-CBC,425E8DDEEC7FD63F9E67608F7B25BAC5
</span><span class='line'>
</span><span class='line'>USIjQCyFsSfj/gbhXC0gT43qM9/4D9qGaEOAX2Ks7lxhs256LJImgeBywbnkzC67
</span><span class='line'>l8ZJQlivxSlIaC658RUcVNNbWwN4EgsczCTSsGjxUxUQ46ay1XUaAbO82oLeZWx7
</span><span class='line'>It0hQ/plno/kkpodtVwOvSks66ZdOIyTZ/IEA4BTMrmdsYi0PHfkbvlHfql9pdSO
</span><span class='line'>8d4cbgQU9nSuGOzXIX1UEMXluTIYBP0aj151bvPeocjeK5WhioldTm+LemfutiMd
</span><span class='line'>2N672BgMkhDeuYBauglChS0Q/fLmcRFM98ys+LcvEMlKtkT7L+vL4Wb7ulwhrOdG
</span><span class='line'>g2ecMvAjcl9RBrSszOWZ6L2xMqvjFo6xS0bras1BVetYbvdC9PEQW0RXycbwzwGL
</span><span class='line'>L9PJuQtKssI3MGTAydeKwrpT0Di27TiLqqb/QNBgJ/954JGLJJmpqVG3bt9YhCe5
</span><span class='line'>DwGASsFysuRxNPCW1C3aQ3qhydA3xgYJZrpdaRAIk/KRwxx+CFrk4oV0dom0kVTx
</span><span class='line'>w6jwjE0BS3q8e+nI42kXAilK84Qd4x6ZMAxM20DNQcucWGMRtJbrvvhJuLgMUNTI
</span><span class='line'>MjOHAqojk9vAu5m4XXCUtXALhMZrepFXjaVTblfyPZ1hhFutiDhZaGzzj5SL1uoY
</span><span class='line'>yLavTih3dQMpNBcOXY0TU/E4nKa0OhdGsNHs3gK9l77nO7IvZABviG2Qq50NuATj
</span><span class='line'>AjvQVNeEiJKdq5FaiHgX+/g7PLNbXUtNWhLZ6jXLc6flQLOuBwiMCR0Ug/46IlTC
</span><span class='line'>DOhsO36MDrMIxRjPgpcH00k9iXOvbuEILWGPjQ/WPNw7UoGEBepQSuIw2zzyD6ai
</span><span class='line'>DHVx2pD60U2anRzvvXzVR7Tf42Tm1fxR4epTdrJIY3LJQtTr2PMCNbcn8+kGfTg1
</span><span class='line'>M+1MCr+WN2pJhpYYr7ACFXFBJc1QLc/wF6/e47bkH3BLxWLZG1KQsLKzLim4teX+
</span><span class='line'>zFvBkOz7SSgDlH0xyogiihjlgZxjRNkk/P5OvtbdKWpOrJh649mw+zwvuN3TmrA0
</span><span class='line'>C/m70olU9QgjLCK3wlgkIr6bj1dS4sDPHghmEtpmp6OC8Ao1R9zDsIhIM1K9+ro7
</span><span class='line'>rE/TzvADeZPg7tzwzRJeTiYq2gN/xxeqlW7YdxGZVPizcfPtqhLnBqzxKeb/uKjT
</span><span class='line'>xuDMlQwZdlTV1QAGB1HKlb3qZdBtyEfUDEkwDL2z66r6roR750DtMnCwTsv9RIAJ
</span><span class='line'>9J2BBIvWjBQiS61p+m5vQ+9ImfqIs6KnZmvbvX5qZvrXRlqyQKdcio87AbqlPNl8
</span><span class='line'>IwrNP5ZePS5fBOJXcqtrecOKB3un+HmqiHqKWl8+O8TaMlgJNwdyw+4etzDWSH11
</span><span class='line'>7AYJJ2SXqIVf0UqZPeYHS7oBsISvP2ekRLAx0XSvxnukBSGolRzyhs8oaRhB3MBr
</span><span class='line'>uJRlKnQAfcFCk1zMNa75CC2vPP2WFMPixaR4HbBQ0pnMQp3KQHCuwmU7miS56EQm
</span><span class='line'>hZVa0yzlKJ/Tiv7Vy+1v0FSiVqWhO5K1p/TG0jcj2tsQ76P2gwXvUZLFnm7bdom2
</span><span class='line'>o8OfPVrr1Btje9+InVqiw2N3pgBBhRmE8ug/IYmz3tU3dxjXvjoJLpklah7ag4s2
</span><span class='line'>-----END RSA PRIVATE KEY-----</span></code></pre></td></tr></table></div></figure>


<h2>Membuat CSR</h2>

<p>Dengan bermodalkan private key tersebut, kita akan membuat CSR. Berikut perintahnya:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl req -new -key demo.muhardin.com.key -out demo.muhardin.com.csr</span></code></pre></td></tr></table></div></figure>


<p>Kita akan ditanyai beberapa pertanyaan yang akan kita bahas dibawah. Berikut adalah outputnya.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Enter pass phrase for demo.muhardin.com.key:
</span><span class='line'>You are about to be asked to enter information that will be incorporated
</span><span class='line'>into your certificate request.
</span><span class='line'>What you are about to enter is what is called a Distinguished Name or a DN.
</span><span class='line'>There are quite a few fields but you can leave some blank
</span><span class='line'>For some fields there will be a default value,
</span><span class='line'>If you enter '.', the field will be left blank.
</span><span class='line'>-----
</span><span class='line'>Country Name (2 letter code) [AU]:ID
</span><span class='line'>State or Province Name (full name) [Some-State]:DKI Jakarta
</span><span class='line'>Locality Name (eg, city) []:Jakarta Timur
</span><span class='line'>Organization Name (eg, company) [Internet Widgits Pty Ltd]:PT. Endy Muhardin
</span><span class='line'>Organizational Unit Name (eg, section) []:Divisi Teknologi Informasi
</span><span class='line'>Common Name (e.g. server FQDN or YOUR name) []:demo.muhardin.com
</span><span class='line'>Email Address []:endy@muhardin.com
</span><span class='line'>
</span><span class='line'>Please enter the following 'extra' attributes
</span><span class='line'>to be sent with your certificate request
</span><span class='line'>A challenge password []:
</span><span class='line'>An optional company name []:</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Kita diminta passphrase untuk membuka private key. Masukkan <code>test1234</code> seperti yang kita buat pada langkah pertama.</li>
<li>Kita akan ditanyai informasi tentang identitas kita. Masukkan sesuai kebutuhan.</li>
<li>Kita harus mengisi <code>Common Name</code>. Ini penting, terutama kalau kita membeli sertifikat berbayar!! Pastikan kita isi sesuai nama domain yang ingin kita pasangi https. Bila namanya tidak cocok, sertifikatnya akan menimbulkan warning. Saya isi sesuai nama domain yaitu <code>demo.muhardin.com</code>.</li>
<li>Email address juga harus diisi dengan benar. Ini biasanya digunakan CA untuk melakukan verifikasi.</li>
<li>Challenge password dan optional company name tidak saya isi</li>
</ol>


<p>Hasilnya adalah file CSR bernama <code>demo.muhardin.com.csr</code> yang isinya sebagai berikut.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-----BEGIN CERTIFICATE REQUEST-----
</span><span class='line'>MIIDADCCAegCAQAwgboxCzAJBgNVBAYTAklEMRQwEgYDVQQIDAtES0kgSmFrYXJ0
</span><span class='line'>YTEWMBQGA1UEBwwNSmFrYXJ0YSBUaW11cjEaMBgGA1UECgwRUFQuIEVuZHkgTXVo
</span><span class='line'>YXJkaW4xIzAhBgNVBAsMGkRpdmlzaSBUZWtub2xvZ2kgSW5mb3JtYXNpMRowGAYD
</span><span class='line'>VQQDDBFkZW1vLm11aGFyZGluLmNvbTEgMB4GCSqGSIb3DQEJARYRZW5keUBtdWhh
</span><span class='line'>cmRpbi5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC/CYCB6xU9
</span><span class='line'>j6k0JwB4TwF2hI+H41fH1fG1J/ZZPO3tXaJuibrXOnJNMAXD+GkSv/fOA45uIcX4
</span><span class='line'>6vvULXNz/fS8z3+RkVdrQ/BH2MBMeHjlU3duPYhv6c3yUVmZr7IsViBhTswT1VG9
</span><span class='line'>ZAq57lmjc/DTI/8PjGFvA64pzeWce3yTAmu30zwnDQ22m5gGOfPMfsf2TTW3B1eS
</span><span class='line'>Nv5WmlAIr6DtB4KxeCMXoKnIzBTDpqkeEf+MuIsqCw4/eXnWgBHZH66VIAy/9ygk
</span><span class='line'>hvX2dQNaMAZoExOfAEWVYtzgW84t0j+CwSgxQuk/nvjknE5TGXOrhjZg8mn0eXZK
</span><span class='line'>mmReIsYwjc09AgMBAAGgADANBgkqhkiG9w0BAQUFAAOCAQEAlbGTK4M2/wCHjg9p
</span><span class='line'>aveomNfU/9qvcK7YTBNNET/ryZGcDCWmG8td01BeSeJUHhqjdxFWHBFsdg+aK5L1
</span><span class='line'>xNd/eKG6NT7obviVHZGPVU2xMAIEOjx1xBP3FNbpIkuvapXcUxGBFlKy5aEmX2oo
</span><span class='line'>/XYyu582J69t9HeDxVBKpdHoLEfwnvTGytka4GRwDZBwiDHTWYlKeBONUUCqO1/L
</span><span class='line'>cd6GqFek37YPoP8ZfMIwTMDGrnCpcK0Z/nhkOZKAgfLtbHgHxvDG1ZUiul1hCLiY
</span><span class='line'>U+us6wgir1kbWXN9Jg6IFlN3ZeLQ4ahDSkIvmLO34ujtFwlq870qJArcW57Po5Pl
</span><span class='line'>3/bddQ==
</span><span class='line'>-----END CERTIFICATE REQUEST-----</span></code></pre></td></tr></table></div></figure>


<p>File CSR ini akan dikirim pemilik domain ke CA, biasanya melalui email.</p>

<p>Selesailah bagian pemilik domain. Selanjutnya kita akan berpura-pura menjadi CA.</p>

<h2>CA menyetujui CSR dari pemilik domain</h2>

<h3>Kelengkapan CA</h3>

<p>Sebelum bisa menyetujui, kita sediakan dulu kelengkapan CA, yaitu:</p>

<ul>
<li>private key CA</li>
<li>sertifikat CA</li>
</ul>


<h3>Private Key CA</h3>

<p>Private key CA dibuat dengan perintah yang sama seperti pembuatan private key domain di atas.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl genrsa -aes256 2048 &gt; ca.key</span></code></pre></td></tr></table></div></figure>


<p>Seperti sebelumnya, kita juga akan dimintai passphrase.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Generating RSA private key, 2048 bit long modulus
</span><span class='line'>..+++
</span><span class='line'>.............................................................+++
</span><span class='line'>e is 65537 (0x10001)
</span><span class='line'>Enter pass phrase:
</span><span class='line'>Verifying - Enter pass phrase:</span></code></pre></td></tr></table></div></figure>


<p>Saya gunakan <code>testca1234</code> sebagai passphrasenya. Hasilnya adalah file <code>ca.key</code> berisi text sebagai berikut</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-----BEGIN RSA PRIVATE KEY-----
</span><span class='line'>Proc-Type: 4,ENCRYPTED
</span><span class='line'>DEK-Info: AES-256-CBC,B7E9F6A263310662657F6B7052CE5CA0
</span><span class='line'>
</span><span class='line'>7JX037X9M4Eqsr+BdM/27pj6ADtJIGAYQpHAFoZawhrmArW0PScnjbh/B1R06z3K
</span><span class='line'>ej4HewKQB+SqCznHhmFpJmAuBpb0+snMZuoI3lm1zcRFUs8OSsLLd1B1w4USJlYN
</span><span class='line'>K9mzLqQMlZrl56W9c4QthOegjkqE7RHleierWW3X2VqtWD29GISE8yi9mSb/hSaN
</span><span class='line'>iATuMUaO8etM21F1MZownxKeetfBHJF2Y0XNt9AamrL8+gvb/dE2pPn8Zi2tlR3O
</span><span class='line'>eoUX/FKaa0aV+f6e3X8IRivFp01mnT5UFm1OyDhDrQ1OL0tNzIlLMLqlk8o9njJ0
</span><span class='line'>bBTlDAp5yZFbxtb/GZ94S8x9Nqql5ymVGFTC3BfE0TAfWMIH8YRYEVqMK8YLbGyg
</span><span class='line'>M0vkDpV6impYgaTzJdICVdvOzb7rU9TnvkWsMrp3SRpSqoCtst6yDD59kXBgbPBq
</span><span class='line'>Mj9QeCSXh8jf3LkKq2evSpJ6GlbCzR5EXeWCFcevsHY2xN//jA8v5UPtBOtojYu2
</span><span class='line'>/uyAipnwctj+FEXki1BJwNrPuygzxibImJF3K4u83BkA2bBwIionufr71fNyUNai
</span><span class='line'>2ToKPmxEgOFWGqypSsAw/GUw0LVseg4OlD+Ci2PCYPSwzcvkwulCklXOv8oIuXPb
</span><span class='line'>hsoTVin67c5diok6ayqgyZuMLVIJKr2CAK+Gm77EO652SaIGJtdx5+DBs4BP/XF/
</span><span class='line'>flgwG6DFpft2q93qaYqLPv2LqXAzsP6ACXBRjbPLUMkjv8Sg4iijy1siCxI9i9+N
</span><span class='line'>harFVLRSagFy0dXDw/Wur42xsypcTCMY9kujszx0P4+1BO+vkdNCpSWWofgcIFhI
</span><span class='line'>nZwLpHm9YZ5Sb7GxigBXh7dXc4Q+y2X8xvTg3Xdf+Cew4LpFktAByunUDjw4hjv4
</span><span class='line'>iy56Rvx7lcxlmpwxXw3ZQTZinkSM7f7wqZjvH4E+wt5ShlPrFUGl3d2hmJ2thOTl
</span><span class='line'>hWJ9CYZDDV02UtfYRVqpyY2BCKG3d4YfkUprfGs38/eJMA5zCUi8Uy6eJNu8t4gI
</span><span class='line'>d55PEBltgyMOw8I4M3anbdYwphjhdlQPkbpbsA+AkV+m5dRIjSLxNSG1wXXyVuhI
</span><span class='line'>vMLfrZ3uIKEkn9YXkb59lDx2E8NCmBU7hcV+w7hLu12q8CRCPZZNjnsbNa3Zg4X3
</span><span class='line'>sBN78ak5OOp4thLRSeykpHdPn8sWyyk9RPGaAHv2Y3n4zv5P9JqZe4hA14sAjxj1
</span><span class='line'>Ur+0gLfWoWQwu68F6fsOvngQnMjQneJaSHjhFdGr+HXdzOFqP9u6nxb9LpeFMTX9
</span><span class='line'>i6Ut2IVvTL55LN5TT/U0mcvQo0C/k+31ABNTrsWhv3mkoj92RzWBGoj+1bM1NbeA
</span><span class='line'>foSmmX674LnSUQvqlmsSOtDG5PCVBz+J5C+cmcGp98QFX5ViC2hVi3R+ItPbIirS
</span><span class='line'>7NjJzXZ/f3yz8TOr5MU+I4aYtYNDMvzU8dArTHE8fU++dBTCj2F0KvpIGZlRpHf8
</span><span class='line'>D6AA0a/9VNpwUyILeWD8rjdDiIvx3xPIODMZaN5SJFFAtbDKy9AhU1JCsNAjYdLz
</span><span class='line'>crBRgAwXpcGHOTeDZr+nevcSo8sm7gsqyXcJ6c8r8urnOAKWhvptxGzy6LG8XqPQ
</span><span class='line'>-----END RSA PRIVATE KEY-----</span></code></pre></td></tr></table></div></figure>


<h3>Sertifikat CA</h3>

<p>Selanjutnya kita buat sertifikat berisi informasi tentang CA palsu kita ini. Sertifikat ini yang akan kita gunakan untuk menyetujui CSR dari pemilik domain. Berikut perintahnya</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl req -new -x509 -days 3650 -key ca.key &gt; ca.crt</span></code></pre></td></tr></table></div></figure>


<p>Perintah di atas akan membuat sertifikat dengan <a href="http://en.wikipedia.org/wiki/X.509#Structure_of_a_certificate">format X-509</a>, berlaku selama 10 tahun (3650 hari), menggunakan private key dalam file <code>ca.key</code>. Sertifikat ini akan ditulis ke file <code>ca.crt</code>. Kita juga akan ditanyai beberapa informasi tentang CA palsu yang kita buat ini. Berikut output dari perintah di atas</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Enter pass phrase for ca.key:
</span><span class='line'>You are about to be asked to enter information that will be incorporated
</span><span class='line'>into your certificate request.
</span><span class='line'>What you are about to enter is what is called a Distinguished Name or a DN.
</span><span class='line'>There are quite a few fields but you can leave some blank
</span><span class='line'>For some fields there will be a default value,
</span><span class='line'>If you enter '.', the field will be left blank.
</span><span class='line'>-----
</span><span class='line'>Country Name (2 letter code) [AU]:ID
</span><span class='line'>State or Province Name (full name) [Some-State]:DKI Jakarta
</span><span class='line'>Locality Name (eg, city) []:Jakarta Timur
</span><span class='line'>Organization Name (eg, company) [Internet Widgits Pty Ltd]:CA Palsu
</span><span class='line'>Organizational Unit Name (eg, section) []:Divisi Sertifikasi
</span><span class='line'>Common Name (e.g. server FQDN or YOUR name) []:ROOT CA Palsu
</span><span class='line'>Email Address []:</span></code></pre></td></tr></table></div></figure>


<p>Berikut adalah isi file <code>ca.crt</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-----BEGIN CERTIFICATE-----
</span><span class='line'>MIIEKzCCAxOgAwIBAgIJAKHgEOaDGy3mMA0GCSqGSIb3DQEBBQUAMIGrMQswCQYD
</span><span class='line'>VQQGEwJJRDEUMBIGA1UECAwLREtJIEpha2FydGExFjAUBgNVBAcMDUpha2FydGEg
</span><span class='line'>VGltdXIxETAPBgNVBAoMCENBIFBhbHN1MRswGQYDVQQLDBJEaXZpc2kgU2VydGlm
</span><span class='line'>aWthc2kxFjAUBgNVBAMMDVJPT1QgQ0EgUGFsc3UxJjAkBgkqhkiG9w0BCQEWF2Vu
</span><span class='line'>ZHkubXVoYXJkaW5AZ21haWwuY29tMB4XDTEzMDcwOTA0MDg1MloXDTIzMDcwNzA0
</span><span class='line'>MDg1MlowgasxCzAJBgNVBAYTAklEMRQwEgYDVQQIDAtES0kgSmFrYXJ0YTEWMBQG
</span><span class='line'>A1UEBwwNSmFrYXJ0YSBUaW11cjERMA8GA1UECgwIQ0EgUGFsc3UxGzAZBgNVBAsM
</span><span class='line'>EkRpdmlzaSBTZXJ0aWZpa2FzaTEWMBQGA1UEAwwNUk9PVCBDQSBQYWxzdTEmMCQG
</span><span class='line'>CSqGSIb3DQEJARYXZW5keS5tdWhhcmRpbkBnbWFpbC5jb20wggEiMA0GCSqGSIb3
</span><span class='line'>DQEBAQUAA4IBDwAwggEKAoIBAQDda7cS/4qag6APajdqT7krxQOZZkYaCwzafZZN
</span><span class='line'>P9ANwIfUvwB2DOMVLFDFf8DM/Y/hcm8lQAamTNnQ+b58X8oOqOwKX2Y6uPUau+n3
</span><span class='line'>fCY4oTFhdYsbJHOW/hmTZXk+Exg3DHP+aFG7frUn39f8IuIGqujHIuWZfdokQFg8
</span><span class='line'>AaheYdvigtIv3FBqxSCbNIYhmhkhZnrQvJbfbD92n1cHB91eYT9Mj2Z7tFt0ykVV
</span><span class='line'>iQrOQ1n+CmMFUGheSD8Rnsi2ApsnBAsAj6ZruH1S+ZJJW+irZnbQE5LAsgUqjJYf
</span><span class='line'>IFYMoVphTTEMVfoizj2JvspzinufX11V6lylPl0P7EhQvkNJAgMBAAGjUDBOMB0G
</span><span class='line'>A1UdDgQWBBQ0c0rLkgOxJHxuBYyd3xeUVMHzxzAfBgNVHSMEGDAWgBQ0c0rLkgOx
</span><span class='line'>JHxuBYyd3xeUVMHzxzAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUAA4IBAQBQ
</span><span class='line'>W4t7WMj0FrVcxi/+W/jlAJ2BKGYev68bJiEeLVzbDHN3CQhfQwMWD0L0v6icP3c8
</span><span class='line'>SLeGR+PEcq7FwGHb6gpIySVlnl8bxzRFK2lqfo+672djwtP0F/mrDKTDSzoIkPOq
</span><span class='line'>G53otMXIAoplWDU7SRZE489AWfwOCCSmUJke9sEh1YYQwRVU7ceWSZLbRgfmzLeY
</span><span class='line'>xjIfF/KBZrs8CMbYCEqHHHX5XAtIEP+3KSAbzfoxv/a07+FE+5/r5E6aXEBSbVme
</span><span class='line'>y79zpM9VIV8FLlZr/+TITXqLKOBMmCmTVM1h1LJ8IjmWx9L6v631DX3/tc67HMoa
</span><span class='line'>fauYxPo71IRYfIAN4RQ5
</span><span class='line'>-----END CERTIFICATE-----</span></code></pre></td></tr></table></div></figure>


<p>Informasi di dalam sertifikat tersebut bisa kita lihat dengan perintah berikut</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl x509 -noout -text -in ca.crt</span></code></pre></td></tr></table></div></figure>


<p>Ini adalah hasilnya</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Certificate:
</span><span class='line'>    Data:
</span><span class='line'>        Version: 3 (0x2)
</span><span class='line'>        Serial Number: 11664341617117703654 (0xa1e010e6831b2de6)
</span><span class='line'>    Signature Algorithm: sha1WithRSAEncryption
</span><span class='line'>        Issuer: C=ID, ST=DKI Jakarta, L=Jakarta Timur, O=CA Palsu, 
</span><span class='line'>                OU=Divisi Sertifikasi, 
</span><span class='line'>                CN=ROOT CA Palsu
</span><span class='line'>        Validity
</span><span class='line'>            Not Before: Jul  9 04:08:52 2013 GMT
</span><span class='line'>            Not After : Jul  7 04:08:52 2023 GMT
</span><span class='line'>        Subject: C=ID, ST=DKI Jakarta, L=Jakarta Timur, O=CA Palsu, 
</span><span class='line'>                 OU=Divisi Sertifikasi, 
</span><span class='line'>                 CN=ROOT CA Palsu
</span><span class='line'>        Subject Public Key Info:
</span><span class='line'>            Public Key Algorithm: rsaEncryption
</span><span class='line'>                Public-Key: (2048 bit)
</span><span class='line'>                Modulus:
</span><span class='line'>                    00:dd:6b:b7:12:ff:8a:9a:83:a0:0f:6a:37:6a:4f:
</span><span class='line'>                    b9:2b:c5:03:99:66:46:1a:0b:0c:da:7d:96:4d:3f:
</span><span class='line'>                    d0:0d:c0:87:d4:bf:00:76:0c:e3:15:2c:50:c5:7f:
</span><span class='line'>                    c0:cc:fd:8f:e1:72:6f:25:40:06:a6:4c:d9:d0:f9:
</span><span class='line'>                    be:7c:5f:ca:0e:a8:ec:0a:5f:66:3a:b8:f5:1a:bb:
</span><span class='line'>                    e9:f7:7c:26:38:a1:31:61:75:8b:1b:24:73:96:fe:
</span><span class='line'>                    19:93:65:79:3e:13:18:37:0c:73:fe:68:51:bb:7e:
</span><span class='line'>                    b5:27:df:d7:fc:22:e2:06:aa:e8:c7:22:e5:99:7d:
</span><span class='line'>                    da:24:40:58:3c:01:a8:5e:61:db:e2:82:d2:2f:dc:
</span><span class='line'>                    50:6a:c5:20:9b:34:86:21:9a:19:21:66:7a:d0:bc:
</span><span class='line'>                    96:df:6c:3f:76:9f:57:07:07:dd:5e:61:3f:4c:8f:
</span><span class='line'>                    66:7b:b4:5b:74:ca:45:55:89:0a:ce:43:59:fe:0a:
</span><span class='line'>                    63:05:50:68:5e:48:3f:11:9e:c8:b6:02:9b:27:04:
</span><span class='line'>                    0b:00:8f:a6:6b:b8:7d:52:f9:92:49:5b:e8:ab:66:
</span><span class='line'>                    76:d0:13:92:c0:b2:05:2a:8c:96:1f:20:56:0c:a1:
</span><span class='line'>                    5a:61:4d:31:0c:55:fa:22:ce:3d:89:be:ca:73:8a:
</span><span class='line'>                    7b:9f:5f:5d:55:ea:5c:a5:3e:5d:0f:ec:48:50:be:
</span><span class='line'>                    43:49
</span><span class='line'>                Exponent: 65537 (0x10001)
</span><span class='line'>        X509v3 extensions:
</span><span class='line'>            X509v3 Subject Key Identifier: 
</span><span class='line'>                34:73:4A:CB:92:03:B1:24:7C:6E:05:8C:9D:DF:17:94:54:C1:F3:C7
</span><span class='line'>            X509v3 Authority Key Identifier: 
</span><span class='line'>                keyid:34:73:4A:CB:92:03:B1:24:7C:6E:05:8C:9D:DF:17:94:54:C1:F3:C7
</span><span class='line'>
</span><span class='line'>            X509v3 Basic Constraints: 
</span><span class='line'>                CA:TRUE
</span><span class='line'>    Signature Algorithm: sha1WithRSAEncryption
</span><span class='line'>         50:5b:8b:7b:58:c8:f4:16:b5:5c:c6:2f:fe:5b:f8:e5:00:9d:
</span><span class='line'>         81:28:66:1e:bf:af:1b:26:21:1e:2d:5c:db:0c:73:77:09:08:
</span><span class='line'>         5f:43:03:16:0f:42:f4:bf:a8:9c:3f:77:3c:48:b7:86:47:e3:
</span><span class='line'>         c4:72:ae:c5:c0:61:db:ea:0a:48:c9:25:65:9e:5f:1b:c7:34:
</span><span class='line'>         45:2b:69:6a:7e:8f:ba:ef:67:63:c2:d3:f4:17:f9:ab:0c:a4:
</span><span class='line'>         c3:4b:3a:08:90:f3:aa:1b:9d:e8:b4:c5:c8:02:8a:65:58:35:
</span><span class='line'>         3b:49:16:44:e3:cf:40:59:fc:0e:08:24:a6:50:99:1e:f6:c1:
</span><span class='line'>         21:d5:86:10:c1:15:54:ed:c7:96:49:92:db:46:07:e6:cc:b7:
</span><span class='line'>         98:c6:32:1f:17:f2:81:66:bb:3c:08:c6:d8:08:4a:87:1c:75:
</span><span class='line'>         f9:5c:0b:48:10:ff:b7:29:20:1b:cd:fa:31:bf:f6:b4:ef:e1:
</span><span class='line'>         44:fb:9f:eb:e4:4e:9a:5c:40:52:6d:59:9e:cb:bf:73:a4:cf:
</span><span class='line'>         55:21:5f:05:2e:56:6b:ff:e4:c8:4d:7a:8b:28:e0:4c:98:29:
</span><span class='line'>         93:54:cd:61:d4:b2:7c:22:39:96:c7:d2:fa:bf:ad:f5:0d:7d:
</span><span class='line'>         ff:b5:ce:bb:1c:ca:1a:7d:ab:98:c4:fa:3b:d4:84:58:7c:80:
</span><span class='line'>         0d:e1:14:39</span></code></pre></td></tr></table></div></figure>


<h3>Konfigurasi CA</h3>

<p>CA yang asli biasanya memiliki banyak private key dan certificate turunan.
Dari private key dan certificate yang utama (Root), dia akan membuat beberapa private key dan certificate lain.
Ini karena CA yang besar biasanya memiliki banyak reseller untuk menjualkan sertifikat SSL.
Untuk membatasi resiko dan juga memudahkan pendataan, request dari pelanggan masing-masing reseller disetujui dengan certificate turunan yang diperuntukkan khusus untuk reseller tersebut. Dengan demikian, bila terjadi masalah dengan reseller tersebut,
cukup certificate turunan yang khusus untuk reseller tersebut yang dibatalkan. Certificate turunan ini disebut dengan istilah <code>intermediate CA certificate</code>.</p>

<p>Pada waktu pembuatan signature terhadap CSR, ada banyak informasi yang dibutuhkan. Apalagi kalau suatu CA memiliki banyak intermediate certificate, masing-masing intermediate certificate tersebut berbeda informasi <code>issuer</code> nya. Contohnya, suatu CA memiliki lini produk seperti ini:</p>

<ul>
<li>Gratis : hanya berlaku 30 hari</li>
<li>Standar : berlaku 1 tahun, untuk satu domain</li>
<li>Enterprise : berlaku 1 tahun, multi domain</li>
<li>dan sebagainya</li>
</ul>


<p>Agar berbagai kategori di atas mudah dikelola, kita akan membuat file konfigurasi. Kita beri nama <code>openssl-config.txt</code> dan berisi seperti ini</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ca]
</span><span class='line'>default_ca         = ca-palsu
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>[ca-palsu]
</span><span class='line'>dir                = ca-palsu
</span><span class='line'>
</span><span class='line'># sertifikat dan private key CA
</span><span class='line'>certificate        = $dir/ca.crt
</span><span class='line'>private_key        = $dir/ca.key
</span><span class='line'>
</span><span class='line'># Folder penyimpanan
</span><span class='line'>cert               = $dir/sertifikat-customer
</span><span class='line'>new_certs_dir      = $dir/sertifikat-customer
</span><span class='line'>crl                = $dir/sertifikat-batal
</span><span class='line'>
</span><span class='line'># Database sertifikat yang sudah dikeluarkan
</span><span class='line'>database           = $dir/database.txt
</span><span class='line'>serial             = $dir/serial.txt
</span><span class='line'>
</span><span class='line'># Nilai default untuk sertifikat baru
</span><span class='line'>default_days       = 365               # masa berlaku sertifikat customer
</span><span class='line'>default_crl_days   = 30                # masa berlaku daftar pembatalan sertifikat
</span><span class='line'>default_md         = sha1
</span><span class='line'>x509_extensions    = usr_cert
</span><span class='line'>
</span><span class='line'># Konfigurasi tambahan
</span><span class='line'>policy = policy-saya
</span><span class='line'>x509_extensions = certificate_extensions
</span><span class='line'>
</span><span class='line'>[ policy-saya ]
</span><span class='line'># Gunakan informasi dalam CSR
</span><span class='line'>commonName = supplied
</span><span class='line'>stateOrProvinceName = supplied
</span><span class='line'>countryName = supplied
</span><span class='line'>emailAddress = supplied
</span><span class='line'>organizationName = supplied
</span><span class='line'>organizationalUnitName = optional
</span><span class='line'>
</span><span class='line'>[ certificate_extensions ]
</span><span class='line'># Sertifikat customer tidak boleh jadi CA
</span><span class='line'>basicConstraints = CA:false
</span><span class='line'>
</span><span class='line'>[ req ]
</span><span class='line'># private key yang digunakan untuk menyetujui CSR
</span><span class='line'>default_keyfile = ca-palsu/ca.key</span></code></pre></td></tr></table></div></figure>


<p>Konfigurasi di atas berisi satu CA (tanpa intermediate certificate). Bila nantinya kita mau membuat beberapa CA, baik sebagai Root CA maupun Intermediate CA, kita tinggal copy-paste konfigurasi untuk <code>ca-palsu</code>.</p>

<p>Root CA kita <code>ca-palsu</code> kita buatkan folder tersendiri untuk menyimpan file-filenya. Kita masukkan private key dan certificate dirinya sendiri. Kemudian, kita juga membutuhkan file database dan serial. File database gunanya untuk menyimpan data semua sertifikat yang pernah diterbitkan oleh CA <code>ca-palsu</code>. Karena database ini merupakan file text biasa, bukan database server seperti MySQL atau Oracle, maka kita perlu bantu <code>openssl</code> untuk membuatkan serial number dengan cara menyediakan file text lain bernama <code>serial.txt</code>. Di sini <code>openssl</code> bisa mencatat nomer terakhir yang sudah terpakai. Untuk data awal, kita isi saja nilai <code>1000</code> dengan perintah berikut</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo 1000 &gt; ca-palsu/serial.txt</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Kita buatkan juga file <code>database.txt</code>, karena <code>openssl</code> tidak bisa membuat sendiri. Cukup gunakan perintah <code>touch</code> di Linux.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>touch ca-palsu/database.txt
</span><span class='line'>touch ca-palsu/database.txt.attr</span></code></pre></td></tr></table></div></figure>


<p>Bila sulit dibayangkan, langsung saja lihat <a href="https://github.com/endymuhardin/belajar-ssl/tree/10c1f7302226b07ac31505dc24e8fdf6091dfee9/ca">struktur foldernya di Github</a>. Di Github kita juga bisa lihat versi awal dari <a href="https://github.com/endymuhardin/belajar-ssl/blob/10c1f7302226b07ac31505dc24e8fdf6091dfee9/ca/ca-palsu/serial.txt">serial.txt</a>, <a href="https://github.com/endymuhardin/belajar-ssl/blob/10c1f7302226b07ac31505dc24e8fdf6091dfee9/ca/ca-palsu/database.txt">database.txt</a>, dan <a href="https://github.com/endymuhardin/belajar-ssl/blob/10c1f7302226b07ac31505dc24e8fdf6091dfee9/ca/ca-palsu/database.txt.attr">database.txt.attr</a>.</p>

<p>Jangan heran bila <code>database.txt</code> dan <code>database.txt.attr</code> tidak ada isinya. Memang harusnya seperti itu.</p>

<p>Sekarang kita siap membuatkan signature untuk CSR dari <code>demo.muhardin.com</code></p>

<h3>Membuat signature CSR dengan Sertifikat CA</h3>

<p>CA menerima CSR dari pemilik domain. Untuk simulasinya, kita copy saja file CSR ke folder <code>ca-palsu/sertifikat-request</code>.
Setelah diterima, seharusnya CA melakukan verifikasi terhadap pemilik domain <code>demo.muhardin.com</code>. Prosedur verifikasi yang asli akan kita bahas di artikel berikutnya. Kita asumsikan saja verifikasi berjalan sukses, sehingga kita bisa langsung membuatkan signaturenya.</p>

<p>Berikut adalah perintah untuk membuatkan signature dengan menggunakan CA <code>ca-palsu</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl ca -config openssl-config.txt -in ca-palsu/sertifikat-request/demo.muhardin.com.csr</span></code></pre></td></tr></table></div></figure>


<p>OpenSSL akan menanyakan password untuk private key <code>ca-palsu</code>, kemudian membuatkan sertifikat baru sesuai konfigurasi <code>new_certs_dir</code> dalam <code>openssl-config.txt</code>. Berikut output perintah di atas.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Using configuration from openssl-config.txt
</span><span class='line'>Enter pass phrase for ca-palsu/ca.key:
</span><span class='line'>Check that the request matches the signature
</span><span class='line'>Signature ok
</span><span class='line'>The Subject's Distinguished Name is as follows
</span><span class='line'>countryName           :PRINTABLE:'ID'
</span><span class='line'>stateOrProvinceName   :ASN.1 12:'DKI Jakarta'
</span><span class='line'>localityName          :ASN.1 12:'Jakarta Timur'
</span><span class='line'>organizationName      :ASN.1 12:'PT. Endy Muhardin'
</span><span class='line'>organizationalUnitName:ASN.1 12:'Divisi Teknologi Informasi'
</span><span class='line'>commonName            :ASN.1 12:'demo.muhardin.com'
</span><span class='line'>emailAddress          :IA5STRING:'endy@muhardin.com'
</span><span class='line'>Certificate is to be certified until Jul  9 05:48:04 2014 GMT (365 days)
</span><span class='line'>Sign the certificate? [y/n]:y
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>1 out of 1 certificate requests certified, commit? [y/n]y
</span><span class='line'>Write out database with 1 new entries
</span><span class='line'>Certificate:
</span><span class='line'>    Data:
</span><span class='line'>        Version: 3 (0x2)
</span><span class='line'>        Serial Number: 4096 (0x1000)
</span><span class='line'>    Signature Algorithm: sha1WithRSAEncryption
</span><span class='line'>        Issuer: C=ID, ST=DKI Jakarta, L=Jakarta Timur, 
</span><span class='line'>                O=CA Palsu, OU=Divisi Sertifikasi, CN=ROOT CA Palsu
</span><span class='line'>        Validity
</span><span class='line'>            Not Before: Jul  9 05:48:04 2013 GMT
</span><span class='line'>            Not After : Jul  9 05:48:04 2014 GMT
</span><span class='line'>        Subject: CN=demo.muhardin.com, ST=DKI Jakarta, 
</span><span class='line'>                 C=ID/emailAddress=endy@muhardin.com, 
</span><span class='line'>                 O=PT. Endy Muhardin, OU=Divisi Teknologi Informasi
</span><span class='line'>        Subject Public Key Info:
</span><span class='line'>            Public Key Algorithm: rsaEncryption
</span><span class='line'>                Public-Key: (2048 bit)
</span><span class='line'>                Modulus:
</span><span class='line'>                    00:bf:09:80:81:eb:15:3d:8f:a9:34:27:00:78:4f:
</span><span class='line'>                    01:76:84:8f:87:e3:57:c7:d5:f1:b5:27:f6:59:3c:
</span><span class='line'>                    ed:ed:5d:a2:6e:89:ba:d7:3a:72:4d:30:05:c3:f8:
</span><span class='line'>                    69:12:bf:f7:ce:03:8e:6e:21:c5:f8:ea:fb:d4:2d:
</span><span class='line'>                    73:73:fd:f4:bc:cf:7f:91:91:57:6b:43:f0:47:d8:
</span><span class='line'>                    c0:4c:78:78:e5:53:77:6e:3d:88:6f:e9:cd:f2:51:
</span><span class='line'>                    59:99:af:b2:2c:56:20:61:4e:cc:13:d5:51:bd:64:
</span><span class='line'>                    0a:b9:ee:59:a3:73:f0:d3:23:ff:0f:8c:61:6f:03:
</span><span class='line'>                    ae:29:cd:e5:9c:7b:7c:93:02:6b:b7:d3:3c:27:0d:
</span><span class='line'>                    0d:b6:9b:98:06:39:f3:cc:7e:c7:f6:4d:35:b7:07:
</span><span class='line'>                    57:92:36:fe:56:9a:50:08:af:a0:ed:07:82:b1:78:
</span><span class='line'>                    23:17:a0:a9:c8:cc:14:c3:a6:a9:1e:11:ff:8c:b8:
</span><span class='line'>                    8b:2a:0b:0e:3f:79:79:d6:80:11:d9:1f:ae:95:20:
</span><span class='line'>                    0c:bf:f7:28:24:86:f5:f6:75:03:5a:30:06:68:13:
</span><span class='line'>                    13:9f:00:45:95:62:dc:e0:5b:ce:2d:d2:3f:82:c1:
</span><span class='line'>                    28:31:42:e9:3f:9e:f8:e4:9c:4e:53:19:73:ab:86:
</span><span class='line'>                    36:60:f2:69:f4:79:76:4a:9a:64:5e:22:c6:30:8d:
</span><span class='line'>                    cd:3d
</span><span class='line'>                Exponent: 65537 (0x10001)
</span><span class='line'>        X509v3 extensions:
</span><span class='line'>            X509v3 Basic Constraints: 
</span><span class='line'>                CA:FALSE
</span><span class='line'>    Signature Algorithm: sha1WithRSAEncryption
</span><span class='line'>         2e:1e:b9:4b:e4:ad:74:34:1c:7c:46:9c:d5:d8:83:db:da:b7:
</span><span class='line'>         b9:a0:ad:c5:54:f7:f2:51:c1:8f:77:70:ae:b4:a1:f6:9d:40:
</span><span class='line'>         ec:d5:55:76:0d:d0:d3:1b:36:ca:8b:bb:64:52:a8:ca:95:18:
</span><span class='line'>         5d:d1:28:47:e9:46:89:72:16:8e:57:b9:97:ac:93:c3:5d:6e:
</span><span class='line'>         17:ac:b3:91:87:61:26:a7:c6:6e:35:d9:03:92:cb:06:08:e5:
</span><span class='line'>         93:83:89:fb:44:6b:b9:78:b5:b7:e5:d4:84:47:3e:0e:26:40:
</span><span class='line'>         ec:4e:7a:6f:c1:76:75:b6:6c:f2:ef:c5:97:46:8e:d5:1b:1a:
</span><span class='line'>         67:95:1e:3e:d7:56:91:43:6d:a2:7a:e7:a4:bd:29:f0:1a:67:
</span><span class='line'>         62:d0:83:35:45:96:19:1f:c8:ee:cf:27:3e:f7:9b:11:cc:b3:
</span><span class='line'>         a8:dd:e6:b4:8a:85:c2:69:36:4f:0c:c3:50:f4:3a:30:e0:3a:
</span><span class='line'>         f6:6a:2b:72:4e:a3:44:0f:af:73:06:8e:fd:20:d3:4b:99:f5:
</span><span class='line'>         8b:72:f8:f6:21:3c:f4:03:ce:4d:bc:b2:e1:11:29:0d:3d:80:
</span><span class='line'>         23:41:72:d1:fb:28:f0:32:cf:49:56:5d:cc:e3:a7:dc:88:5c:
</span><span class='line'>         61:8f:36:9b:bc:28:df:81:89:4a:e6:7f:06:7e:45:9f:19:f8:
</span><span class='line'>         83:ca:1b:df
</span><span class='line'>-----BEGIN CERTIFICATE-----
</span><span class='line'>MIIDsDCCApigAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwgYMxCzAJBgNVBAYTAklE
</span><span class='line'>MRQwEgYDVQQIDAtES0kgSmFrYXJ0YTEWMBQGA1UEBwwNSmFrYXJ0YSBUaW11cjER
</span><span class='line'>MA8GA1UECgwIQ0EgUGFsc3UxGzAZBgNVBAsMEkRpdmlzaSBTZXJ0aWZpa2FzaTEW
</span><span class='line'>MBQGA1UEAwwNUk9PVCBDQSBQYWxzdTAeFw0xMzA3MDkwNTQ4MDRaFw0xNDA3MDkw
</span><span class='line'>NTQ4MDRaMIGiMRowGAYDVQQDDBFkZW1vLm11aGFyZGluLmNvbTEUMBIGA1UECAwL
</span><span class='line'>REtJIEpha2FydGExCzAJBgNVBAYTAklEMSAwHgYJKoZIhvcNAQkBFhFlbmR5QG11
</span><span class='line'>aGFyZGluLmNvbTEaMBgGA1UECgwRUFQuIEVuZHkgTXVoYXJkaW4xIzAhBgNVBAsM
</span><span class='line'>GkRpdmlzaSBUZWtub2xvZ2kgSW5mb3JtYXNpMIIBIjANBgkqhkiG9w0BAQEFAAOC
</span><span class='line'>AQ8AMIIBCgKCAQEAvwmAgesVPY+pNCcAeE8BdoSPh+NXx9XxtSf2WTzt7V2ibom6
</span><span class='line'>1zpyTTAFw/hpEr/3zgOObiHF+Or71C1zc/30vM9/kZFXa0PwR9jATHh45VN3bj2I
</span><span class='line'>b+nN8lFZma+yLFYgYU7ME9VRvWQKue5Zo3Pw0yP/D4xhbwOuKc3lnHt8kwJrt9M8
</span><span class='line'>Jw0NtpuYBjnzzH7H9k01twdXkjb+VppQCK+g7QeCsXgjF6CpyMwUw6apHhH/jLiL
</span><span class='line'>KgsOP3l51oAR2R+ulSAMv/coJIb19nUDWjAGaBMTnwBFlWLc4FvOLdI/gsEoMULp
</span><span class='line'>P5745JxOUxlzq4Y2YPJp9Hl2SppkXiLGMI3NPQIDAQABow0wCzAJBgNVHRMEAjAA
</span><span class='line'>MA0GCSqGSIb3DQEBBQUAA4IBAQAuHrlL5K10NBx8RpzV2IPb2re5oK3FVPfyUcGP
</span><span class='line'>d3CutKH2nUDs1VV2DdDTGzbKi7tkUqjKlRhd0ShH6UaJchaOV7mXrJPDXW4XrLOR
</span><span class='line'>h2Emp8ZuNdkDkssGCOWTg4n7RGu5eLW35dSERz4OJkDsTnpvwXZ1tmzy78WXRo7V
</span><span class='line'>GxpnlR4+11aRQ22ieuekvSnwGmdi0IM1RZYZH8juzyc+95sRzLOo3ea0ioXCaTZP
</span><span class='line'>DMNQ9Dow4Dr2aityTqNED69zBo79INNLmfWLcvj2ITz0A85NvLLhESkNPYAjQXLR
</span><span class='line'>+yjwMs9JVl3M46fciFxhjzabvCjfgYlK5n8GfkWfGfiDyhvf
</span><span class='line'>-----END CERTIFICATE-----
</span><span class='line'>Data Base Updated</span></code></pre></td></tr></table></div></figure>


<p>Setelah sukses, <code>openssl</code> akan membuatkan sertifikat yang sudah ditandatangani menggunakan private key <code>ca-palsu</code>. Berikut daftar file/folder yang terdampak selama proses ini:</p>

<ul>
<li>serial.txt : tadinya berisi 1000, sekarang berisi 1001</li>
<li>database.txt : tadinya kosong, sekarang ada satu baris berisi informasi sertifikat yang baru saja dibuat</li>
<li>folder sertifikat-customer : tadinya kosong, sekarang berisi satu file sertifikat untuk <code>demo.muhardin.com</code> dengan nama file <code>1000.pem</code></li>
</ul>


<p>Daftar perubahan ini bisa <a href="https://github.com/endymuhardin/belajar-ssl/commit/f950bdfb866be9da7a80e613b7d95bf282454b05">dilihat di Github</a>.</p>

<p>Selanjutnya, CA akan mengirimkan file <code>1000.pem</code> tersebut ke pemilik domain <code>demo.muhardin.com</code>.</p>

<h2>Kelengkapan File Pemilik Domain</h2>

<p>Setelah menerima file <code>100.pem</code> dari CA, pemilik domain <code>demo.muhardin.com</code> akan memiliki file berikut:</p>

<ul>
<li>File private key : <code>demo.muhardin.com.key</code></li>
<li>File CSR : <code>demo.muhardin.com.csr</code>. File ini <a href="http://security.stackexchange.com/questions/32857/could-i-delete-csr-files-when-the-key-is-signed-by-ca">boleh dihapus setelah kita menerima sertifikat yang telah disahkan oleh CA</a>.</li>
<li>File sertifikat dari CA : <code>1000.pem</code>. Agar lebih jelas, kita rename saja menjadi <code>demo.muhardin.com.crt</code>.</li>
</ul>


<p>Demikianlah langkah-langkah membuat self-signed certificate. Pada artikel berikutnya, kita akan membahas bagaimana <a href="http://software.endy.muhardin.com/aplikasi/membeli-sertifikat-ssl/">cara membeli sertifikat</a>. Kemudian memasang sertifikat (baik yang self-signed maupun yang berbayar) ke webserver kita.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apa itu SSL]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/apa-itu-ssl/"/>
    <updated>2013-07-08T17:52:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/apa-itu-ssl</id>
    <content type="html"><![CDATA[<p>SSL adalah protokol keamanan yang kita gunakan sehari-hari. Sebagai programmer, kita harus paham konsep SSL dan bisa memanfaatkannya dalam aplikasi yang kita buat.</p>

<p>Artikel ini adalah bagian pertama dari 4 artikel, yaitu:</p>

<ol>
<li><a href="http://software.endy.muhardin.com/aplikasi/apa-itu-ssl/">Apa itu SSL</a></li>
<li><a href="http://software.endy.muhardin.com/aplikasi/membuat-self-signed-certificate/">Membuat self-signed certificate</a></li>
<li><a href="http://software.endy.muhardin.com/aplikasi/membeli-sertifikat-ssl/">Membeli sertifikat SSL</a></li>
<li><a href="http://software.endy.muhardin.com/aplikasi/memasang-sertifikat-ssl/">Memasang sertifikat SSL</a></li>
</ol>


<!--more-->


<p><a href="https://en.wikipedia.org/wiki/Transport_Layer_Security">SSL adalah singkatan dari Secure Socket Layer, juga dikenal dengan istilah Transport Secure Layer (TLS)</a>.</p>

<p>Ada beberapa keuntungan bila kita menggunakan SSL, yaitu:</p>

<ul>
<li>kerahasiaan (confidentiality)</li>
<li>identifikasi (authentication)</li>
</ul>


<p>Kerahasiaan diperlukan bila kita mengirim informasi yang tidak noleh diketahui orang lain, misalnya username dan password pada saat mengisi halaman login. Kita tidak ingin ada orang lain yang menyadap trafik internet kita dan mengintip password kita (<a href="http://en.wikipedia.org/wiki/Eavesdropping">eavesdropping</a>).</p>

<p>Identifikasi diperlukan untuk memastikan identitas suatu layanan/aplikasi. Misalnya kita mengakses situs internet banking, kita butuh keyakinan bahwa yang kita akses adalah aplikasi yang asli. Tidak dimanipulasi orang di tengah jalan (<a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">man in the middle attack</a>) ataupun diganti dengan situs palsu (<a href="https://en.wikipedia.org/wiki/Phishing">phising</a>).</p>

<p>Untuk bisa memahami apa itu SSL, ada beberapa konsep yang perlu kita pahami yaitu:</p>

<ul>
<li>identitas</li>
<li>trust model</li>
<li>public key infrastructure</li>
<li>dasar-dasar enkripsi</li>
</ul>


<p>Dengan memahami beberapa istilah di atas, nanti kita akan memahami dari mana datangnya fitur SSL seperti kerahasiaan dan identifikasi.</p>

<h2>Identitas</h2>

<p>Coba kunjungi website internet banking seperti <a href="https://ibank.klikbca.com/">KlikBCA</a> dan <a href="https://ib.bankmandiri.co.id/retail/Login.do?action=form&amp;lang=in_ID">Bank Mandiri</a>. Bagaimana kita memastikan bahwa kedua situs barusan asli dikelola oleh bank masing-masing? Bila Anda klik link di atas, bagaimana Anda yakin bahwa saya tidak mengarahkan Anda ke situs saya sendiri yang mirip dengan situs aslinya?</p>

<p>Di kehidupan sehari-hari, kita biasa memastikan identitas seseorang dengan beberapa cara, misalnya:</p>

<ul>
<li>menyuruh orang tersebut menulis tandatangan, kemudian dibandingkan dengan KTP, SIM, atau bukti identitas lain.</li>
<li>mengambil sidik jarinya (pakai tinta ataupun fingerprint scanner), dan dibandingkan dengan data yang sudah kita miliki sebelumnya.</li>
<li>membandingkan sidik mata (iris) dengan database.</li>
</ul>


<p>Manapun cara yang kita gunakan, ada satu kesamaan. Kita akan memeriksa informasi/benda yang hanya bisa dimiliki pemegang aslinya. Tentu semua hal bisa dipalsukan, tapi untuk menyederhanakan masalah, kita bisa asumsikan bahwa tandatangan, sidik jari, dan sidik mata hanya bisa dimiliki oleh orang yang asli.</p>

<p>Website yang kita akses ditaruh di server. Tentunya server tidak memiliki anggota tubuh yang bisa dipastikan keunikannya. Untuk itu, kita membuat padanan sidik jari, yaitu suatu file yang disebut <code>private key</code>. File ini bisa kita buat di server itu sendiri, ataupun bisa kita buat di laptop dan kemudian dipasang (copy-paste/upload) ke server tersebut. Private key ini harus kita lindungi dengan baik. Karena bila orang lain sampai bisa mendapatkannya, sama saja dengan kita menyerahkan jari kita ke orang lain ataupun mengajari orang membuat tanda tangan kita.</p>

<p>Private key bentuknya adalah file text biasa yang isinya seperti ini</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-----BEGIN RSA PRIVATE KEY-----
</span><span class='line'>Proc-Type: 4,ENCRYPTED
</span><span class='line'>DEK-Info: AES-256-CBC,1CB1AC44166F92FA3817B5E95EDBF1E5
</span><span class='line'>
</span><span class='line'>rhH0ueRW1uxTa2w2wY1r9bkm9eyFjDzXLAHMGoMpDyCCYiYQ4/BmFYx+68ElsYPO
</span><span class='line'>+tV2iRz4OXthU2SXK+StBZYtE27BSUMbrR6NXNkZFCs9sEYGsJzoiyT/caHYr4p3
</span><span class='line'>8gI+SJQc215oJdltpS8jML8Ygg3FCfOQoxnR9Ior0W3EKQtUbzsnkHLGH9s06Y8B
</span><span class='line'>RyHb9hKB5YCiWBFo3lH4wfvSxb5A68s0hH0enGu6F/216TLis733E6PEgnhjwUvp
</span><span class='line'>FTuKzie+UXWGRjNwPNUIYh74hmS3vfaj4c0tKDzrNcuO7tZmMGEEOJICyBjEMmDO
</span><span class='line'>0PAUe+Cy0KqkckYfJCS8cN1lAgWuR1NrqaCezt87qVEbr3Om1H6z45ObwGNdnfUi
</span><span class='line'>uncFPqkUrjRYriB6xt6+Lg2iyk2dhbwrU6vMxDG3VPvMiAvXXYBlUBPi4xlpKv28
</span><span class='line'>awuLpaSM4yegiZO2wTjRoHECJJVHSADQ7KVRlCc5fRe+3QyIYRQmYG/u44J+ykDK
</span><span class='line'>Fx7nvTSHy/qDsDYrmacHIJJAdzoxiWIDJ2MedvYdamJ6EGH2Zk+xBOpV+ss4slhq
</span><span class='line'>nStKIUA0qR9Wnh3KicubosKsNo8yp3uzrNRO/f+cQdmItjMLjosOOKhIDNgD3xCv
</span><span class='line'>csGziNQMq+iJ0mt6ntu+B+ETsaVsD4HspkxZpL9JHnqGKvn46DtJuvBeJ9TTQkZo
</span><span class='line'>1doFj/wwk6ljNtibYWYpPFDaP9f7XAtlm6RQ+0Vm/X6pwTUKZA9/5ABqJ9YYIaIg
</span><span class='line'>TvOgX1e5RpCANBKjXvQpuEyHsk24QzG5Q8tMuqBeXALl+I8XDFAVgkNBmeObp5Nw
</span><span class='line'>02lQqb53t5sg4CN3+prtG18c1xU+g7t1mb3so/86ZHrZxY08Ykf+7Y1yO1rOBqkc
</span><span class='line'>fRkhegMVWYzzxtE82FI2gp9cwDRTix1CAwRSMjItQnHua5il5UvigkIQLmZW96kV
</span><span class='line'>Hh/CxZMyevcLMZHUdPrpiuA4fZBh4EA0Z0JXQy69bAe3gnAbw0ky0zsC5RttXGol
</span><span class='line'>cfPCHKCKgvGVMDw6b+f9NhQQKlzjCscA+CbCTvUGPnu4+7KCoo6Z1652t3N9AoRB
</span><span class='line'>wVds4AHqeH3+H6v8bDJ5yQv2aAAFMSnvMyUqkD1Rt960Qgbl8TUb6JHvvWnjbjvF
</span><span class='line'>cA5AvkxiPWCQNRiHRIZHfhwysQv5gizu2CY04cKkn9ynvpajjKa5LVQr68kR57sH
</span><span class='line'>Q2ymJkKlQw4wXCTYBrfVsNvGG5XZBrfz8brt8rHHgAKdBD8jordICwEqZlhBYPct
</span><span class='line'>UQr0DTT0i+lA8AgKDTK9hcSa1G5hOO/ekUKwTnvBMjckWju1P4NF1aTOUg09eYEo
</span><span class='line'>Z6OTR4kGi5Usdc9I8DuTloeb26+o88Meiqu2NX3bOGH50KHEA4zVJxPhMf48dOvk
</span><span class='line'>0JFOUM39n81OIJTVcis6RkyMmTWRR8NUdTdvwlNpuETq6i1iXrVCeDT3tBA+KinN
</span><span class='line'>LcEbheYfk/3aZoivZoFfGYNlD4HSMooauG9eZSdzvGf700u/7qhUB8kZEik9uaXh
</span><span class='line'>QycMFVGSEVFnADP7Eb7H5Z/pZVq5iyG/lKAHh5He2m6dpnu2Q1pO6qdF/KQ7b8kZ
</span><span class='line'>-----END RSA PRIVATE KEY-----</span></code></pre></td></tr></table></div></figure>


<p>Private key dapat digunakan untuk dua hal, signature dan dekripsi. Digital signature bisa diumpamakan dengan kita membubuhkan tandatangan atau stempel di suatu dokumen. Dokumen yang saya stempel dan tandatangani bisa meyakinkan orang bahwa dokumen tersebut memang benar-benar berasal dari saya. Demikian juga dengan dokumen digital (file), dapat kita tandatangani/stempel dengan menggunakan private key. File yang sudah diberikan digital signature tidak bisa diubah ditengah jalan tanpa ketahuan. Bila diubah, maka digital signaturenya tidak cocok lagi.</p>

<p>Private key memiliki pasangan yang dinamakan public key. Public key ini tidak rahasia, dan bisa kita sebarluaskan pada siapapun yang membutuhkannya. Bila orang lain ingin mengirim pesan rahasia pada kita, dia bisa mengacak (enkripsi) pesan tersebut dengan menggunakan public key. Pesan yang sudah diacak tersebut hanya bisa dibuka dengan private key yang sesuai.</p>

<p>Jadi, untuk memiliki identitas, kita harus memiliki pasangan private dan public key.</p>

<h2>Trust Model</h2>

<p>Siapa saja bisa membuat pasangan key. Lalu bagaimana cara kita bisa tahu bahwa private key tertentu adalah milik orang tertentu?
Misalnya, Anda mendapat dokumen dari <code>Endy Muhardin</code> yang ditandatangani dengan private key <code>abcd-efgh-1234-5678</code>. Bagaimana kita yakin bahwa <code>abcd-efgh-1234-5678</code> adalah benar tandatangan dari <code>Endy Muhardin</code>?</p>

<p>Ada dua cara untuk mengatasi masalah ini,</p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Web_of_trust">Web of Trust</a></li>
<li><a href="http://en.wikipedia.org/wiki/Public-key_infrastructure">Public Key Infrastructure</a></li>
</ul>


<h3>Web of Trust</h3>

<p>Web of Trust bekerja dengan mekanisme referensi teman. Kita bisa tanyakan pada teman kita yang sudah pernah berinteraksi dengan <code>Endy Muhardin</code>, &#8220;Apakah benar <code>abcd-efgh-1234-5678</code> adalah tandatangan dari <code>Endy Muhardin</code> ?&#8221;. Bila teman kita tidak ada yang pernah berinteraksi, maka kita bisa tanyakan pada temannya teman, temannya teman dari teman, dan seterusnya sampai ada yang bisa memastikan identitas dari tandatangan <code>abcd-efgh-1234-5678</code> tersebut.</p>

<p>Kembali ke analogi internet banking, bagaimana kalau saya baru saja launching dan belum memiliki referensi? Nah tentunya membangun jaringan referensi butuh waktu lama. Bisa jadi pada minggu-minggu pertama setelah launching tidak ada yang berani pakai internet banking saya, karena belum ada teman kita yang memiliki referensi.</p>

<p>Untuk itu, kita menggunakan mekanisme kedua, yaitu Public Key Infrastructure.</p>

<h3>Public Key Infrastructure</h3>

<p>Pada sistem ini, kita mempercayakan verifikasi identitas pada sekelompok orang/perusahaan. Kelompok ini dikenal dengan istilah Certificate Authority (CA). CA bertugas memberikan sertifikasi pada identitas digital, mirip dengan pemberian peringkat bintang pada hotel/penginapan.</p>

<p>Dengan mekanisme ini, bila kita ingin menginap di suatu hotel yang belum pernah kita datangi sebelumnya, kita tinggal melihat peringkatnya. Kita yakin bahwa <a href="https://en.wikipedia.org/wiki/Hotel_rating">hotel bintang lima</a> pasti lebih baik daripada bintang empat, dan seterusnya. Keyakinan ini kita dapatkan karena kita percaya dengan prosedur verifikasi yang telah dilakukan oleh lembaga pemeringkat hotel.</p>

<p>Kembali ke aplikasi internet banking kita, untuk mendapatkan sertifikasi dari CA, ada beberapa langkah yang harus dilakukan:</p>

<ol>
<li>Membuat pasangan private dan public key</li>
<li>Membuat sertifikat digital</li>
<li>Mengajukan sertifikat tersebut ke CA untuk disetujui</li>
<li>CA akan melakukan verifikasi terhadap identitas kita. Bila sukses, sertifikat kita akan disetujui oleh CA.</li>
<li>Memasang sertifikat yang telah disetujui CA di <del>pintu hotel</del> website kita</li>
</ol>


<p>Detail teknis untuk melakukan langkah-langkah ini akan kita bahas di artikel berikutnya.</p>

<p>Sistem public key infrastructure ini juga punya kelemahan. Beberapa CA pernah ditembus keamanannya oleh <a href="http://en.wikipedia.org/wiki/Comodo_Group#2011_breach_incident">orang Iran</a> dan <a href="http://en.wikipedia.org/wiki/Diginotar#Issuance_of_fraudulent_certificates">Turki</a> sehingga bisa mengeluarkan sertifikat palsu. Kronologi lengkapnya bisa dibaca <a href="http://blog.gerv.net/2011/09/diginotar-compromise/">di sini</a>.</p>

<p>Walaupun demikian, kita tidak perlu khawatir, karena begitu hal tersebut terungkap, CA yang bersalah akan langsung mendapatkan <a href="http://www.wired.com/threatlevel/2011/09/diginotar-bankruptcy/">hukuman mati dari masyarakat</a>. Dengan demikian, para CA tentu akan berusaha menjaga keamanannya dengan baik.</p>

<h2>Penggunaan SSL</h2>

<p>SSL digunakan pada protokol yang kita gunakan setiap hari, yaitu HTTP, SMTP, IMAP, dan POP3. HTTP kita gunakan untuk aplikasi web, sedangkan tiga sisanya kita gunakan untuk email. Cara kerjanya relatif sama, sebagai berikut:</p>

<ol>
<li>Kita membuka browser dan mengetik alamat website, misalnya <code>https://mail.google.com</code></li>
<li>Mekanisme DNS akan menerjemahkan alamat <code>mail.google.com</code> menjadi alamat IP, misalnya <code>123.123.123.123</code>.</li>
<li>Browser melakukan request ke <code>123.123.123.123</code>. Karena URLnya https, maka browser meminta sertifikat dari server</li>
<li>Server mengirim sertifikat yang sudah ditandatangani oleh CA.</li>
<li>Browser memiliki daftar CA yang sudah disetujui olehnya. Dengan daftar tersebut, browser melakukan verifikasi keabsahan tandatangan CA.</li>
<li>Bila tandatangan CA valid, berarti CA sudah memastikan bahwa sertifikat tersebut memang benar milik server <code>mail.google.com</code>. Browser akan menampilkan halaman web dengan tanda gembok hijau di address bar. Pada tahap ini, identitas server sudah dikonfirmasi. Berarti kita sudah menggunakan fitur <em>authentication</em> dari SSL.</li>
<li>Bila CA yang menandatangani tidak terdaftar, maka browser akan menampilkan halaman peringatan.</li>
<li>Browser membuat kode rahasia untuk enkripsi data. Kode rahasia ini dienkripsi menggunakan public key yang ada di dalam sertifikat server, sehingga hanya bisa dibuka oleh server yang memiliki sertifikat.</li>
<li>Server melakukan dekripsi terhadap data kode rahasia dari browser.</li>
<li>Komunikasi data antara server dan browser selanjutnya akan dienkripsi dengan kode rahasia tersebut. Pada tahap ini, kita sudah menggunakan fitur <em>confidentiality</em> dari SSL.</li>
</ol>


<p>Untuk protokol email (SMTP, IMAP, POP3) mekanismenya sama. Cukup gantikan kata <code>browser</code> dengan <code>mail-client</code> pada penjelasan di atas.</p>

<p>Berikut contoh sertifikat SSL yang dipercayai browser, perhatikan gambar gemboknya.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/07/ssl/04-tomcat-https-green.png" title="Menu SSL Firefox" ></p>

<p>Dan ini sertifikat SSL yang tidak dipercayai karena CA tidak terdaftar di browser</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/07/ssl/05-tomcat-https-red.png" title="Menu SSL Firefox" ></p>

<h3>Daftar CA Terpercaya</h3>

<p>Berbagai aplikasi yang menggunakan SSL menyimpan daftar CA yang dipercayai oleh aplikasi tersebut. Daftar CA ini langsung ditanam di aplikasi (hardcode) sehingga hanya bisa ditambah dan dikurangi oleh pembuat aplikasi. Contohnya, kita bisa melihat daftar CA yang dipercayai Firefox melalui menu <code>Preferences &gt; Advanced &gt; Encryption</code> pada layar di bawah</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/07/ssl/01-firefox-certificate.png" title="Menu SSL Firefox" ></p>

<p>Kita bisa lihat daftar CA dengan menekan tombol View Certificates</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/07/ssl/02-firefox-ca-list.png" title="Daftar CA Firefox" ></p>

<p>Demikian juga dengan browser Chrome yang ada di menu Settings, kemudian tekan Advanced.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/07/ssl/03-chrome-certificate.png" title="Menu SSL Chrome" ></p>

<p>Daftar sertifikat bisa dilihat dengan menekan tombol <code>Manage Certificates</code></p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/07/ssl/04-chrome-ca-list.png" title="Daftar CA Chrome" ></p>

<p>Sistem operasi yang kita gunakan juga menyimpan daftar CA terpercaya. Untuk Ubuntu, lihat di folder <code>/etc/ssl/certs</code></p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/07/ssl/05-ubuntu-ca-list.png" title="Daftar CA Ubuntu" ></p>

<p>Bila terjadi sesuatu pada CA sehingga tidak bisa lagi dipercaya, maka para programmer Firefox, Chrome, Ubuntu, Microsoft, dan sebagainya akan menghapus CA bermasalah tersebut dari daftar CAnya, <a href="http://blog.mozilla.org/security/2011/09/02/diginotar-removal-follow-up/">seperti yang dilakukan Firefox</a> dan <a href="http://www.danielveazey.com/linux/diginotar-certificate-fix-released-for-ubuntu/">Ubuntu</a>. Biasanya penghapusan ini akan diikuti dengan pengumuman security update di internet sehingga semua user bisa melakukan update terhadap aplikasi yang terinstal di komputernya masing-masing.</p>

<p>Demikian artikel SSL bagian pertama. Nantikan artikel selanjutnya tentang <a href="http://software.endy.muhardin.com/aplikasi/membuat-self-signed-certificate/">cara membuat</a> dan <a href="http://software.endy.muhardin.com/aplikasi/membeli-sertifikat-ssl/">membeli sertifikat SSL</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mengobati OOM]]></title>
    <link href="http://software.endy.muhardin.com/java/mengobati-oom/"/>
    <updated>2013-06-08T22:25:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/mengobati-oom</id>
    <content type="html"><![CDATA[<p>Beberapa waktu belakangan ini, di milis mulai banyak bermunculan pertanyaan yang berkaitan dengan Out Of Memory Error (OOM).
Error ini biasanya terjadi bila data dalam aplikasi sudah besar (melebihi 2 GB), dan umumnya terjadi pada saat membuat report PDF/XLS/CSV, dsb.</p>

<p>Biasanya juga, <em>obat yang dikonsumsi</em> oleh penderita OOM ini ada dua:</p>

<ul>
<li>Mengatur alokasi memori dengan opsi <code>Xms</code> dan <code>Xmx</code></li>
<li>Menggunakan perintah <code>System.gc()</code></li>
</ul>


<p>Sayangnya, kedua <em>obat</em> ini tidak akan menyelesaikan masalah. Analoginya seperti kita kena infeksi otak, lalu minum Panadol. Sakit kepalanya mungkin akan hilang sementara waktu, tapi tidak lama kemudian justru akibatnya lebih fatal.</p>

<p>Lalu bagaimana solusinya?</p>

<!--more-->


<h1>Salah Kaprah tentang OOM</h1>

<p>Pertama, saya luruskan dulu mengenai <code>System.gc</code>.
Intinya begini</p>

<blockquote><p>System.gc() hanya boleh dipakai dengan satu (dan hanya satu-satunya) syarat:
Yaitu pada waktu sudah bisa menjelaskan ke orang lain bagaimana cara kerja garbage collector dan sudah paham apa itu JVM Ergonomics.</p></blockquote>

<p>Next time mau mengetik System.gc, tanyakan pada diri sendiri, apakah saya sudah paham JVM Ergonomics dan bisa menjelaskannya ke orang lain? Kalau jawabannya belum, jangan diteruskan mengetik System.gc().</p>

<blockquote><p>Lalu apa itu <code>System.gc</code> dan kapan digunakan?</p></blockquote>

<p>Kan sudah dijelaskan di atas, pelajari cara kerja garbage collector dan apa itu JVM ergonomics.</p>

<p>Satu lagi salah kaprah yang harus dibenahi :
opsi <code>Xms</code> dan <code>Xmx</code> itu gunanya adalah <strong>UNTUK MEMAKSIMALKAN PENGGUNAAN MEMORI</strong>.
<code>Xms</code> dan <code>Xms</code> <strong>BUKAN SOLUSI UNTUK MASALAH OOM</strong>.</p>

<p>Masalah OOM itu ada di kode program kita sendiri, jadi carilah solusinya di kode program kita sendiri.
Penyebab OOM itu juga cuma satu : aplikasi kita menggunakan memori lebih besar daripada yang tersedia.
Besar pasak daripada tiang.</p>

<ol>
<li>Memori tersedia 4 GB, aplikasi kita pakai 4.1 GB => OOM</li>
<li>Memori tersedia 2 GB, aplikasi kita pakai 1.5 GB => No OOM padahal lebih kecil dari #1</li>
<li>RAM fisik ada 16 GB, tapi aplikasi kita cuma bisa memanfaatkan 2 GB => gunakan <code>Xms</code> dan <code>Xmx</code>.</li>
</ol>


<h1>Penyebab OOM dan Solusinya</h1>

<p>Beberapa penyebab umum terjadinya OOM :</p>

<h2>Unbounded Query</h2>

<p>Unbounded query adalah query yang tidak kita batasi jumlahnya.
Contohnya <code>select * from tbl_penjualan</code>. Kalau data penjualan hanya 1000 transaksi, no problem. Kalau transaksinya ada 10 juta record dalam satu hari, ya pasti langsung kena OOM.</p>

<p>Solusinya : pastikan selalu menggunakan paging. Ganti querynya menjadi <code>select * from tbl_penjualan limit 0,20</code> sehingga cuma mengeluarkan 20 record, berapapun banyaknya data dalam tabel.</p>

<h2>Generate File</h2>

<p>Seringkali kita ingin menghasilkan file report. Misalnya laporan penjualan bulan ini, berapapun data yang ada di tabel untuk periode bulan ini, harus ditulis ke file. File ini bisa berupa PDF, XLS, XML, CSV, dan sebagainya.</p>

<p>Format file tidak masalah. Yang menjadi masalah adalah cara membuatnya. Ada beberapa kesalahan umum :</p>

<ul>
<li>mengumpulkan data di variabel sebelum menulis file</li>
<li>tidak melepas data yang sudah diproses</li>
<li>tidak paham cara kerja report engine</li>
</ul>


<h3>Mengumpulkan data di variabel</h3>

<p>Contoh pseudocode seperti ini</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Penjualan</span><span class="o">&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Penjualan</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// resultset adalah cursor, dia hanya baca apa yang ditarik saja</span>
</span><span class='line'><span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">createStatement</span><span class="o">(</span><span class="s">&quot;select * from tbl_penjualan&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">()){</span>
</span><span class='line'>    <span class="n">Penjualan</span> <span class="n">p</span> <span class="o">=</span> <span class="n">konversiResultSetJadiPenjualan</span><span class="o">(</span><span class="n">rs</span><span class="o">);</span>
</span><span class='line'>    <span class="n">data</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Coding di atas akan mengumpulkan semua record di variabel <code>data</code>.
Bila ada 1 juta record yang dihasilkan oleh query dengan masing-masing record berukuran 1 KB,
maka variabel data tersebut akan berukuran 1 GB. Kalau Java VM kita berikan alokasi 2 GB, cuma butuh 3 user untuk menimbulkan OOM.
Menaikkan alokasi menjadi 8 GB melalui <code>Xms</code> dan <code>Xmx</code> tidak akan membantu banyak.</p>

<h3>Tidak melepas data yang sudah diproses</h3>

<p>Ini biasanya terjadi kalau kita menulis sendiri file output. Perhatikan contoh kode berikut:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">createStatement</span><span class="o">(</span><span class="s">&quot;select * from tbl_penjualan&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">File</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;output.csv&quot;</span><span class="o">);</span>
</span><span class='line'><span class="k">while</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">()){</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">baris</span> <span class="o">=</span> <span class="n">konversiResultSetJadiString</span><span class="o">(</span><span class="n">rs</span><span class="o">);</span>
</span><span class='line'>    <span class="n">output</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">baris</span><span class="o">);</span>
</span><span class='line'>    <span class="n">output</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Menulis file ada bermacam-macam. Ada yang menggunakan buffer ada yang tidak. Pastikan kita mengosongkan buffer setiap kali iterasi supaya tidak penuh, biasanya dengan method <code>flush</code> atau sejenisnya.</p>

<h3>Tidak paham cara kerja report engine</h3>

<p>Dalam mendesain library yang dipakai orang banyak, biasanya si pembuat akan melakukan optimasi untuk penggunaan yang sering terjadi.
Misalnya 80% orang membuat PDF berukuran 10 halaman atau lebih sedikit, 20% sisanya membuat 1000 halaman atau lebih.
Pada situasi ini, pembuat library report yang baik pasti akan memudahkan pembuatan 10 halaman report karena itulah fitur yang paling sering digunakan.</p>

<p>Bila kita termasuk golongan yang 20%, kita harus belajar lebih giat supaya paham bagaimana mengatasi kondisi minoritas tersebut.</p>

<p>Sebagai contoh, kalau kita menggunakan Jasper Report, ada fitur yang disebut dengan <a href="http://community.jaspersoft.com/wiki/comparison-report-virtualizers">Virtualizer</a> untuk membuat report berukuran besar. Pastikan kita sudah memahami kasus-kasus khusus ini.</p>

<h2>Inisialisasi object besar di dalam loop</h2>

<p>Perhatikan contoh kode di bawah</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">){</span>
</span><span class='line'>    <span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&quot;konfig-spring.xml&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">ProdukDao</span> <span class="n">pd</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">ProdukDao</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">pd</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ApplicationContext</code> merupakan object Spring Framework yang berisi seluruh konfigurasi aplikasi. Isinya :</p>

<ul>
<li>konfigurasi database</li>
<li>mapping ORM (kalau pakai ORM)</li>
<li>semua object yang dimanage Spring</li>
</ul>


<p>Intinya, ini adalah object yang besar sekali dan sangat kompleks. Object seperti ini biasanya hanya dibuat sekali saja sepanjang aplikasi dijalankan. Bila kita taruh dalam method seperti di atas, maka tiap kali ada user simpan data produk, object besar tersebut akan dibuat, sehingga menghabiskan memori.</p>

<p>Pesan moralnya, pahami library yang digunakan supaya tahu karakteristik dan cara kerjanya.</p>

<h2>Penggunaan collection yang kurang benar</h2>

<p>Collection (Set, Map, List) adalah object yang menampung object lain. Kita harus memastikan bahwa object ini berada dalam scope yang benar. Lihat kode program berikut</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Coba</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">noSurat</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Integer</span> <span class="n">noTerakhir</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">bikinSuratBaru</span><span class="o">(){</span>
</span><span class='line'>        <span class="n">noTerakhir</span><span class="o">++;</span>
</span><span class='line'>        <span class="n">noSurat</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">noTerakhir</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pada kode di atas, <code>noSurat</code> memiliki scope static, sehingga dia akan terus ada selama aplikasi berjalan. Bila aplikasi tidak mati dalam waktu yang lama, dan dalam sehari ada 1 juta surat baru, tinggal tunggu waktu saja sampai kena OOM.</p>

<h1>Panduan Solusi Umum</h1>

<p>Selain yang disebutkan di atas, masih banyak penyebab lain, yang paling sering terjadi adalah yang dibahas di atas. Kalau penyebab OOM tidak kita atasi, berapapun memori yang kita sediakan (melalui <code>Xms</code> dan <code>Xmx</code>) tidak akan cukup. Inilah sebabnya saya katakan bahwa <code>Xms</code> dan <code>Xmx</code> itu bukan solusi untuk OOM. Yang harus kita lakukan adalah <strong>mengendalikan pemakaian</strong> memori, bukan <strong>menambah</strong> memori.</p>

<p>Jadi kalau menemukan OOM, coba dicek lagi kode programnya.
Tidak perlu pakai VisualVM atau tools2 lain, cukup code review aja.</p>

<p>Dibaca satu2 source codenya, untuk tiap baris, tanyakan pertanyaan ini :</p>

<ol>
<li>Method/statement ini akan dipanggil seberapa sering?</li>
<li>Looping ini akan berputar maksimal berapa kali?</li>
<li>Berapa kira2 ukuran tiap row yang ditarik dalam query? Sekali tarik berapa row?</li>
<li>Setelah saya tarik row, kapan dia selesai digunakan? Apakah nunggu PDF jadi dulu baru selesai (inilah kandidat OOM), atau tiap selesai satu halaman PDF sudah bisa direlease?</li>
</ol>


<p>Mudah-mudahan dengan adanya artikel ini tidak ada lagi orang yang mengobati OOM dengan <code>System.gc</code> atau <code>Xmx</code>.</p>

<h2>Referensi</h2>

<ul>
<li><a href="http://java.dzone.com/news/how-fix-memory-leaks-java">How to fix memory leaks in Java</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mengetes Akses Database]]></title>
    <link href="http://software.endy.muhardin.com/java/mengetes-akses-database/"/>
    <updated>2013-06-05T11:49:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/mengetes-akses-database</id>
    <content type="html"><![CDATA[<p>Pada bagian ini, kita akan mempersiapkan seperangkat kode program untuk mengetes aplikasi yang telah kita buat.</p>

<p>Artikel ini merupakan bagian kelima dan terakhir dari rangkaian artikel Spring JDBC, yaitu</p>

<ol>
<li><a href="http://software.endy.muhardin.com/java/konfigurasi-koneksi-database-dengan-spring/">Konfigurasi koneksi database</a></li>
<li><a href="http://software.endy.muhardin.com/java/struktur-aplikasi-java-dengan-spring-dan-maven/">Struktur Aplikasi</a></li>
<li><a href="http://software.endy.muhardin.com/java/insert-update-delete-dengan-spring-jdbc/">Insert, update, dan delete data</a></li>
<li><a href="http://software.endy.muhardin.com/java/query-dengan-spring-jdbc/">Query data</a></li>
<li><a href="http://software.endy.muhardin.com/java/mengetes-akses-database/">Mengetes Akses Database</a></li>
</ol>


<!--more-->


<h2>Setup Test</h2>

<p>Seperti telah dijelaskan sebelumnya, test class kita akan terdiri dari dua bagian:</p>

<ol>
<li>Abstract superclass : berisi seluruh kode program pengetesan aplikasi</li>
<li>Concrete subclass : berisi kode program untuk melakukan inisialisasi</li>
</ol>


<p>Berikut adalah kerangka abstract superclass test untuk <code>Produk</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">service</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// import statement, generate menggunakan IDE</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">ProdukServiceTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">PenjualanService</span> <span class="nf">getPenjualanService</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">DataSource</span> <span class="nf">getDataSource</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Before</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">bersihkanDataTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSimpanUpdateHapusProduk</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// test method lain tidak ditampilkan</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dan berikut ini adalah concrete subclass yang berfungsi melakukan inisialisasi konfigurasi Spring JDBC</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">springjdbc</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// import statement generate menggunakan IDE</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="s">&quot;classpath*:com/muhardin/**/spring-jdbc-ctx.xml&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProdukServiceSpringJdbcTest</span> <span class="kd">extends</span> <span class="n">ProdukServiceTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">PenjualanService</span> <span class="n">penjualanService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">PenjualanService</span> <span class="nf">getPenjualanService</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">penjualanService</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">DataSource</span> <span class="nf">getDataSource</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">dataSource</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Database Reset</h2>

<p>Pada kode program abstract superclass di atas, kita melihat ada method untuk membersihkan data test. Method ini diberikan annotation <code>@Before</code> supaya dia dijalankan <strong>sebelum masing-masing test</strong>.</p>

<p>Berikut adalah isi method tersebut</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Before</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">bersihkanDataTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">DataSource</span> <span class="n">ds</span> <span class="o">=</span> <span class="n">getDataSource</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">ds</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&quot;delete from m_produk where kode like ?&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">PreparedStatement</span> <span class="n">ps</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span><span class='line'>    <span class="n">ps</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="s">&quot;T-001%&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">ps</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Di method tersebut, kita menghapus semua produk yang kodenya diawali <code>T-001</code>. Ini adalah data yang kita insert selama proses tes. Agar tidak mengganggu tes lainnya, kita hapus data percobaan tersebut.</p>

<h2>Test Insert Update Delete</h2>

<p>Proses insert, update, dan delete mengubah data yang ada dalam database. Supaya kita tidak repot mengurus data sample yang sudah ada di database, ketiga proses ini kita tes dalam satu kesatuan. Dengan demikian, setelah selesai dijalankan, datanya kembali bersih seperti sebelumnya. Berikut kode programnya.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSimpanUpdateHapusProduk</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span><span class='line'>    <span class="n">Produk</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Produk</span><span class="o">();</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="na">setHarga</span><span class="o">(</span><span class="k">new</span> <span class="n">BigDecimal</span><span class="o">(</span><span class="mi">125000</span><span class="o">));</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="na">setKode</span><span class="o">(</span><span class="s">&quot;T-001&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="na">setNama</span><span class="o">(</span><span class="s">&quot;Produk Test 001&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PenjualanService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">getPenjualanService</span><span class="o">();</span>
</span><span class='line'>    <span class="n">service</span><span class="o">.</span><span class="na">simpan</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="n">assertNotNull</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">getDataSource</span><span class="o">().</span><span class="na">getConnection</span><span class="o">();</span>
</span><span class='line'>    <span class="n">PreparedStatement</span> <span class="n">psCariById</span>
</span><span class='line'>            <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span>
</span><span class='line'>                <span class="o">(</span><span class="s">&quot;select * from m_produk where id = ?&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">psCariById</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>    <span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">psCariById</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// test nilai awal</span>
</span><span class='line'>    <span class="n">assertTrue</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;T-001&quot;</span><span class="o">,</span><span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;kode&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// update record</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="na">setKode</span><span class="o">(</span><span class="s">&quot;T-001x&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">service</span><span class="o">.</span><span class="na">simpan</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// test query setelah update</span>
</span><span class='line'>    <span class="n">rs</span> <span class="o">=</span> <span class="n">psCariById</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assertTrue</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;T-001x&quot;</span><span class="o">,</span><span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;kode&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// test delete</span>
</span><span class='line'>    <span class="n">service</span><span class="o">.</span><span class="na">hapus</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// test query setelah hapus</span>
</span><span class='line'>    <span class="n">rs</span> <span class="o">=</span> <span class="n">psCariById</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assertFalse</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dari komentar yang ada dalam kode program, sudah jelas apa maksud dari masing-masing bagian.</p>

<h2>Test Query</h2>

<p>Selanjutnya kita melakukan tes terhadap query. Kita mulai dari yang sederhana dulu, yaitu tabel produk.
Berikut kode program pengetesannya.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCariProdukById</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">PenjualanService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">getPenjualanService</span><span class="o">();</span>
</span><span class='line'>    <span class="n">assertNotNull</span><span class="o">(</span><span class="n">service</span><span class="o">.</span><span class="na">cariProdukById</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
</span><span class='line'>    <span class="n">assertNull</span><span class="o">(</span><span class="n">service</span><span class="o">.</span><span class="na">cariProdukById</span><span class="o">(</span><span class="mi">99</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCariProdukByKode</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">PenjualanService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">getPenjualanService</span><span class="o">();</span>
</span><span class='line'>    <span class="n">assertNotNull</span><span class="o">(</span><span class="n">service</span><span class="o">.</span><span class="na">cariProdukByKode</span><span class="o">(</span><span class="s">&quot;K-001&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">assertNull</span><span class="o">(</span><span class="n">service</span><span class="o">.</span><span class="na">cariProdukByKode</span><span class="o">(</span><span class="s">&quot;X-001&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testHitungSemuaProduk</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">PenjualanService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">getPenjualanService</span><span class="o">();</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">Long</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">3</span><span class="o">),</span>
</span><span class='line'>        <span class="n">Long</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">service</span><span class="o">.</span><span class="na">hitungSemuaProduk</span><span class="o">()));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCariSemuaProduk</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">PenjualanService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">getPenjualanService</span><span class="o">();</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Produk</span><span class="o">&gt;</span> <span class="n">hasil</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">cariSemuaProduk</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">100</span><span class="o">);</span>
</span><span class='line'>    <span class="n">assertNotNull</span><span class="o">(</span><span class="n">hasil</span><span class="o">);</span>
</span><span class='line'>    <span class="n">assertTrue</span><span class="o">(</span><span class="n">hasil</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">3</span><span class="o">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">Produk</span> <span class="n">produk</span> <span class="o">:</span> <span class="n">hasil</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">produk</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">produk</span><span class="o">.</span><span class="na">getKode</span><span class="o">());</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">produk</span><span class="o">.</span><span class="na">getNama</span><span class="o">());</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">produk</span><span class="o">.</span><span class="na">getHarga</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Logika pengetesan tidak kompleks. Kita query datanya menggunakan method di <code>ProdukDao</code> yang telah kita buat,
lalu kita bandingkan dengan kondisi yang seharusnya. Perbandingan dilakukan menggunakan method yang telah disediakan JUnit, yaitu method berawalan <code>assert</code>, misalnya <code>assertNotNull</code>, <code>assertEquals</code>, dan lainnya.</p>

<p>Yang harus diperhatikan di sini adalah, kita harus benar-benar tahu persis isi database supaya test ini bisa berjalan dengan baik. Ada banyak teknik yang bisa digunakan untuk memastikan isi database sebelum tes dijalankan, salah satunya menggunakan tools yang bernama <a href="http://www.dbunit.org/">DBUnit</a>. Lebih lanjut tentang cara menggunakan DBUnit bisa dibaca di <a href="http://software.endy.muhardin.com/java/ruthless-testing-4/">artikel ini</a>.</p>

<h2>Test Relasi</h2>

<p>Pengetesan terhadap relasi pada prinsipnya tidak berbeda. Hanya ada sedikit tambahan yaitu kita juga harus memastikan apakah relasinya berhasil terisi dengan sempurna. Berikut pengetesannya.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCariPenjualanDetailByProdukDanPeriode</span><span class="o">(){</span>
</span><span class='line'>    <span class="n">Produk</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Produk</span><span class="o">();</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Date</span> <span class="n">mulai</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="o">(</span><span class="mi">2013</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">).</span><span class="na">toDate</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Date</span> <span class="n">sampai</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="o">(</span><span class="mi">2013</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">).</span><span class="na">toDate</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">PenjualanDetail</span><span class="o">&gt;</span> <span class="n">hasil</span> <span class="o">=</span> <span class="n">getPenjualanService</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">cariPenjualanDetailByProdukDanPeriode</span><span class="o">(</span><span class="n">p</span><span class="o">,</span>
</span><span class='line'>                <span class="n">mulai</span><span class="o">,</span> <span class="n">sampai</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">100</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assertNotNull</span><span class="o">(</span><span class="n">hasil</span><span class="o">);</span>
</span><span class='line'>    <span class="n">assertTrue</span><span class="o">(</span><span class="n">hasil</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">PenjualanDetail</span> <span class="n">penjualanDetail</span> <span class="o">:</span> <span class="n">hasil</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">verifikasiPenjualanDetail</span><span class="o">(</span><span class="n">penjualanDetail</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pada kode program di atas, terlihat bahwa kita melakukan looping yang di dalamnya ada verifikasi <code>PenjualanDetail</code>. Berikut isi methodnya.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">verifikasiPenjualanDetail</span>
</span><span class='line'>        <span class="o">(</span><span class="n">PenjualanDetail</span> <span class="n">penjualanDetail</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">assertNotNull</span><span class="o">(</span><span class="n">penjualanDetail</span><span class="o">.</span><span class="na">getProduk</span><span class="o">().</span><span class="na">getHarga</span><span class="o">());</span>
</span><span class='line'>    <span class="n">assertNotNull</span><span class="o">(</span><span class="n">penjualanDetail</span><span class="o">.</span><span class="na">getPenjualan</span><span class="o">().</span><span class="na">getWaktuTransaksi</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kita cukup memastikan bahwa relasi yang dimiliki <code>PenjualanDetail</code> yaitu <code>Produk</code> dan <code>Penjualan</code> tidak null. Demikian juga variabel yang ada di dalam objectnya yaitu <code>harga</code> dan <code>waktuTransaksi</code>.</p>

<p>Demikianlah rangkaian artikel tentang penggunaan Spring JDBC. Kode program selengkapnya dapat diambil <a href="https://github.com/endymuhardin/belajar-akses-database-java/tree/spring-jdbc">di Github</a>.
Semoga bermanfaat.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Query dengan Spring JDBC]]></title>
    <link href="http://software.endy.muhardin.com/java/query-dengan-spring-jdbc/"/>
    <updated>2013-06-03T20:08:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/query-dengan-spring-jdbc</id>
    <content type="html"><![CDATA[<p>Pada artikel sebelumnya kita telah bisa mengubah data dalam database, baik menambah (insert), mengubah (update), maupun menghapus (data). Kali ini kita akan membahas tentang cara pengambilan data (select) dari dalam database.</p>

<p>Artikel ini merupakan bagian keempat dari rangkaian artikel Spring JDBC, yaitu</p>

<ol>
<li><a href="http://software.endy.muhardin.com/java/konfigurasi-koneksi-database-dengan-spring/">Konfigurasi koneksi database</a></li>
<li><a href="http://software.endy.muhardin.com/java/struktur-aplikasi-java-dengan-spring-dan-maven/">Struktur Aplikasi</a></li>
<li><a href="http://software.endy.muhardin.com/java/insert-update-delete-dengan-spring-jdbc/">Insert, update, dan delete data</a></li>
<li><a href="http://software.endy.muhardin.com/java/query-dengan-spring-jdbc/">Query data</a></li>
<li><a href="http://software.endy.muhardin.com/java/mengetes-akses-database/">Mengetes Akses Database</a></li>
</ol>


<!--more-->


<p>Pada dasarnya, untuk mengambil data dari database hanya ada dua varian yang kita gunakan, yaitu:</p>

<ul>
<li>mengambil data tunggal, gunakan method <code>queryForObject</code></li>
<li>mengambil data banyak, gunakan method <code>queryForList</code> atau <code>query</code> saja</li>
</ul>


<p>Kita lihat dulu implementasi yang paling mendasar, ambil semua data produk dari database. Berikut deklarasi SQLnya.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SQL_CARI_SEMUA</span>
</span><span class='line'>    <span class="o">=</span> <span class="s">&quot;select * from m_produk limit ?,?&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Perintah SQL di atas akan dipakai dalam method <code>cariSemua</code> sebagai berikut</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Produk</span><span class="o">&gt;</span> <span class="nf">cariSemua</span><span class="o">(</span><span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="n">SQL_CARI_SEMUA</span><span class="o">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">ResultSetJadiProduk</span><span class="o">(),</span>
</span><span class='line'>            <span class="n">PagingHelper</span><span class="o">.</span><span class="na">halamanJadiStart</span><span class="o">(</span><span class="n">halaman</span><span class="o">,</span> <span class="n">baris</span><span class="o">),</span>
</span><span class='line'>            <span class="n">baris</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pada contoh di atas, kita menggunakan method <code>query</code> yang menerima tiga argumen, yaitu:</p>

<ul>
<li>SQL yang akan dijalankan, berupa String</li>
<li>Class yang bertugas mengubah ResultSet menjadi object yang kita inginkan, dalam hal ini object <code>Produk</code>. Class ini akan kita buat sendiri, yaitu class <code>ResultSetJadiProduk</code>.</li>
<li>argumen lain-lain (varargs). Ini merupakan fitur Java sejak versi 5 yang artinya kita bisa memasukkan argumen sebanyak-banyaknya dalam method. Argumen ini akan dikonversi menjadi List untuk diproses oleh method <code>query</code></li>
</ul>


<p>Jadi, bukan salah ketik kalau di atas saya sebut tiga argumen padahal kita memasukkan empat variabel ke dalamnya.</p>

<p>SQL select tentu tidak perlu kita bahas lagi, mari masuk ke class <code>ResultSetJadiProduk</code></p>

<h2>Membuat Mapper</h2>

<p>Class <code>ResultSetJadiProduk</code> bertugas mengkonversi hasil query ke database yang ada dalam class <code>ResultSet</code> menjadi object <code>Produk</code>. Implementasinya tidak rumit, ini dia.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">class</span> <span class="nc">ResultSetJadiProduk</span> <span class="kd">implements</span> <span class="n">RowMapper</span><span class="o">&lt;</span><span class="n">Produk</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Produk</span> <span class="nf">mapRow</span><span class="o">(</span><span class="n">ResultSet</span> <span class="n">rs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Produk</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Produk</span><span class="o">();</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setId</span><span class="o">((</span><span class="n">Integer</span><span class="o">)</span> <span class="n">rs</span><span class="o">.</span><span class="na">getObject</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setKode</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;kode&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setNama</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;nama&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setHarga</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getBigDecimal</span><span class="o">(</span><span class="s">&quot;harga&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">p</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kita membuatnya sebagai class di dalam class (inner class). Kalau lupa dengan strukturnya, silahkan baca lagi bab dua tentang Struktur Aplikasi.</p>

<p>Class ini harus implement interface <code>RowMapper&lt;T&gt;</code> milik Spring. <code>T</code> diganti dengan class yang menjadi tujuan konversi. Interface <code>RowMapper&lt;T&gt;</code> ini mewajibkan kita membuat method <code>mapRow</code>. Isi method tersebut sudah cukup jelas sehingga tidak perlu dijelaskan.</p>

<p>Class ini nantinya bisa kita gunakan juga di query yang menghasilkan satu object <code>Produk</code> seperti <code>cariById</code> dan <code>cariByKode</code>. Berikut implementasinya</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">Produk</span> <span class="nf">cariById</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">queryForObject</span><span class="o">(</span><span class="n">SQL_CARI_BY_ID</span><span class="o">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">ResultSetJadiProduk</span><span class="o">(),</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">EmptyResultDataAccessException</span> <span class="n">err</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">Produk</span> <span class="nf">cariByKode</span><span class="o">(</span><span class="n">String</span> <span class="n">kode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">queryForObject</span><span class="o">(</span><span class="n">SQL_CARI_BY_KODE</span><span class="o">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">ResultSetJadiProduk</span><span class="o">(),</span> <span class="n">kode</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">EmptyResultDataAccessException</span> <span class="n">err</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kedua method ini sama saja prinsipnya dengan <code>cariSemua</code> yang sudah kita bahas sebelumnya.</p>

<h2>Mengambil data berelasi</h2>

<p>Setelah berhasil mengambil data dari satu produk, mari kita coba untuk berurusan dengan data berelasi. Sebetulnya prinsipnya sama saja, yaitu membuatkan class konversi. Bedanya hanya terletak pada query SQL yang menggunakan join, tidak ada hubungannya dengan Spring JDBC.</p>

<p>Pada service interface, kita memiliki fitur rekap transaksi untuk satu produk tertentu, yang dimuat dalam method <code>cariPenjualanDetailByProdukDanPeriode</code>. Method tersebut memanggil method <code>cariByProdukDanPeriode</code> dalam class <code>PenjualanDetailDao</code>. Berikut implementasinya.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PenjualanDetailDao</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SQL_CARI_BY_PRODUK_DAN_PERIODE</span>
</span><span class='line'>            <span class="o">=</span> <span class="s">&quot;select pd.*, p.waktu_transaksi, &quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;produk.kode as kode_produk, produk.nama as nama_produk,&quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;produk.harga as harga_produk &quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;from t_penjualan_detail pd &quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;inner join t_penjualan p on pd.id_penjualan = p.id &quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;inner join m_produk produk on pd.id_produk = produk.id &quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;where pd.id_produk = ? &quot;</span> <span class="o">+</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;and (p.waktu_transaksi between ? and ?) &quot;</span> <span class="o">+</span>
</span><span class='line'>            <span class="o">+</span> <span class="s">&quot;limit ?,?&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PenjualanDetail</span><span class="o">&gt;</span> <span class="nf">cariByProdukDanPeriode</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">,</span>
</span><span class='line'>            <span class="n">Date</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">Date</span> <span class="n">sampai</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="n">SQL_CARI_BY_PRODUK_DAN_PERIODE</span><span class="o">,</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">ResultSetJadiPenjualanDetail</span><span class="o">(),</span>
</span><span class='line'>                <span class="n">p</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span>
</span><span class='line'>                <span class="n">mulai</span><span class="o">,</span>
</span><span class='line'>                <span class="n">sampai</span><span class="o">,</span>
</span><span class='line'>                <span class="n">PagingHelper</span><span class="o">.</span><span class="na">halamanJadiStart</span><span class="o">(</span><span class="n">halaman</span><span class="o">,</span> <span class="n">baris</span><span class="o">),</span>
</span><span class='line'>                <span class="n">baris</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Konversi dari <code>ResultSet</code> menjadi <code>PenjualanDetail</code> dilakukan dalam class <code>ResultSetJadiPenjualanDetail</code> berikut</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">class</span> <span class="nc">ResultSetJadiPenjualanDetail</span>
</span><span class='line'>        <span class="kd">implements</span> <span class="n">RowMapper</span><span class="o">&lt;</span><span class="n">PenjualanDetail</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">PenjualanDetail</span> <span class="nf">mapRow</span><span class="o">(</span><span class="n">ResultSet</span> <span class="n">rs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span>
</span><span class='line'>            <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">PenjualanDetail</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PenjualanDetail</span><span class="o">();</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setId</span><span class="o">((</span><span class="n">Integer</span><span class="o">)</span> <span class="n">rs</span><span class="o">.</span><span class="na">getObject</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setHarga</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getBigDecimal</span><span class="o">(</span><span class="s">&quot;harga&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setJumlah</span><span class="o">((</span><span class="n">Integer</span><span class="o">)</span> <span class="n">rs</span><span class="o">.</span><span class="na">getObject</span><span class="o">(</span><span class="s">&quot;jumlah&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// relasi ke produk</span>
</span><span class='line'>        <span class="n">Produk</span> <span class="n">px</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Produk</span><span class="o">();</span>
</span><span class='line'>        <span class="n">px</span><span class="o">.</span><span class="na">setId</span><span class="o">((</span><span class="n">Integer</span><span class="o">)</span> <span class="n">rs</span><span class="o">.</span><span class="na">getObject</span><span class="o">(</span><span class="s">&quot;id_produk&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">px</span><span class="o">.</span><span class="na">setKode</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;kode_produk&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">px</span><span class="o">.</span><span class="na">setNama</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;nama_produk&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">px</span><span class="o">.</span><span class="na">setHarga</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getBigDecimal</span><span class="o">(</span><span class="s">&quot;harga_produk&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setProduk</span><span class="o">(</span><span class="n">px</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// relasi ke penjualan</span>
</span><span class='line'>        <span class="n">Penjualan</span> <span class="n">jual</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Penjualan</span><span class="o">();</span>
</span><span class='line'>        <span class="n">jual</span><span class="o">.</span><span class="na">setId</span><span class="o">((</span><span class="n">Integer</span><span class="o">)</span> <span class="n">rs</span><span class="o">.</span><span class="na">getObject</span><span class="o">(</span><span class="s">&quot;id_penjualan&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">jual</span><span class="o">.</span><span class="na">setWaktuTransaksi</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getDate</span><span class="o">(</span><span class="s">&quot;waktu_transaksi&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setPenjualan</span><span class="o">(</span><span class="n">jual</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">p</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Selain class <code>PenjualanDetail</code> itu sendiri, kita juga membuatkan object <code>Produk</code> dan <code>Penjualan</code> yang kemudian akan dipasang pada object <code>PenjualanDetail</code>.</p>

<h2>Pagination</h2>

<p>Dalam mengambil data yang berjumlah banyak seperti data transaksi, biasanya kita akan melakukan <em>pagination</em>, yaitu membagi data menjadi beberapa halaman. Di MySQL, kita menggunakan keyword <code>LIMIT</code> untuk melakukan hal ini. Keyword <code>LIMIT</code> menerima dua argumen, yaitu nomer record pertama yang mau diambil dan jumlah record yang mau diambil. Jadi bila kita ingin mengambil record 11 - 15, kita menggunakan keyword <code>LIMIT 11, 5</code>.</p>

<p>Ini agak berbeda dengan argumen yang diterima dalam method pencarian kita. Yang diminta di situ adalah nomer halaman dan jumlah record per halaman. Jadi kalau misalnya data kita berjumlah 56 record dan kita ingin setiap halaman berisi 10 record, maka data tersebut akan terbagi menjadi 6 halaman. Bila kita ingin mengambil halaman terakhir, kita memberikan argumen <code>6</code> dan <code>10</code> ke dalam method pencarian.</p>

<p>Tentunya harus ada konversi dari nomer halaman menjadi nomer baris. Ini kita lakukan di class <code>PagingHelper</code> yang isinya sebagai berikut.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PagingHelper</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Integer</span> <span class="nf">halamanJadiStart</span><span class="o">(</span><span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span>
</span><span class='line'>            <span class="n">Integer</span> <span class="n">baris</span><span class="o">){</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">halaman</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">halaman</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">*</span> <span class="n">baris</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Header Detail</h2>

<p>Dalam aplikasi, pasti ada fitur untuk menampilkan daftar transaksi dalam periode tertentu.
Seperti sudah kita bahas, satu transaksi terdiri dari satu header dan beberapa detail.
Data ini tentu ingin kita ambil semua.</p>

<p>Caranya sederhana :</p>

<ol>
<li>Query dulu headernya: <code>select * from t_penjualan where id = ?</code></li>
<li>Query detailnya: <code>select * from t_penjualan_detail where id_penjualan = ?</code></li>
<li>Gabungkan keduanya</li>
</ol>


<p>Berikut contohnya, pada waktu kita ingin mencari <code>Penjualan</code> berdasarkan <code>id</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">Penjualan</span> <span class="nf">cariById</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Penjualan</span> <span class="n">p</span> <span class="o">=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">queryForObject</span><span class="o">(</span><span class="n">SQL_CARI_BY_ID</span><span class="o">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">ResultSetJadiPenjualan</span><span class="o">(),</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">PenjualanDetail</span><span class="o">&gt;</span> <span class="n">daftarDetail</span> <span class="o">=</span> <span class="n">penjualanDetailDao</span>
</span><span class='line'>            <span class="o">.</span><span class="na">cariByPenjualan</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setDaftarPenjualanDetail</span><span class="o">(</span><span class="n">daftarDetail</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">p</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">EmptyResultDataAccessException</span> <span class="n">err</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Di sana, kita memanggil method <code>cariByPenjualan</code> yang ada di class <code>PenjualanDetailDao</code>. Berikut kode programnya</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PenjualanDetail</span><span class="o">&gt;</span> <span class="nf">cariByPenjualan</span><span class="o">(</span><span class="n">Penjualan</span> <span class="n">p</span><span class="o">){</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">PenjualanDetail</span><span class="o">&gt;</span> <span class="n">hasil</span>
</span><span class='line'>        <span class="o">=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="n">SQL_CARI_BY_ID_PENJUALAN</span><span class="o">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">ResultSetJadiPenjualanDetail</span><span class="o">(),</span> <span class="n">p</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// set relasi ke penjualan</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">PenjualanDetail</span> <span class="n">penjualanDetail</span> <span class="o">:</span> <span class="n">hasil</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">penjualanDetail</span><span class="o">.</span><span class="na">setPenjualan</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">hasil</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kembali ke <code>PenjualanDao</code>, setelah kita mendapatkan <code>List&lt;PenjualanDetail&gt;</code> dari method di atas, kita pasang di object penjualan yang sudah kita dapatkan di baris ini</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">p</span><span class="o">.</span><span class="na">setDaftarPenjualanDetail</span><span class="o">(</span><span class="n">daftarDetail</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Demikianlah cara kita mengambil data dari database menggunakan Spring JDBC.
Hal ini tentu tidak rumit asalkan kita sudah paham dasar-dasar SQL termasuk cara melakukan join antar tabel.
Jadi kesimpulannya, untuk mengambil data menggunakan Spring JDBC, yang perlu kita lakukan hanyalah:</p>

<ol>
<li>Membuat SQL, lengkap dengan join bila perlu. Contohnya bisa dilihat di class <code>PenjualanDetailDao</code> yang memiliki banyak join.</li>
<li>Membuat class untuk mengkonversi dari <code>ResultSet</code> menjadi object yang kita inginkan, misalnya <code>Produk</code> atau <code>Penjualan</code></li>
</ol>


<p>Pada bagian selanjutnya, kita tinggal <a href="http://software.endy.muhardin.com/java/mengetes-akses-database/">mengetes kode program</a> yang telah kita buat ini.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Insert Update Delete dengan Spring JDBC]]></title>
    <link href="http://software.endy.muhardin.com/java/insert-update-delete-dengan-spring-jdbc/"/>
    <updated>2013-05-31T13:26:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/insert-update-delete-dengan-spring-jdbc</id>
    <content type="html"><![CDATA[<p>Setelah pada artikel sebelumnya kita membuat konfigurasi database dan membuat kerangka aplikasi, kali ini kita akan membuat implementasi akses database menggunakan Spring JDBC.</p>

<p>Artikel ini merupakan bagian ketiga dari rangkaian artikel Spring JDBC, yaitu</p>

<ol>
<li><a href="http://software.endy.muhardin.com/java/konfigurasi-koneksi-database-dengan-spring/">Konfigurasi koneksi database</a></li>
<li><a href="http://software.endy.muhardin.com/java/struktur-aplikasi-java-dengan-spring-dan-maven/">Struktur Aplikasi</a></li>
<li><a href="http://software.endy.muhardin.com/java/insert-update-delete-dengan-spring-jdbc/">Insert, update, dan delete data</a></li>
<li><a href="http://software.endy.muhardin.com/java/query-dengan-spring-jdbc/">Query data</a></li>
<li><a href="http://software.endy.muhardin.com/java/mengetes-akses-database/">Mengetes Akses Database</a></li>
</ol>


<!--more-->


<h1>Setup DAO</h1>

<p>Supaya bisa diinisialisasi oleh Spring Framework, kita harus menambahkan annotation <code>@Repository</code> di class <code>ProdukDao</code> dan juga class DAO lainnya. Pembahasan lebih detail tentang cara kerja Spring Framework dan fungsinya annotation <code>@Repository</code> dapat dibaca <a href="http://software.endy.muhardin.com/java/memahami-dependency-injection/">di artikel ini</a>.</p>

<p>Selanjutnya, kita akan menambahkan beberapa variabel yang nantinya akan kita butuhkan, yaitu <code>JdbcTemplate</code> dan perintah SQL yang ingin dijalankan.</p>

<h2>JDBC Template</h2>

<p><code>JdbcTemplate</code> adalah class utama dalam Spring JDBC. Semua operasi database dilakukan melalui JdbcTemplate. Kita juga butuh rekannya yang bernama <code>NamedParameterJdbcTemplate</code>. Kelebihan dari <code>NamedParameterJdbcTemplate</code> ini, dia bisa menerima SQL dengan variabel yang diberi nama. Tanpa dia, kita cuma bisa menjalankan SQL yang variabelnya ditandai dengan <code>?</code>, sehingga membingungkan dan rawan terjadi kesalahan kalau jumlah variabelnya banyak.</p>

<p>Kedua object ini kita deklarasikan menjadi object/instance variable, supaya bisa digunakan oleh semua method. Inisialisasinya membutuhkan object <code>DataSource</code>, sehingga sebaiknya kita lakukan inisialisasi di dalam setter injection. Bagi yang belum paham apa itu setter injection silahkan baca dulu <a href="http://software.endy.muhardin.com/java/memahami-dependency-injection/">artikel ini</a>.</p>

<p>Berikut adalah kode programnya.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Repository</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProdukDao</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">NamedParameterJdbcTemplate</span> <span class="n">namedParameterJdbcTemplate</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDataSource</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">jdbcTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">namedParameterJdbcTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NamedParameterJdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>SQL</h2>

<p>Agar lebih rapi, semua perintah SQL yang kita akan gunakan di dalam method sebaiknya kita deklarasikan sebagai konstanta. Berikut adalah berbagai SQL yang kita gunakan.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Repository</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProdukDao</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SQL_INSERT</span> <span class="o">=</span> <span class="s">&quot;insert into m_produk (kode,nama,harga) values (:kode,:nama,:harga)&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SQL_CARI_BY_ID</span> <span class="o">=</span> <span class="s">&quot;select * from m_produk where id = ?&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SQL_CARI_BY_KODE</span> <span class="o">=</span> <span class="s">&quot;select * from m_produk where kode = ?&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SQL_HITUNG_SEMUA</span> <span class="o">=</span> <span class="s">&quot;select count(*) from m_produk&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SQL_CARI_SEMUA</span> <span class="o">=</span> <span class="s">&quot;select * from m_produk limit ?,?&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SQL_HITUNG_BY_NAMA</span> <span class="o">=</span> <span class="s">&quot;select count(*) from m_produk where lower(nama) like ?&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SQL_CARI_BY_NAMA</span> <span class="o">=</span> <span class="s">&quot;select * from m_produk where lower(nama) like ? limit ?,?&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Harap diperhatikan bahwa saya hanya menampilkan potongan kode program yang berkaitan dengan penjelasan saat ini saja, berikut sedikit tambahan supaya jelas di mana penempatannya. Untuk isi kode program yang lengkap silahkan lihat <a href="https://github.com/endymuhardin/belajar-akses-database-java/tree/spring-jdbc/src/main/java/com/muhardin/endy/training/java/aksesdb/dao/springjdbc">di Github</a>.</p>

<h1>Insert Data</h1>

<p>Setelah kita punya <code>JdbcTemplate</code> dan perintah SQL, kita bisa gunakan untuk menyimpan data ke database.
Mari kita implement method <code>simpan</code>.</p>

<h2>Menggunakan parameter domain object</h2>

<p>Class <code>Produk</code> memiliki properti yang bernama <code>kode</code>, <code>nama</code>, dan <code>harga</code>. Karena kita mengikuti aturan penamaan yang baku, maka kita buatkan method getter dan setter. Class yang dibuat mengikuti standar ini bisa langsung diproses oleh Spring JDBC. Dia akan secara otomatis memasangkan properti yang namanya sama dengan yang ada di perintah SQL. Jadi perintah SQL seperti ini</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">insert</span> <span class="k">into</span> <span class="n">m_produk</span> <span class="p">(</span><span class="n">kode</span><span class="p">,</span><span class="n">nama</span><span class="p">,</span><span class="n">harga</span><span class="p">)</span> <span class="k">values</span> <span class="p">(:</span><span class="n">kode</span><span class="p">,:</span><span class="n">nama</span><span class="p">,:</span><span class="n">harga</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Akan diisikan dengan nilai yang didapat dari pemanggilan method berikut:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Produk</span> <span class="n">p</span><span class="o">;</span> <span class="c1">// nantinya p diisi dari method parameter</span>
</span><span class='line'>
</span><span class='line'><span class="n">p</span><span class="o">.</span><span class="na">getKode</span><span class="o">();</span>
</span><span class='line'><span class="n">p</span><span class="o">.</span><span class="na">getNama</span><span class="o">();</span>
</span><span class='line'><span class="n">p</span><span class="o">.</span><span class="na">getHarga</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Spring JDBC juga akan secara otomatis mendeteksi tipe data baik itu <code>Integer</code>, <code>String</code>, <code>BigDecimal</code>, dan sebagainya.</p>

<p>Berikut adalah implementasi method <code>simpan</code> yang menggunakan konsep di atas.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">SqlParameterSource</span> <span class="n">namedParameters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BeanPropertySqlParameterSource</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="n">KeyHolder</span> <span class="n">keyHolder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GeneratedKeyHolder</span><span class="o">();</span>
</span><span class='line'>    <span class="n">namedParameterJdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">SQL_INSERT</span><span class="o">,</span> <span class="n">namedParameters</span><span class="o">,</span> <span class="n">keyHolder</span><span class="o">);</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">keyHolder</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">intValue</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>BeanPropertySqlParameterSource</code> adalah class dari Spring JDBC yang berfungsi mengambil parameter dari Java object seperti telah dijelaskan di atas. Selain mengambil dari object dengan getter dan setter, ada lagi class lain yang bernama <code>MapSqlParameterSource</code>, digunakan untuk mengambil parameter dari object bertipe <code>java.util.Map</code>.</p>

<h2>Mendapatkan nilai yang auto generated</h2>

<p>Di tabel <code>m_produk</code>, primary key ada di kolom <code>id</code>. Nilainya digenerate otomatis oleh database pada saat kita melakukan insert. Kita perlu mengetahui nilai berapa yang dibuatkan database untuk data yang barusan kita insert agar bisa dipasang di object <code>Produk</code> yang kita insert. Untuk menampung nilai yang otomatis dibuatkan database, kita menggunakan class <code>GeneratedKeyHolder</code>.</p>

<p>Setelah kita melakukan insert, <code>keyHolder</code> akan menampung nilai. Nilai inilah yang kita pasang di object produk dengan kode program berikut.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">namedParameterJdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">SQL_INSERT</span><span class="o">,</span> <span class="n">namedParameters</span><span class="o">,</span> <span class="n">keyHolder</span><span class="o">);</span>
</span><span class='line'><span class="n">p</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">keyHolder</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">intValue</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Menggunakan SimpleJdbcInsert</h2>

<p>Object <code>produk</code> di atas hanya memiliki 4 property di Java dan 4 kolom di database. Bila propertynya banyak, tentu kita akan kerepotan menulis variabel dalam perintah SQL. Untuk membantu kita, Spring JDBC menyediakan fitur <code>SimpleJdbcInsert</code>. Cara kerjanya, dia akan <em>menanyakan</em> ke database kolom apa saja yang ada di tabel tertentu berikut tipe data untuk masing-masing kolom. Setelah itu, informasi tersebut digunakan untuk membuatkan SQL insert buat kita, sehingga kita tidak perlu membuat sendiri.</p>

<p>Berikut adalah cara inisialisasi <code>SimpleJdbcInsert</code>, dilakukan di setter injection.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Repository</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProdukDao</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">SimpleJdbcInsert</span> <span class="n">insertProduk</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDataSource</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">insertProduk</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleJdbcInsert</span><span class="o">(</span><span class="n">dataSource</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">withTableName</span><span class="o">(</span><span class="s">&quot;m_produk&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">usingGeneratedKeyColumns</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kita menyebutkan juga kolom mana yang nilainya digenerate database, sehingga dia bisa mengambilkannya. Selanjutnya, mari kita ganti implementasi method <code>simpan</code> dengan memanfaatkan <code>SimpleJdbcInsert</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">SqlParameterSource</span> <span class="n">produkParameter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BeanPropertySqlParameterSource</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Number</span> <span class="n">idBaru</span> <span class="o">=</span> <span class="n">insertProduk</span><span class="o">.</span><span class="na">executeAndReturnKey</span><span class="o">(</span><span class="n">produkParameter</span><span class="o">);</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">idBaru</span><span class="o">.</span><span class="na">intValue</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Insert Data Header dan Detail</h2>

<blockquote><p>Kenapa kita perlu mengambil primary key yang digenerate database?</p></blockquote>


<p>Jawabannya karena kita membutuhkannya dalam skenario header dan detail. Di tabel detail, ada relasi foreign key ke tabel header. Sehingga untuk mengisi foreign key tersebut, kita harus mengetahui dulu primary key header.</p>

<p>Selain masalah foreign key ini, sisanya sama dengan pembahasan insert sebelumnya. Berikut implementasi method <code>simpan(Penjualan p)</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="n">Penjualan</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">SqlParameterSource</span> <span class="n">namedParameters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BeanPropertySqlParameterSource</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="n">KeyHolder</span> <span class="n">keyHolder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GeneratedKeyHolder</span><span class="o">();</span>
</span><span class='line'>    <span class="n">namedParameterJdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">SQL_INSERT</span><span class="o">,</span> <span class="n">namedParameters</span><span class="o">,</span> <span class="n">keyHolder</span><span class="o">);</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">keyHolder</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">intValue</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">PenjualanDetail</span> <span class="n">detail</span> <span class="o">:</span> <span class="n">p</span><span class="o">.</span><span class="na">getDaftarPenjualanDetail</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">detail</span><span class="o">.</span><span class="na">setPenjualan</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>        <span class="n">penjualanDetailDao</span><span class="o">.</span><span class="na">simpan</span><span class="o">(</span><span class="n">detail</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Seperti kita lihat pada kode program di atas, kita insert ke tabel <code>t_penjualan</code>, kemudian kita ambil nilai <code>id</code>. Nilai tersebut kita isikan ke tiap object detail untuk selanjutnya kita insert juga menggunakan method <code>simpan(PenjualanDetail pd)</code> di class <code>PenjualanDetailDao</code>. Berikut implementasinya.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="kd">final</span> <span class="n">PenjualanDetail</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">KeyHolder</span> <span class="n">keyHolder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GeneratedKeyHolder</span><span class="o">();</span>
</span><span class='line'>    <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="k">new</span> <span class="n">PreparedStatementCreator</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">PreparedStatement</span> <span class="nf">createPreparedStatement</span><span class="o">(</span><span class="n">Connection</span> <span class="n">conn</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">PreparedStatement</span> <span class="n">ps</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">SQL_INSERT</span><span class="o">,</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="s">&quot;id&quot;</span><span class="o">});</span>
</span><span class='line'>            <span class="n">ps</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getPenjualan</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>            <span class="n">ps</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getProduk</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>            <span class="n">ps</span><span class="o">.</span><span class="na">setBigDecimal</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getHarga</span><span class="o">());</span>
</span><span class='line'>            <span class="n">ps</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getJumlah</span><span class="o">());</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">ps</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">},</span> <span class="n">keyHolder</span><span class="o">);</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">keyHolder</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">intValue</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pada waktu menyimpan <code>PenjualanDetail</code>, kita menggunakan teknik yang agak berbeda, tidak menggunakan <code>SimpleJdbcInsert</code> maupun <code>NamedParameterJdbcTemplate</code>. Ini disebabkan karena banyak kolom yang namanya tidak mengikuti aturan penamaan, yaitu <code>id_penjualan</code> dan <code>id_produk</code>. Karena itu kita menggunakan cara yang lebih manual, membuat sendiri <code>PreparedStatement</code> dan kemudian mengisi parameternya.</p>

<p>Walaupun demikian, kita tidak mengeksekusi <code>PreparedStatement</code> tersebut, karena urusan mengeksekusi akan ditangani Spring JDBC supaya bisa dibungkus dalam transaction. Kenapa harus dibungkus dalam transaction? Jawabannya bisa dibaca di <a href="http://software.endy.muhardin.com/java/database-transaction/">artikel ini</a>.</p>

<h1>Update Data</h1>

<p>Pada prinsipnya, update data tidak berbeda dengan insert data. Kita dapat melakukannya dengan cara yang sama seperti insert data di atas. Tapi karena kita ingin melihat fitur-fitur Spring JDBC, baiklah kita lakukan dengan cara yang sedikit berbeda.</p>

<h2>Menggunakan parameter bertipe Map</h2>

<p>Kalau di atas kita sudah menggunakan parameter menggunakan <code>?</code> dan domain object, kali ini kita akan menggunakan <code>Map</code>. Cara ini digunakan bila nama variabel di SQL berbeda dengan nama variabel di domain object, sehingga kita tidak bisa menggunakan <code>BeanPropertySqlParameterSource</code>. Kita juga tidak mau menggunakan <code>?</code> karena rawan terjadi salah ketik.</p>

<p>Kita ubah sedikit method <code>simpan(Produk p )</code> agar bisa menangani penyimpanan data produk baru (insert) maupun penyimpanan data produk lama (update). Berikut kode program method <code>simpan(Produk p )</code> yang baru.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">SqlParameterSource</span> <span class="n">produkParameter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BeanPropertySqlParameterSource</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Number</span> <span class="n">idBaru</span> <span class="o">=</span> <span class="n">insertProduk</span><span class="o">.</span><span class="na">executeAndReturnKey</span><span class="o">(</span><span class="n">produkParameter</span><span class="o">);</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">idBaru</span><span class="o">.</span><span class="na">intValue</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">SqlParameterSource</span> <span class="n">produkParameter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MapSqlParameterSource</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">addValue</span><span class="o">(</span><span class="s">&quot;id_produk&quot;</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getId</span><span class="o">())</span>
</span><span class='line'>                <span class="o">.</span><span class="na">addValue</span><span class="o">(</span><span class="s">&quot;kode_produk&quot;</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getKode</span><span class="o">())</span>
</span><span class='line'>                <span class="o">.</span><span class="na">addValue</span><span class="o">(</span><span class="s">&quot;nama_produk&quot;</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getNama</span><span class="o">())</span>
</span><span class='line'>                <span class="o">.</span><span class="na">addValue</span><span class="o">(</span><span class="s">&quot;harga_produk&quot;</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getHarga</span><span class="o">());</span>
</span><span class='line'>        <span class="n">namedParameterJdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">SQL_UPDATE_PRODUK</span><span class="o">,</span> <span class="n">produkParameter</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Agar lebih jelas, kita tampilkan juga deklarasi <code>SQL_UPDATE_PRODUK</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SQL_UPDATE_PRODUK</span>
</span><span class='line'>    <span class="o">=</span> <span class="s">&quot;update m_produk set kode = :kode_produk, nama = :nama_produk, harga = :harga_produk where id = :id_produk&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Penggunaan <code>MapSqlParameterSource</code> dapat dilihat di blok <code>else</code>. Argumen kiri dari method <code>addValue</code> adalah nama variabel dalam <code>SQL_UPDATE_PRODUK</code>, sedangkan argumen kanan adalah nilai yang ingin diisikan.</p>

<h1>Delete Data</h1>

<p>Bila kita sudah menguasai insert dan update, maka delete seharusnya tidak menjadi masalah. Berikut kode program untuk menghapus data produk.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">hapus</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">SQL_HAPUS</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Berikut deklarasi <code>SQL_HAPUS</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SQL_HAPUS</span> <span class="o">=</span> <span class="s">&quot;delete from m_produk where id = ?&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Menghapus <code>penjualan</code> yang memiliki relasi header detail juga tidak sulit. Pastikan kita menghapus detailnya dulu sebelum menghapus headernya agar tidak terjadi pelanggaran <a href="http://en.wikipedia.org/wiki/Referential_integrity">referential integrity</a>.</p>

<p>Berikut contoh pesan error bila kita menghapus data produk yang sudah dipakai dalam transaksi.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">dao</span><span class="o">.</span><span class="na">DataIntegrityViolationException</span><span class="o">:</span> <span class="n">PreparedStatementCallback</span><span class="o">;</span>
</span><span class='line'><span class="n">SQL</span> <span class="o">[</span><span class="n">delete</span> <span class="n">from</span> <span class="n">m_produk</span> <span class="n">where</span> <span class="n">id</span> <span class="o">=</span> <span class="o">?];</span>
</span><span class='line'><span class="n">Cannot</span> <span class="n">delete</span> <span class="n">or</span> <span class="n">update</span> <span class="n">a</span> <span class="n">parent</span> <span class="nl">row:</span>
</span><span class='line'><span class="n">a</span> <span class="n">foreign</span> <span class="n">key</span> <span class="n">constraint</span> <span class="nf">fails</span> <span class="o">(</span><span class="err">`</span><span class="n">belajar</span><span class="err">`</span><span class="o">.</span><span class="err">`</span><span class="n">t_penjualan_detail</span><span class="err">`</span><span class="o">,</span>
</span><span class='line'><span class="n">CONSTRAINT</span> <span class="err">`</span><span class="n">t_penjualan_detail_ibfk_2</span><span class="err">`</span> <span class="n">FOREIGN</span> <span class="n">KEY</span> <span class="o">(</span><span class="err">`</span><span class="n">id_produk</span><span class="err">`</span><span class="o">)</span>
</span><span class='line'><span class="n">REFERENCES</span> <span class="err">`</span><span class="n">m_produk</span><span class="err">`</span> <span class="o">(</span><span class="err">`</span><span class="n">id</span><span class="err">`</span><span class="o">));</span>
</span><span class='line'><span class="n">nested</span> <span class="n">exception</span> <span class="n">is</span>
</span><span class='line'><span class="n">com</span><span class="o">.</span><span class="na">mysql</span><span class="o">.</span><span class="na">jdbc</span><span class="o">.</span><span class="na">exceptions</span><span class="o">.</span><span class="na">jdbc4</span><span class="o">.</span><span class="na">MySQLIntegrityConstraintViolationException</span><span class="o">:</span>
</span><span class='line'><span class="n">Cannot</span> <span class="n">delete</span> <span class="n">or</span> <span class="n">update</span> <span class="n">a</span> <span class="n">parent</span> <span class="nl">row:</span>
</span><span class='line'><span class="n">a</span> <span class="n">foreign</span> <span class="n">key</span> <span class="n">constraint</span> <span class="nf">fails</span> <span class="o">(</span><span class="err">`</span><span class="n">belajar</span><span class="err">`</span><span class="o">.</span><span class="err">`</span><span class="n">t_penjualan_detail</span><span class="err">`</span><span class="o">,</span>
</span><span class='line'><span class="n">CONSTRAINT</span> <span class="err">`</span><span class="n">t_penjualan_detail_ibfk_2</span><span class="err">`</span> <span class="n">FOREIGN</span> <span class="n">KEY</span> <span class="o">(</span><span class="err">`</span><span class="n">id_produk</span><span class="err">`</span><span class="o">)</span>
</span><span class='line'><span class="n">REFERENCES</span> <span class="err">`</span><span class="n">m_produk</span><span class="err">`</span> <span class="o">(</span><span class="err">`</span><span class="n">id</span><span class="err">`</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pada pesan error di atas, data <code>produk</code> tidak bisa dihapus karena sudah digunakan sebagai relasi foreign key dari <code>penjualan detail</code>.</p>

<p>Demikianlah penjelasan tentang insert, update, dan delete data. Nantikan <a href="http://software.endy.muhardin.com/java/query-dengan-spring-jdbc/">bagian selanjutnya</a> yang membahas tentang query select.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Struktur Aplikasi Java dengan Spring dan Maven]]></title>
    <link href="http://software.endy.muhardin.com/java/struktur-aplikasi-java-dengan-spring-dan-maven/"/>
    <updated>2013-05-28T15:06:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/struktur-aplikasi-java-dengan-spring-dan-maven</id>
    <content type="html"><![CDATA[<p>Pada <a href="http://software.endy.muhardin.com/java/konfigurasi-koneksi-database-dengan-spring/">bagian sebelumnya</a> kita telah membahas konfigurasi awal
dan studi kasus yang akan digunakan untuk menunjukkan fitur Spring JDBC.</p>

<p>Di artikel bagian kedua ini, kita akan membahas tentang kerangka aplikasi yang akan dibuat.
Sebelum membuat implementasi detail, sangat penting kita buat dulu kerangkanya supaya jelas
apa saja bagian-bagian dalam aplikasi dan bagaimana mereka saling terhubung.</p>

<p>Artikel ini merupakan bagian kedua dari rangkaian artikel Spring JDBC, yaitu</p>

<ol>
<li><a href="http://software.endy.muhardin.com/java/konfigurasi-koneksi-database-dengan-spring/">Konfigurasi koneksi database</a></li>
<li><a href="http://software.endy.muhardin.com/java/struktur-aplikasi-java-dengan-spring-dan-maven/">Struktur Aplikasi</a></li>
<li><a href="http://software.endy.muhardin.com/java/insert-update-delete-dengan-spring-jdbc/">Insert, update, dan delete data</a></li>
<li><a href="http://software.endy.muhardin.com/java/query-dengan-spring-jdbc/">Query data</a></li>
<li><a href="http://software.endy.muhardin.com/java/mengetes-akses-database/">Mengetes Akses Database</a></li>
</ol>


<!--more-->


<h2>Daftar class yang akan dibuat</h2>

<p>Class yang akan dibuat kita bagi menjadi empat fungsi utama, yaitu:</p>

<ul>
<li>domain object : class yang mewakili struktur data dalam aplikasi kita</li>
<li>interface business service : class yang mendefinisikan daftar fitur-fitur dalam aplikasi</li>
<li>implementasi business service : implementasi dari interface business service. Kalau di interface hanya ada nama method, argumen, dan tipe data kembalian (return value), di sini sudah ada implementasi konkritnya, yaitu bagaimana query database, logika perhitungan, dan sebagainya.</li>
<li>automated test : memeriksa apakah method kita berjalan benar itu melelahkan. Jadi kita buatkan kode program untuk mengetesnya, sehingga tes yang sama bisa dijalankan berulang-ulang tanpa membuat kita lelah. Lebih lanjut tentang automated test bisa dibaca di <a href="http://software.endy.muhardin.com/java/ruthless-testing-1/">artikel lain yang membahas masalah ini</a>.</li>
</ul>


<h3>Domain Object</h3>

<p>Sesuai dengan skema database, kita akan membuat tiga class, yaitu:</p>

<ul>
<li>Produk</li>
<li>Penjualan</li>
<li>PenjualanDetail</li>
</ul>


<p>Buat yang sudah pernah coding JDBC biasanya akan bertanya,</p>

<blockquote><p>Kenapa repot-repot membuat domain class, kemudian harus konversi bolak balik?<br/>Kan bisa saja kita kirim `ResultSet` ke tampilan, ataupun insert langsung dari array ke `PreparedStatement`.</p></blockquote>


<p>Pertanyaan ini biasanya muncul dari programmer PHP yang terbiasa langsung menampilkan kembalian <code>mysql_fetch_array</code> dalam looping tabel.</p>

<p>Ada beberapa alasan:</p>

<ol>
<li><p>Sebenarnya bisa saja kita buat aplikasi dengan menggunakan tipe data yang disediakan Java seperti Integer, String, Map, List, dan lainnya. Tapi akibatnya kode program kita menjadi sulit dimengerti. Coba bandingkan, lebih mudah dimengerti <code>public void simpan(Produk p)</code> atau <code>public void simpan(Map p)</code>? Dengan membuat tipe data sesuai istilah yang digunakan di domain kita, maka kode program akan lebih mudah dipahami.</p></li>
<li><p>Java merupakan bahasa yang <a href="http://en.wikipedia.org/wiki/Strong_and_weak_typing">strongly-typed</a>, dia memeriksa tipe data/class dari tiap variabel. Pada ilustrasi di atas, method <code>public void simpan(Map p)</code> akan menerima apapun data yang kita masukkan ke dalam variabel <code>p</code>. Kalau ada kesalahan dalam nama variabel (misalnya nama ditulis name), baru akan terdeteksi pada waktu aplikasi dijalankan. Berbeda dengan <code>public void simpan(Produk p)</code> yang akan langsung menimbulkan pesan error apabila kita isi dengan tipe data selain <code>Produk</code>. Bug yang ditemukan pada waktu coding (compile-time) akan jauh lebih cepat diperbaiki daripada bug yang baru ditemukan pada waktu aplikasi dijalankan (runtime). Programmer PHP ada benarnya juga. Di bahasa PHP memang domain class ini tidak diperlukan, karena PHP tidak ada pemeriksaan compile-time. Tapi karena kita menggunakan Java, ada baiknya kita manfaatkan pemeriksaan compile-time ini.</p></li>
<li><p>Memisahkan antara layer database dan layer antarmuka. Apabila ada perubahan skema database, asalkan fitur di tampilan tidak berubah, kita cukup mengubah mapping domain object dan skema database. Tidak perlu mengubah kode program di layer antarmuka.</p></li>
<li><p>Pustaka siap pakai untuk validasi. Di Java, ada yang namanya <a href="http://jcp.org/en/jsr/detail?id=303">JSR-303</a>, yaitu suatu pustaka yang berguna untuk validasi. Dengan <a href="http://www.mkyong.com/spring-mvc/spring-3-mvc-and-jsr303-valid-example/">menggunakan JSR-303</a> ini kita tidak perlu lagi melakukan pengecekan <code>if(produk.getKode() == null)</code>. Cukup kita gunakan deklarasi <code>@NotNull private String kode;</code> dalam class <code>Produk</code></p></li>
</ol>


<h3>Interface Business Service</h3>

<p>Interface di Java artinya class yang methodnya abstrak semua. Lebih detail tentang method abstrak bisa dibaca di <a href="http://software.endy.muhardin.com/java/interface-abstract/">artikel ini</a>. Ada beberapa alasan kenapa kita harus memisahkan interface dan implementasinya, antara lain:</p>

<ul>
<li><p>pada waktu <a href="http://software.endy.muhardin.com/java/remoting-dengan-spring/">membuat aplikasi client-server</a>, kita cukup memberikan domain object dan interface ini kepada programmer aplikasi client. Sedangkan implementasinya (yang berisi kode program akses database) tetap di server. Ini akan meringankan ukuran aplikasi client, karena tidak perlu menyertakan implementasi (beserta library pendukungnya yang biasanya besar) yang tidak dia gunakan.</p></li>
<li><p>kita bebas mengubah strategi implementasi (misalnya ganti database dari MySQL menjadi PostgreSQL) tanpa perlu mengganggu aplikasi client</p></li>
<li><p>fitur declarative transaction yang dimiliki Spring akan lebih optimal bekerja bila kita memisahkan interface dan implementasi.</p></li>
</ul>


<p>Interface ini cukup satu class saja, yaitu <code>AplikasiPenjualanService</code>.</p>

<h3>Implementasi Business Service</h3>

<p>Ini merupakan implementasi dari interface <code>AplikasiPenjualanService</code>. Pada prakteknya, ada dua variasi yang biasa saya gunakan dalam membuat implementasi, yaitu:</p>

<ul>
<li>cukup membuat class implementasi service saja</li>
<li>membuat class implementasi service dan juga class data access object (DAO)</li>
</ul>


<p>Kapan memilih variasi yang mana?</p>

<ul>
<li>Bila menggunakan framework Spring Data JPA, kita harus pakai DAO karena frameworknya minta seperti itu</li>
<li>Selain Spring Data JPA, bebas mau pakai yang mana. Pilih saja yang lebih rapi dan mudah maintenance. Untuk aplikasi kecil, class implementasi service saja sudah cukup. Kalau aplikasinya besar, akan lebih mudah membaca 10 class DAO yang masing-masingnya terdiri dari 100 baris kode daripada 1000 baris dalam satu class implementasi service. Walaupun demikian, tidak ada pertimbangan teknis yang signifikan (seperti isu performance dan lainnya) antara pakai DAO atau tidak.</li>
</ul>


<h3>Automated Test</h3>

<p>Ini adalah kode program yang fungsinya mengetes kode program lainnya, dalam hal ini class implementasi dan class DAO. Konsep dasar tentang automated testing dibahas di <a href="http://software.endy.muhardin.com/java/ruthless-testing-1/">artikel ini</a>. Sedangkan untuk pengetesan database dibahas <a href="http://software.endy.muhardin.com/java/ruthless-testing-4/">di sini</a>.</p>

<p>Pada contoh aplikasi ini, kita menghadapi tantangan khusus, yaitu bagaimana caranya menggunakan test case yang sama untuk konfigurasi berbeda. Nantinya aplikasi ini akan dikembangkan untuk mendemonstrasikan akses database menggunakan framework lain seperti Hibernate, Spring Data JPA, dan JDBC polos tanpa framework. Logika pengetesan akan sama persis, yaitu:</p>

<ul>
<li>test insert</li>
<li>test update</li>
<li>test delete</li>
<li>test cari berdasarkan id</li>
<li>test ambil semua data dari tabel tertentu</li>
<li>test cari data dengan kriteria tertentu</li>
</ul>


<p>Tabel database yang diakses sama, sample data sama, bahkan nama method yang dijalankan juga sama. Bedanya hanyalah class implementasi mana yang digunakan dan konfigurasi mana yang dipakai.</p>

<p>Untuk itu, kita akan menggunakan teknik khusus yang disebut <code>abstract junit test case</code>. Secara garis besar, langkahnya seperti ini:</p>

<ol>
<li>Buat semua method test di superclass. Superclass ini memiliki abstract method, sehingga dengan sendirinya dia juga abstract.</li>
<li>Untuk mendapatkan class implementasi dan melakukan inisialisasi konfigurasi, gunakan abstract method</li>
<li>Buat subclass untuk masing-masing implementasi (Spring JDBC, Hibernate, dst) yang hanya berisi implementasi dari abstract method tersebut.</li>
</ol>


<p>Agar lebih jelas, silahkan lihat <a href="https://github.com/endymuhardin/belajar-akses-database-java/blob/spring-jdbc/src/test/java/com/muhardin/endy/training/java/aksesdb/service/ProdukServiceTest.java">superclassnya</a> dan <a href="https://github.com/endymuhardin/belajar-akses-database-java/blob/spring-jdbc/src/test/java/com/muhardin/endy/training/java/aksesdb/service/springjdbc/ProdukServiceSpringJdbcTest.java">subclass untuk Spring JDBC</a>.</p>

<h2>Struktur folder</h2>

<p>Sekian banyak class, bagaimana penempatannya? Silahkan lihat struktur folder berikut:</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/struktur-aplikasi-spring-maven/01-struktur-folder-top-level.png" title="Top Level Folder" ></p>

<p>Tidak ada yang istimewa dari struktur di atas, cuma struktur folder standar Maven. Mari kita lihat source code aplikasi.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/struktur-aplikasi-spring-maven/02-struktur-folder-main-java.png" title="Source Folder Java" ></p>

<p>Di sini kita bisa lihat class sudah diatur ke dalam package berbeda sesuai fungsinya, yaitu domain, service, dao. Untuk implementasi service dengan Spring JDBC kita buatkan package tersendiri. Selanjutnya kita lihat lokasi file konfigurasi.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/struktur-aplikasi-spring-maven/03-struktur-folder-main-resources.png" title="Source Folder Konfigurasi" ></p>

<p>File konfigurasi ditaruh dalam package. Sebetulnya ditaruh di top level juga boleh, ini hanya sekedar kebiasaan saja.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/struktur-aplikasi-spring-maven/04-struktur-folder-test.png" title="Source Test Folder" ></p>

<p>Lokasi penempatan test class bisa dilihat di atas. Abstract class yang saya ceritakan di atas terlihat di package <code>com.muhardin.endy.training.java.aksesdb.service</code>, sedangkan implementasi konfigurasinya ada di subpackage <code>springjdbc</code> di bawahnya.</p>

<p>Setelah kita melihat penempatan file dan folder, mari kita lihat kerangka kode program di masing-masing class/file. Supaya bisa mendapatkan <em>big-picture</em>, kita akan lihat kerangka class dan method saja. Implementasinya menyusul pada bagian selanjutnya.</p>

<h1>Domain Object</h1>

<h2>Class Produk</h2>

<p>Class ini merupakan padanan tabel m_produk di database.
Dia memiliki beberapa property sesuai dengan kolom di database.
Berikut penjelasannya</p>

<table>
<thead>
<tr>
<th>Nama Property </th>
<th> Nama Kolom Database </th>
<th> Tipe Data Java </th>
<th> Tipe Data MySQL</th>
</tr>
</thead>
<tbody>
<tr>
<td>id            </td>
<td> id                  </td>
<td> Integer        </td>
<td> integer</td>
</tr>
<tr>
<td>kode          </td>
<td> kode                </td>
<td> String         </td>
<td> varchar</td>
</tr>
<tr>
<td>nama          </td>
<td> nama                </td>
<td> String         </td>
<td> varchar</td>
</tr>
<tr>
<td>harga         </td>
<td> harga               </td>
<td> BigDecimal     </td>
<td> decimal(19,2)</td>
</tr>
</tbody>
</table>


<p>Berikut kode program untuk class Produk.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">domain</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.math.BigDecimal</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Produk</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">kode</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">nama</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">BigDecimal</span> <span class="n">harga</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// getter dan setter generate dari IDE</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Class Penjualan</h2>

<p>Mapping Java ke SQL</p>

<table>
<thead>
<tr>
<th>Nama Property  </th>
<th> Nama Kolom Database </th>
<th> Tipe Data Java </th>
<th> Tipe Data MySQL</th>
</tr>
</thead>
<tbody>
<tr>
<td>id             </td>
<td> id                  </td>
<td> Integer        </td>
<td> integer</td>
</tr>
<tr>
<td>waktuTransaksi </td>
<td> waktu_transaksi     </td>
<td> Date           </td>
<td> datetime</td>
</tr>
</tbody>
</table>


<p>Kode program class Penjualan</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">domain</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// import generate dari IDE</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Penjualan</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Date</span> <span class="n">waktuTransaksi</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PenjualanDetail</span><span class="o">&gt;</span> <span class="n">daftarPenjualanDetail</span>
</span><span class='line'>        <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">PenjualanDetail</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// getter dan setter generate dari IDE</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Class Penjualan Detail</h2>

<p>Mapping Java ke SQL</p>

<table>
<thead>
<tr>
<th>Nama Property  </th>
<th> Nama Kolom Database </th>
<th> Tipe Data Java </th>
<th> Tipe Data MySQL</th>
</tr>
</thead>
<tbody>
<tr>
<td>id             </td>
<td> id                  </td>
<td> Integer        </td>
<td> integer</td>
</tr>
<tr>
<td>penjualan      </td>
<td> id_penjualan        </td>
<td> Penjualan      </td>
<td> integer foreign key</td>
</tr>
<tr>
<td>produk         </td>
<td> id_produk           </td>
<td> Produk         </td>
<td> integer foreign key</td>
</tr>
<tr>
<td>jumlah         </td>
<td> jumlah              </td>
<td> Integer        </td>
<td> integer</td>
</tr>
<tr>
<td>harga          </td>
<td> harga               </td>
<td> BigDecimal     </td>
<td> decimal(19,2)</td>
</tr>
</tbody>
</table>


<p>Kode program class PenjualanDetail</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">domain</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.math.BigDecimal</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PenjualanDetail</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Penjualan</span> <span class="n">penjualan</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Produk</span> <span class="n">produk</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">BigDecimal</span> <span class="n">harga</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">jumlah</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// getter dan setter generate dari IDE</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yang perlu diperhatikan di sini adalah perbedaan cara perlakuan relasi antara Java dan database.
Di Java, kita perlu mendefinisikan relasi di dua tempat, yaitu variabel <code>daftarPenjualanDetail</code> di class <code>Penjualan</code>
dan variabel <code>penjualan</code> di class <code>PenjualanDetail</code>. Sedangkan di database, relasi ini cukup didefinisikan melalui foreign key
<code>id_penjualan</code> di tabel <code>t_penjualan_detail</code>.</p>

<p>Perbedaan lain, di database relasi ini cukup diwakili satu nilai saja, yaitu nilai foreign key.
Sedangkan di Java diwakili satu class penuh (<code>Produk</code> atau <code>Penjualan</code>) yang di dalamnya memuat banyak nilai.</p>

<p>Untuk menjembatani perbedaan ini, kita perlu membuat mapper untuk mengubah data dari database menjadi object Java dan sebaliknya. Contoh kode program untuk mapper ini akan dibahas pada bagian selanjutnya.</p>

<h1>Interface Business Service</h1>

<p>Ini adalah daftar fitur yang ada di aplikasi, didefinisikan berupa class/interface dan method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">service</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// import generate dari IDE</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">PenjualanService</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// service berkaitan dengan produk</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Produk</span> <span class="nf">cariProdukById</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Produk</span> <span class="nf">cariProdukByKode</span><span class="o">(</span><span class="n">String</span> <span class="n">kode</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Long</span> <span class="nf">hitungSemuaProduk</span><span class="o">();</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Produk</span><span class="o">&gt;</span> <span class="nf">cariSemuaProduk</span><span class="o">(</span><span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Long</span> <span class="nf">hitungProdukByNama</span><span class="o">(</span><span class="n">String</span> <span class="n">nama</span><span class="o">);</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Produk</span><span class="o">&gt;</span> <span class="nf">cariProdukByNama</span><span class="o">(</span><span class="n">String</span> <span class="n">nama</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// service yang berkaitan dengan transaksi</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="n">Penjualan</span> <span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Penjualan</span> <span class="nf">cariPenjualanById</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Long</span> <span class="nf">hitungPenjualanByPeriode</span><span class="o">(</span><span class="n">Date</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">Date</span> <span class="n">sampai</span><span class="o">);</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Penjualan</span><span class="o">&gt;</span> <span class="nf">cariPenjualanByPeriode</span><span class="o">(</span><span class="n">Date</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">Date</span> <span class="n">sampai</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Long</span> <span class="nf">hitungPenjualanDetailByProdukDanPeriode</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">,</span> <span class="n">Date</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">Date</span> <span class="n">sampai</span><span class="o">);</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">PenjualanDetail</span><span class="o">&gt;</span> <span class="nf">cariPenjualanDetailByProdukDanPeriode</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">,</span> <span class="n">Date</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">Date</span> <span class="n">sampai</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Implementasi Business Service</h1>

<p>Implementasi dari interface di atas kita bagi menjadi dua kategori, yaitu class implementasi service yang nantinya akan memanggil class DAO. Pertimbangan dan alasan mengapa begini sudah dijelaskan di atas.</p>

<h2>Class ServiceSpringJdbc</h2>

<p>Class ini sebetulnya hanya memanggil class DAO saja, jadi baiklah kita tampilkan seluruh isinya di sini.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">springjdbc</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// import statement generate dari IDE</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Service</span> <span class="nd">@Transactional</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PenjualanServiceSpringJdbc</span> <span class="kd">implements</span> <span class="n">PenjualanService</span><span class="o">{</span>
</span><span class='line'>    <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">ProdukDao</span> <span class="n">produkDao</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">PenjualanDao</span> <span class="n">penjualanDao</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">PenjualanDetailDao</span> <span class="n">penjualanDetailDao</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">produkDao</span><span class="o">.</span><span class="na">simpan</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Produk</span> <span class="nf">cariProdukById</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">produkDao</span><span class="o">.</span><span class="na">cariById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Produk</span> <span class="nf">cariProdukByKode</span><span class="o">(</span><span class="n">String</span> <span class="n">kode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">produkDao</span><span class="o">.</span><span class="na">cariByKode</span><span class="o">(</span><span class="n">kode</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">hitungSemuaProduk</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">produkDao</span><span class="o">.</span><span class="na">hitungSemua</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Produk</span><span class="o">&gt;</span> <span class="nf">cariSemuaProduk</span><span class="o">(</span><span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">produkDao</span><span class="o">.</span><span class="na">cariSemua</span><span class="o">(</span><span class="n">halaman</span><span class="o">,</span> <span class="n">baris</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">hitungProdukByNama</span><span class="o">(</span><span class="n">String</span> <span class="n">nama</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">produkDao</span><span class="o">.</span><span class="na">hitungByNama</span><span class="o">(</span><span class="n">nama</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Produk</span><span class="o">&gt;</span> <span class="nf">cariProdukByNama</span><span class="o">(</span><span class="n">String</span> <span class="n">nama</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">produkDao</span><span class="o">.</span><span class="na">cariByNama</span><span class="o">(</span><span class="n">nama</span><span class="o">,</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">baris</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="n">Penjualan</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">penjualanDao</span><span class="o">.</span><span class="na">simpan</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Penjualan</span> <span class="nf">cariPenjualanById</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">penjualanDao</span><span class="o">.</span><span class="na">cariById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">hitungPenjualanByPeriode</span><span class="o">(</span><span class="n">Date</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">Date</span> <span class="n">sampai</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">penjualanDao</span><span class="o">.</span><span class="na">hitungByPeriode</span><span class="o">(</span><span class="n">mulai</span><span class="o">,</span> <span class="n">sampai</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Penjualan</span><span class="o">&gt;</span> <span class="nf">cariPenjualanByPeriode</span><span class="o">(</span><span class="n">Date</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">Date</span> <span class="n">sampai</span><span class="o">,</span>
</span><span class='line'>            <span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">penjualanDao</span><span class="o">.</span><span class="na">cariByPeriode</span><span class="o">(</span><span class="n">mulai</span><span class="o">,</span> <span class="n">sampai</span><span class="o">,</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">baris</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">hitungPenjualanDetailByProdukDanPeriode</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">,</span>
</span><span class='line'>            <span class="n">Date</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">Date</span> <span class="n">sampai</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">penjualanDetailDao</span><span class="o">.</span><span class="na">hitungByProdukDanPeriode</span><span class="o">(</span><span class="n">p</span><span class="o">,</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">sampai</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PenjualanDetail</span><span class="o">&gt;</span> <span class="nf">cariPenjualanDetailByProdukDanPeriode</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">,</span>
</span><span class='line'>            <span class="n">Date</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">Date</span> <span class="n">sampai</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">penjualanDetailDao</span><span class="o">.</span><span class="na">cariByProdukDanPeriode</span><span class="o">(</span><span class="n">p</span><span class="o">,</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">sampai</span><span class="o">,</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">baris</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Class DAO</h2>

<p>Class DAO akan kita bahas secara mendetail di bagian selanjutnya. Pada kesempatan ini kita hanya tampilkan deklarasi class dan method saja supaya jelas mana method yang dipanggil dari implementasi service di atas.</p>

<h3>ProdukDAO</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">dao</span><span class="o">.</span><span class="na">springjdbc</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// import generate dari IDE</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Repository</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProdukDao</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Produk</span> <span class="nf">cariById</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Produk</span> <span class="nf">cariByKode</span><span class="o">(</span><span class="n">String</span> <span class="n">kode</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">hitungSemua</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Produk</span><span class="o">&gt;</span> <span class="nf">cariSemua</span><span class="o">(</span><span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">hitungByNama</span><span class="o">(</span><span class="n">String</span> <span class="n">nama</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Produk</span><span class="o">&gt;</span> <span class="nf">cariByNama</span><span class="o">(</span><span class="n">String</span> <span class="n">nama</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">ResultSetJadiProduk</span> <span class="kd">implements</span> <span class="n">RowMapper</span><span class="o">&lt;</span><span class="n">Produk</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Produk</span> <span class="nf">mapRow</span><span class="o">(</span><span class="n">ResultSet</span> <span class="n">rs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>PenjualanDao</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">dao</span><span class="o">.</span><span class="na">springjdbc</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// import generate dari IDE</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Repository</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PenjualanDao</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="n">Penjualan</span> <span class="n">p</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Penjualan</span> <span class="nf">cariById</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">hitungByPeriode</span><span class="o">(</span><span class="n">Date</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">Date</span> <span class="n">sampai</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Penjualan</span><span class="o">&gt;</span> <span class="nf">cariByPeriode</span><span class="o">(</span><span class="n">Date</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">Date</span> <span class="n">sampai</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">ResultSetJadiPenjualan</span> <span class="kd">implements</span> <span class="n">RowMapper</span><span class="o">&lt;</span><span class="n">Penjualan</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Penjualan</span> <span class="nf">mapRow</span><span class="o">(</span><span class="n">ResultSet</span> <span class="n">rs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>PenjualanDetailDao</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">dao</span><span class="o">.</span><span class="na">springjdbc</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// import generate dari IDE</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Repository</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PenjualanDetailDao</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="kd">final</span> <span class="n">PenjualanDetail</span> <span class="n">p</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PenjualanDetail</span><span class="o">&gt;</span> <span class="nf">cariByPenjualan</span><span class="o">(</span><span class="n">Penjualan</span> <span class="n">p</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">hitungByProdukDanPeriode</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">,</span> <span class="n">Date</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">Date</span> <span class="n">sampai</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PenjualanDetail</span><span class="o">&gt;</span> <span class="nf">cariByProdukDanPeriode</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">,</span> <span class="n">Date</span> <span class="n">mulai</span><span class="o">,</span> <span class="n">Date</span> <span class="n">sampai</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">halaman</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">baris</span><span class="o">)</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">ResultSetJadiPenjualanDetail</span> <span class="kd">implements</span> <span class="n">RowMapper</span><span class="o">&lt;</span><span class="n">PenjualanDetail</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">PenjualanDetail</span> <span class="nf">mapRow</span><span class="o">(</span><span class="n">ResultSet</span> <span class="n">rs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Automated Test</h1>

<p>Seperti dijelaskan di atas, automated test kita bagi menjadi dua kategori, yaitu abstract class yang menampung semua logika pengetesan, dan concrete class yang menyediakan konfigurasi.</p>

<h2>Abstract Base Class</h2>

<h3>ProdukServiceTest</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">service</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// import generate dari IDE</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">ProdukServiceTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">PenjualanService</span> <span class="nf">getPenjualanService</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">DataSource</span> <span class="nf">getDataSource</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Before</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">bersihkanDataTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSimpanProduk</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCariProdukById</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCariProdukByKode</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testHitungSemuaProduk</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCariSemuaProduk</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testHitungProdukByNama</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCariProdukByNama</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>PenjualanServiceTest</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">service</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// import generate dari IDE</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">PenjualanServiceTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">PenjualanService</span> <span class="nf">getPenjualanService</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">DataSource</span> <span class="nf">getDataSource</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Before</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">bersihkanDataTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSimpanPenjualan</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCariPenjualanById</span><span class="o">(){}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testHitungPenjualanByPeriode</span><span class="o">(){}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCariPenjualanByPeriode</span><span class="o">(){}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testHitungPenjualanDetailByProdukDanPeriode</span><span class="o">(){}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCariPenjualanDetailByProdukDanPeriode</span><span class="o">(){}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Seperti kita lihat di atas, kedua class tersebut memiliki dua abstract method, yaitu:</p>

<ul>
<li><code>public abstract PenjualanService getPenjualanService()</code></li>
<li><code>public abstract DataSource getDataSource();</code></li>
</ul>


<p>Kedua object <code>PenjualanService</code> dan <code>DataSource</code> didapatkan dari konfigurasi Spring.
Konfigurasi Spring dibuat berdasarkan teknologi yang digunakan.
Konfigurasi Spring JDBC berbeda dengan konfigurasi Hibernate ataupun Spring Data JPA.</p>

<p>Dengan teknik ini, bila di kemudian hari kita membuat implementasi dengan Hibernate atau Spring Data JPA,
kita tidak perlu lagi copy-paste test class, cukup buat subclass yang menyediakan kedua object tersebut.</p>

<p>Berikut adalah subclassnya</p>

<h2>Implementasi Test Business Service</h2>

<p>Karena hanya beberapa baris dan tidak butuh banyak penjelasan, kita tampilkan di sini full source code, bukan hanya kerangkanya saja.</p>

<h3>ProdukServiceSpringJdbcTest</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">springjdbc</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// import generate dari IDE</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="s">&quot;classpath*:com/muhardin/**/spring-jdbc-ctx.xml&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProdukServiceSpringJdbcTest</span> <span class="kd">extends</span> <span class="n">ProdukServiceTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">PenjualanService</span> <span class="n">penjualanService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">PenjualanService</span> <span class="nf">getPenjualanService</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">penjualanService</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">DataSource</span> <span class="nf">getDataSource</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">dataSource</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>PenjualanServiceSpringJdbcTest</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">muhardin</span><span class="o">.</span><span class="na">endy</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">aksesdb</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">springjdbc</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// import generate dari IDE</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="s">&quot;classpath*:com/muhardin/**/spring-jdbc-ctx.xml&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PenjualanServiceSpringJdbcTest</span> <span class="kd">extends</span> <span class="n">PenjualanServiceTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">PenjualanService</span> <span class="n">penjualanService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">PenjualanService</span> <span class="nf">getPenjualanService</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">penjualanService</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">DataSource</span> <span class="nf">getDataSource</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">dataSource</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Seperti kita lihat di atas, <code>dataSource</code> dan <code>penjualanService</code> disediakan melalui Dependency Injection.</p>

<p>Cara kerjanya sebagai berikut:</p>

<ol>
<li>Kita jalankan JUnit melalui IDE atau Maven. IDE atau Maven akan membaca semua file dalam folder <code>src/test/java</code> dan memproses semua class yang namanya berakhiran <code>Test</code> seperti <code>PenjualanServiceSpringJdbcTest</code>. IDE/Maven juga memproses <code>PenjualanServiceTest</code>, tapi karena classnya abstract maka tidak diproses lebih lanjut.</li>
<li>JUnit melihat annotation <code>@RunWith</code>, jadi dia tidak menjalankan sendiri melainkan menyuruh <code>SpringJUnit4ClassRunner</code> untuk menjalankan test</li>
<li><code>SpringJUnit4ClassRunner</code> membaca annotation <code>@ContextConfiguration</code>, lalu menggunakan nilai di dalamnya untuk melakukan inisialisasi <code>ApplicationContext</code>, kemudian mengisi variabel yang ditandai dengan <code>@Autowired</code></li>
<li>Karena <code>PenjualanServiceSpringJdbcTest</code> merupakan subclass dari <code>PenjualanServiceTest</code>, maka dia akan mewarisi semua method <code>@Test</code> yang dimiliki <code>PenjualanServiceTest</code>. Method <code>@Test</code> ini akan dijalankan oleh IDE/Maven.</li>
<li>Pada waktu method <code>@Test</code> dijalankan, bila perlu object <code>PenjualanService</code>, maka akan didapat dengan cara memanggil method <code>getPenjualanService</code>. Karena methodnya sudah dibuatkan implementasinya (tidak abstract lagi) dan sudah ada isinya, maka method <code>@Test</code> dapat bekerja dengan baik.</li>
</ol>


<p>Demikianlah bagian kedua dari tutorial mengakses database menggunakan Spring JDBC. Pada bagian ini kita sudah melihat bagaimana cara pengaturan file/folder dan interaksi antar class/method. Di bagian selanjutnya kita akan lihat <a href="http://software.endy.muhardin.com/java/insert-update-delete-dengan-spring-jdbc/">bagaimana cara menjalankan perintah SQL</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Konfigurasi Koneksi Database dengan Spring]]></title>
    <link href="http://software.endy.muhardin.com/java/konfigurasi-koneksi-database-dengan-spring/"/>
    <updated>2013-05-27T17:02:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/konfigurasi-koneksi-database-dengan-spring</id>
    <content type="html"><![CDATA[<p>Di Java, ada banyak cara untuk mengakses database, diantaranya:</p>

<ul>
<li><a href="http://docs.oracle.com/javase/tutorial/jdbc/">JDBC polos tanpa framework apapun</a></li>
<li><a href="http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/jdbc.html">JDBC dengan Spring (Spring JDBC)</a></li>
<li>JDBC dengan <a href="http://blog.mybatis.org/">iBatis/MyBatis</a></li>
<li><a href="http://docs.jboss.org/hibernate/orm/4.2/manual/en-US/html/">Hibernate</a></li>
<li><a href="http://www.datanucleus.org/products/datanucleus/jdo/guides/tutorial_rdbms.html">JDO</a></li>
<li><a href="http://docs.oracle.com/javaee/6/tutorial/doc/bnbpz.html">JPA</a></li>
<li><a href="http://www.springsource.org/spring-data/jpa">Spring Data JPA</a></li>
</ul>


<p>Masing-masing memiliki kelebihan dan kekurangan masing-masing yang tidak akan kita bahas di artikel ini.
Kali ini kita hanya akan membahas metode Spring JDBC dan perbandingannya dengan JDBC murni.</p>

<p>Artikel ini merupakan bagian pertama dari rangkaian artikel Spring JDBC, yaitu</p>

<ol>
<li><a href="http://software.endy.muhardin.com/java/konfigurasi-koneksi-database-dengan-spring/">Konfigurasi koneksi database</a></li>
<li><a href="http://software.endy.muhardin.com/java/struktur-aplikasi-java-dengan-spring-dan-maven/">Struktur Aplikasi</a></li>
<li><a href="http://software.endy.muhardin.com/java/insert-update-delete-dengan-spring-jdbc/">Insert, update, dan delete data</a></li>
<li><a href="http://software.endy.muhardin.com/java/query-dengan-spring-jdbc/">Query data</a></li>
<li><a href="http://software.endy.muhardin.com/java/mengetes-akses-database/">Mengetes Akses Database</a></li>
</ol>


<p>Keseluruhan kode program dapat dilihat di <a href="https://github.com/endymuhardin/belajar-akses-database-java">repository belajar-akses-database-java di Github saya</a>, khususnya <a href="https://github.com/endymuhardin/belajar-akses-database-java/tree/spring-jdbc">branch spring-jdbc</a>.</p>

<!--more-->


<h2>Perbandingan JDBC polos dan Spring JDBC</h2>

<p>Menggunakan JDBC polos tanpa library memang mudah, karena tidak perlu pusing mempelajari library lain. Tapi ada beberapa keterbatasan dan kesulitan, diantaranya:</p>

<ul>
<li>semua method throws Exception, sehingga kode program kita menjadi kotor dengan try-catch</li>
<li>tidak ada manajemen koneksi database, kita harus buka-tutup sendiri</li>
<li>tidak ada declarative transaction, kita harus secara manual melakukan begin-commit/rollback</li>
</ul>


<p>Dengan berbagai keterbatasan tersebut, ada baiknya kita menggunakan bantuan Spring Framework, yaitu modul <code>spring-jdbc</code> untuk memudahkan berbagai kegiatan di atas. Tentunya masih banyak hal yang harus kita lakukan sendiri, tidak seperti penggunaan library Object Relational Mapping (ORM) seperti Hibernate atau JPA, di antaranya:</p>

<ul>
<li>mapping dari result set menjadi Java object</li>
<li>mapping dari Java object menjadi isi parameter PreparedStatement</li>
<li>cache</li>
<li>cascading operation</li>
<li>generate primary key secara otomatis</li>
<li>dsb</li>
</ul>


<p>Ada beberapa tahapan dalam menggunakan Spring JDBC, yaitu :</p>

<ol>
<li>Konfigurasi Koneksi Database</li>
<li>Membuat class Data Access Object (DAO)</li>
<li>Membuat class implementasi business process/service</li>
<li>Membuat test otomatis menggunakan JUnit</li>
</ol>


<h1>Studi Kasus</h1>

<p>Agar lebih konkrit, kita akan menggunakan skema database yang umum digunakan di aplikasi bisnis,
yaitu memiliki tabel :</p>

<ul>
<li>Master Data / Referensi</li>
<li>Header Transaksi</li>
<li>Detail Transaksi</li>
</ul>


<p>Berikut adalah skema database yang akan kita gunakan:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">create</span> <span class="k">table</span> <span class="n">m_produk</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">id</span> <span class="nb">int</span> <span class="k">primary</span> <span class="k">key</span> <span class="n">auto_increment</span><span class="p">,</span>
</span><span class='line'>    <span class="n">kode</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>    <span class="n">nama</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>    <span class="n">harga</span> <span class="nb">decimal</span><span class="p">(</span><span class="mi">19</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span>
</span><span class='line'><span class="p">)</span> <span class="n">engine</span><span class="o">=</span><span class="n">InnoDB</span> <span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">create</span> <span class="k">table</span> <span class="n">t_penjualan</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">id</span> <span class="nb">int</span> <span class="k">primary</span> <span class="k">key</span> <span class="n">auto_increment</span><span class="p">,</span>
</span><span class='line'>    <span class="n">waktu_transaksi</span> <span class="n">datetime</span> <span class="k">not</span> <span class="k">null</span>
</span><span class='line'><span class="p">)</span> <span class="n">engine</span><span class="o">=</span><span class="n">InnoDB</span> <span class="n">AUTO_INCREMENT</span><span class="o">=</span><span class="mi">100</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">create</span> <span class="k">table</span> <span class="n">t_penjualan_detail</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">id</span> <span class="nb">int</span> <span class="k">primary</span> <span class="k">key</span> <span class="n">auto_increment</span><span class="p">,</span>
</span><span class='line'>    <span class="n">id_penjualan</span> <span class="nb">int</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>    <span class="n">id_produk</span> <span class="nb">int</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>    <span class="n">harga</span> <span class="nb">decimal</span><span class="p">(</span><span class="mi">19</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>    <span class="n">jumlah</span> <span class="nb">int</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>    <span class="k">foreign</span> <span class="k">key</span><span class="p">(</span><span class="n">id_penjualan</span><span class="p">)</span> <span class="k">references</span> <span class="n">t_penjualan</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="k">on</span> <span class="k">delete</span> <span class="k">cascade</span><span class="p">,</span>
</span><span class='line'>    <span class="k">foreign</span> <span class="k">key</span><span class="p">(</span><span class="n">id_produk</span><span class="p">)</span> <span class="k">references</span> <span class="n">m_produk</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="k">on</span> <span class="k">delete</span> <span class="k">restrict</span>
</span><span class='line'><span class="p">)</span> <span class="n">engine</span><span class="o">=</span><span class="n">InnoDB</span> <span class="n">AUTO_INCREMENT</span><span class="o">=</span><span class="mi">100</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Untuk keperluan test, jangan lupa kita sertakan beberapa baris data.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">insert</span> <span class="k">into</span> <span class="n">m_produk</span> <span class="p">(</span><span class="n">id</span><span class="p">,</span><span class="n">kode</span><span class="p">,</span><span class="n">nama</span><span class="p">,</span><span class="n">harga</span><span class="p">)</span> <span class="k">values</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;K-001&#39;</span><span class="p">,</span> <span class="s1">&#39;Keyboard USB&#39;</span><span class="p">,</span> <span class="mi">150000</span><span class="p">),</span>
</span><span class='line'><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;M-001&#39;</span><span class="p">,</span> <span class="s1">&#39;Mouse USB&#39;</span><span class="p">,</span> <span class="mi">50000</span><span class="p">),</span>
</span><span class='line'><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;L-001&#39;</span><span class="p">,</span> <span class="s1">&#39;Laptop&#39;</span><span class="p">,</span> <span class="mi">10000000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">insert</span> <span class="k">into</span> <span class="n">t_penjualan</span> <span class="p">(</span><span class="n">id</span><span class="p">,</span><span class="n">waktu_transaksi</span><span class="p">)</span> <span class="k">values</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="s1">&#39;2013-01-01 20:30:30&#39;</span><span class="p">),</span>
</span><span class='line'><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="s1">&#39;2013-01-02 15:15:15&#39;</span><span class="p">),</span>
</span><span class='line'><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="s1">&#39;2013-02-02 09:09:09&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">insert</span> <span class="k">into</span> <span class="n">t_penjualan_detail</span> <span class="p">(</span><span class="n">id</span><span class="p">,</span><span class="n">id_penjualan</span><span class="p">,</span> <span class="n">id_produk</span><span class="p">,</span> <span class="n">harga</span><span class="p">,</span> <span class="n">jumlah</span><span class="p">)</span> <span class="k">values</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">150000</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span>
</span><span class='line'><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">50000</span><span class="p">,</span><span class="mi">5</span><span class="p">),</span>
</span><span class='line'><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">150000</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span>
</span><span class='line'><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">50000</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span>
</span><span class='line'><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">10000000</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tabel dan data di atas kita masukkan ke database dengan rincian sebagai berikut:</p>

<ul>
<li>Jenis Database : MySQL</li>
<li>Server Database : localhost</li>
<li>Nama Database : belajar</li>
<li>Username Database : root</li>
<li>Password Database : admin</li>
</ul>


<p>Selanjutnya kita akan mengkonfigurasi Spring supaya bisa terkoneksi dengan database tersebut.</p>

<h1>Konfigurasi Koneksi Database</h1>

<h2>Dependensi</h2>

<p>Kita membutuhkan beberapa library, dinyatakan dalam dependensi Maven sebagai berikut:</p>

<h3>Driver database MySQL</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>${mysql.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;scope&gt;</span>runtime<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Library manajemen koneksi database (database connection pooling)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>commons-dbcp<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>commons-dbcp<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>${commons-dbcp.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Spring JDBC</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>${org.springframework.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>spring-jdbc<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>${org.springframework.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>spring-test<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>${org.springframework.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Selanjutnya, kita membuat konfigurasi database untuk Spring. Kita beri nama saja file konfigurasinya <code>spring-jdbc-ctx.xml</code>
dan kita letakkan di folder <code>src/main/resources</code>. File ini berisi :</p>

<ul>
<li>konfigurasi data source untuk koneksi ke database. Kita menggunakan pustaka <code>commons-dbcp</code> untuk menangani connection pooling ke database.</li>
<li>transaction manager. Ini dibutuhkan supaya kita tidak perlu lagi membuat coding untuk rangkaian <code>begin-commit/rollback</code>.</li>
<li>component scan. Ini dibutuhkan agar object DAO dan Service kita otomatis dideteksi dan diinisialisasi oleh Spring</li>
</ul>


<h2>Koneksi Database</h2>

<p>Berikut konfigurasi koneksi database</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">class=</span><span class="s">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;driverClassName&quot;</span> <span class="na">value=</span><span class="s">&quot;com.mysql.jdbc.Driver&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;url&quot;</span> <span class="na">value=</span><span class="s">&quot;jdbc:mysql://localhost/belajar&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;username&quot;</span> <span class="na">value=</span><span class="s">&quot;root&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span> <span class="na">value=</span><span class="s">&quot;admin&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxActive&quot;</span> <span class="na">value=</span><span class="s">&quot;80&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxWait&quot;</span> <span class="na">value=</span><span class="s">&quot;40000&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxIdle&quot;</span> <span class="na">value=</span><span class="s">&quot;20&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Penjelasannya sebagai berikut:</p>

<h3>Database Connection Pooling</h3>

<p>Koneksi ke database sebetulnya merupakan operasi yang <em>mahal</em>. Kenapa <em>mahal</em>?
Karena setiap kali kita membuat koneksi, ada serangkaian kegiatan yang harus dilakukan oleh database server seperti:</p>

<ul>
<li>memeriksa username dan password</li>
<li>memeriksa apakah komputer kita (dilihat dari alamat IP atau nama host) diijinkan untuk masuk</li>
<li>memeriksa apakah database, tabel, dan tindakan yang kita lakukan memiliki ijin akses yang mencukupi</li>
</ul>


<p>Oleh karena itu, idealnya koneksi database dibuat sekali saja dan digunakan terus sepanjang aplikasi berjalan.
Tentunya kalau koneksi database hanya satu, setiap request dari user akan mengantri.
Untuk itu kita buat banyak koneksi sekaligus yang nantinya akan <em>dipinjamkan</em> pada request yang membutuhkan.
Teknik ini disebut dengan istilah database connection pooling.</p>

<p>Library yang kita gunakan untuk itu adalah <a href="http://commons.apache.org/proper/commons-dbcp/configuration.html">Apache Commons DBCP</a>, yang ditandai dengan penggunaan class <code>org.apache.commons.dbcp.BasicDataSource</code> di atas.</p>

<p>Ada banyak hal yang bisa disetting, tapi kita akan fokus ke beberapa saja yaitu:</p>

<ul>
<li><code>driverClassName</code> : nama class untuk koneksi ke database. Ini harus sesuai dengan merek dan versi database yang digunakan</li>
<li><code>url</code> : informasi koneksi database. Biasanya berisi alamat server (IP atau Hostname) dan nama database</li>
<li><code>username</code> : username untuk connect ke database</li>
<li><code>password</code> : passwordnya user tersebut</li>
</ul>


<p>Keempat informasi di atas adalah informasi umum yang kita butuhkan apapun metode koneksi database yang kita gunakan, tidak terkait dengan penggunaan Apache Commons DBCP. Konfigurasi berikut barulah berkaitan dengan Apache Commons DBCP:</p>

<ul>
<li><p><code>maxActive</code> : jumlah koneksi yang boleh aktif secara berbarengan. Ini harus disetting dibawah angka yang kita ijinkan di database server. Misalnya di MySQL kita ijinkan 100 koneksi berbarengan, maka angkanya harus dibawah 100. Jangan juga dihabiskan 100, untuk berjaga-jaga siapa tahu kita butuh koneksi langsung ke MySQL tanpa lewat aplikasi (misalnya untuk keperluan debug). Pertimbangkan juga apabila ada aplikasi lain yang menggunakan database yang sama.</p></li>
<li><p><code>maxIdle</code> : ada kalanya aplikasi kita sedang sepi dari request user sehingga banyak koneksi database yang menganggur (idle). Angka <code>maxIdle</code> ini menentukan berapa koneksi yang akan tetap dipegang walaupun idle. Bila ada 20 koneksi idle, padahal <code>maxIdle</code> berisi 15, maka 5 koneksi akan ditutup. Ini merupakan trade-off. Bila terlalu banyak idle, maka memori database server akan terpakai untuk koneksi yang standby ini. Tapi bila terlalu sedikit, pada waktu aplikasi mendadak diserbu user, akan butuh waktu lama untuk dia membuatkan lagi koneksi baru.</p></li>
<li><p><code>maxWait</code> : bila semua koneksi sebanyak <code>maxActive</code> sedang terpakai semua, request berikutnya akan menunggu salah satu selesai menggunakan koneksi. Nilai <code>maxWait</code> menentukan berapa milidetik request tersebut menunggu. Bila lebih dari <code>maxWait</code> dan belum juga kebagian koneksi, maka request tersebut akan mendapatkan <code>Exception</code>. Konfigurasi ini perlu diperhatikan karena nilai defaultnya adalah <code>indefinitely</code> yaitu menunggu selamanya.</p></li>
</ul>


<p>Saya pernah mendapatkan masalah karena setting default ini. Aplikasi bengong seolah hang. Dicek ke log file tidak ada error. Ternyata masalahnya ada query yang kurang optimal sehingga memakan waktu lama. Pada saat banyak request yang menjalankan query tersebut, request lain menunggu lama tanpa ada pemberitahuan, sehingga terkesan hang. Setelah nilai <code>maxWait</code> saya ganti menjadi 30 detik, mulai banyak error message bermunculan dari request yang menunggu > 30 detik. Dengan adanya error message, query bermasalah tersebut menjadi terlihat sehingga bisa diperbaiki.</p>

<blockquote><p>Pesan moral pertama : pesan error itu penting untuk mengetahui sumber masalah. Dalam bugfixing, yang paling penting adalah menemukan masalah. Kalau masalah sudah ditemukan, siapa saja bisa memperbaiki. Jadi kalau aplikasi kita bermasalah, prioritas pertama kita adalah membuat dia mengeluarkan pesan error yang jelas.</p></blockquote>


<p>Baca <a href="http://software.endy.muhardin.com/java/tips-melaporkan-error/">artikel ini</a> untuk mengetahui apa yang dimaksud dengan pesan error yang jelas.</p>

<blockquote><p>Pesan moral kedua : Dalam bugfixing, sering kali kita tidak langsung mendapatkan masalah utama. Pada kasus di atas, pertama kali saya menemukan bahwa perilaku defaultnya Commons DBCP adalah menunggu koneksi dengan sabar sampai selamanya. Setelah ini diubah, barulah saya menemukan masalah utama, yaitu ada query yang tidak optimal.</p></blockquote>


<h2>Transaction Manager</h2>

<p>Setelah terhubung ke database, selanjutnya kita akan mengkonfigurasi transaction manager. Ini adalah fitur dari Spring Framework yang membebaskan kita dari coding manual untuk urusan transaction. Bila tidak menggunakan ini, maka kode program kita akan tampak seperti ini:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">){</span>
</span><span class='line'>    <span class="n">Connection</span> <span class="n">conn</span><span class="o">;</span> <span class="c1">// inisialisasi koneksi di sini</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">conn</span><span class="o">.</span><span class="na">setAutocommit</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&quot;insert into m_produk ... &quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="n">conn</span><span class="o">.</span><span class="na">createStatement</span><span class="o">().</span><span class="na">executeUpdate</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">conn</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">err</span><span class="o">){</span>
</span><span class='line'>        <span class="n">conn</span><span class="o">.</span><span class="na">rollback</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">conn</span><span class="o">.</span><span class="na">setAutocommit</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="n">conn</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Untuk dua baris perintah seperti di atas, kita harus menambahkan 8 baris hanya untuk mengurus transaction <strong>pada setiap method</strong>. Bayangkan kalau aplikasi kita punya 100 method, maka kode program untuk mengelola transaksi saja sudah 800 baris. Dengan fitur transaction manager, maka method di atas bisa ditulis ulang seperti ini:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Transactional</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpan</span><span class="o">(</span><span class="n">Produk</span> <span class="n">p</span><span class="o">){</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">&quot;insert into m_produk ... &quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="na">createStatement</span><span class="o">().</span><span class="na">executeUpdate</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Jauh lebih bersih dan rapi. Kode program jadi mudah dibaca dan akibatnya tentu memudahkan kita pada waktu bugfix, perubahan, ataupun penambahan fitur.</p>

<p>Nah ini dia konfigurasi transaction manager:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;transactionManager&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">ref=</span><span class="s">&quot;dataSource&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;tx:annotation-driven/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Class transaction manager yang digunakan berbeda tergantung metode akses database yang digunakan dan juga bagaimana cara kita mendeploy aplikasi. Beberapa pilihan transaction manager yang lain antara lain:</p>

<ul>
<li><code>DataSourceTransactionManager</code> : digunakan untuk koneksi database menggunakan <code>javax.sql.DataSource</code>. Ini artinya koneksi langsung dari aplikasi ke database server.</li>
<li><code>JtaTransactionManager</code> : digunakan bila aplikasi kita dideploy di application server yang memiliki transaction manager sendiri (seperti Glassfish, JBoss, Websphere, Weblogic, dsb) <em>dan menggunakan</em> transaction manager yang disediakan tersebut. Bila kita deploy di Tomcat, hampir pasti kita tidak menggunakan JTA. Bila kita deploy ke Glassfish dan menggunakan konfigurasi <code>dataSource</code> Apache Commons DBCP, berarti kita juga tidak menggunakan JTA.</li>
<li><code>HibernateTransactionManager</code> : seperti ditunjukkan oleh namanya, gunakan ini bila kita menggunakan Hibernate</li>
<li><code>JpaTransactionManager</code> : ini juga sudah jelas dari namanya. Bila kita pakai JPA, gunakan transaction manager ini.</li>
</ul>


<p>Demikian tutorial cara konfigurasi koneksi database. Pada bagian selanjutnya, kita akan <a href="http://software.endy.muhardin.com/java/struktur-aplikasi-java-dengan-spring-dan-maven/">menyiapkan kerangka aplikasinya dulu</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mendebug Aplikasi AJAX]]></title>
    <link href="http://software.endy.muhardin.com/java/mendebug-aplikasi-ajax/"/>
    <updated>2013-05-22T16:46:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/mendebug-aplikasi-ajax</id>
    <content type="html"><![CDATA[<p>Di jaman modern ini, penggunaan AJAX sudah sangat mendunia, sehingga jarang sekali kita temui aplikasi yang tidak menggunakan AJAX. Demikian juga dengan template aplikasi standar yang digunakan di ArtiVisi, yaitu <a href="https://github.com/endymuhardin/belajar-restful">Belajar RESTful</a>.</p>

<p>Bagi yang baru mendengar atau sering dengar tapi belum paham, berikut penjelasan singkat mengenai AJAX.</p>

<ul>
<li>AJAX adalah salah satu teknik pemrograman web</li>
<li>AJAX bukanlah nama library atau framework, dia adalah cara membuat aplikasi</li>
<li><p>Pada aplikasi non-AJAX, siklusnya sebagai berikut :</p>

<ol>
<li>Ketik URL</li>
<li>Tampil HTML</li>
<li>Lakukan sesuatu (isi form + tekan submit)</li>
<li>Browser mengirim data</li>
<li>Server mengembalikan HTML full satu halaman</li>
</ol>
</li>
<li><p>Pada aplikasi AJAX, request ke server dilakukan oleh javascript, bukan oleh form submit.</p></li>
<li>Response dari server biasanya hanya berupa data dalam format XML atau JSON, bukan data + tampilan seperti HTML</li>
<li>Data yang dikirim server digunakan javascript hanya untuk mengubah sebagian halaman tampilan, bukan seluruh halaman seperti aplikasi non-AJAX.</li>
</ul>


<p>Karena perbedaan cara kerja aplikasi AJAX, maka cara debug errornya juga berbeda. Untuk mendebug aplikasi AJAX, kita perlu melengkapi browser yang kita gunakan supaya bisa memantau request dan response yang dilakukan aplikasi.</p>

<p>Pada artikel ini, kita akan membahas bagaimana cara mendebug aplikasi AJAX. Sebagai contoh kasus, kita akan gunakan aplikasi <a href="https://github.com/endymuhardin/belajar-restful">Belajar RESTful</a>.</p>

<!--more-->


<h2>Studi Kasus</h2>

<p>Sebagai contoh, kita akan mendebug form entri user berikut</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/01-screen-form-user.png" title="Form Entri User" ></p>

<p>dan tampilan daftar user berikut</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/02-screen-list-user.png" title="Daftar User" ></p>

<h2>Persenjataan</h2>

<p>Agar bisa mendebug aplikasi AJAX, browser kita harus bisa menampilkan lalu lintas request dan response. Bila menggunakan Firefox, instal plugin <a href="https://addons.mozilla.org/en-US/firefox/addon/firebug/">Firebug</a>. Bila menggunakan Chrome, kemampuan ini sudah ada di menu Tools > Developer Tools sehingga kita tidak perlu menginstal apa-apa.</p>

<p>Setelah terinstal, pantau tab Network untuk melihat detail request dan response.</p>

<p>Berikut contohnya di Firebug</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/03-network-tab-firebug.png" title="Network Tab Firebug" ></p>

<p>Dan ini tampilannya di Chrome Developer Tools</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/04-network-tab-chrome.png" title="Network Tab Chrome Developer Tools" ></p>

<p>Seiring waktu, tab ini bisa penuh, kita bisa bersihkan menggunakan tombol Clear.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/05-clear-log.png" title="Tombol Clear" ></p>

<p>Beberapa aplikasi AJAX yang mengikuti kaidah REST mengirim data ke server dalam format JSON dengan HTTP method yang sesuai fungsi seperti GET, POST, PUT, DELETE. Seringkali kita juga perlu memanipulasi HTTP request header dan melihat isi HTTP response header. Untuk itu, kita perlu menambah plugin lagi di browser.</p>

<p>Silahkan install <a href="https://addons.mozilla.org/En-us/firefox/addon/poster/">Poster</a> untuk Firefox, atau <a href="https://chrome.google.com/webstore/detail/rest-console/cokgbflfommojglbmbpenpphppikmonn?hl=en">Rest Console</a> untuk Chrome.</p>

<h2>Mendebug Form Submit</h2>

<p>Di aplikasi Belajar RESTful, ketika kita mengisi form dan menekan tombol Simpan, prosesnya agak berbeda dengan aplikasi web tradisional.
Pada aplikasi ini, semua form data dikumpulkan dan dikonversi menjadi format JSON, dan kemudian dikirim dalam HTTP request body. Ini dilakukan menggunakan Javascript.</p>

<p>Di aplikasi web tradisional, data form ini disubmit dalam format HTTP request parameter dan tidak melibatkan Javascript sama sekali.</p>

<p>Karena ada proses konversi menjadi JSON ini, selama proses development kita ingin melihat dan memeriksa apakah nama variabel dan datanya sudah benar. Untuk itu kita bisa menggunakan Chrome Developer Tools, seperti bisa dilihat di screenshot berikut.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/06-debug-siklus-cdt.png" title="Debug Request di Chrome Developer Tools" ></p>

<p>Screen debug di Firebug bentuknya seperti ini</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/09-debug-siklus-firebug.png" title="Debug Request di Firebug" ></p>

<p>Hal-hal yang perlu kita amati adalah :</p>

<ul>
<li><p>Request</p>

<ul>
<li>Request Method : GET, POST, PUT, atau DELETE</li>
<li>Request Header, terutama Accept dan Content-Type</li>
<li>Request Parameter</li>
<li>Data yang dikirim (bila ada)</li>
</ul>
</li>
<li><p>Response</p>

<ul>
<li>Response Status : Sukses (200, 201, 204) atau Gagal (4xx atau 5xx)</li>
<li>Response Header, terutama Content-Type dan Location</li>
<li>Response Data (bila ada)</li>
</ul>
</li>
</ul>


<p>Berikut adalah data-data tersebut di Chrome Developer Tools</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/07-detail-request-cdt.png" title="Detail Request Chrome Developer Tools" ></p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/08-detail-response-cdt.png" title="Detail Response Chrome Developer Tools" ></p>

<p>Di Firebug, header dan data dipisahkan</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/10-detail-request-firebug.png" title="Tab Header" ></p>

<p>Request data ditampilkan di tab terpisah</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/11-detail-post-data-firebug.png" title="Tab Request Data" ></p>

<p>Pada waktu membaca data response, kita bisa melihat data aslinya</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/12-detail-response-firebug.png" title="Detail Response Firebug" ></p>

<p>dan bisa juga melihat yang sudah diformat dengan rapi</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/13-detail-json-firebug.png" title="Detail JSON Firebug" ></p>

<h2>Mendebug REST Server</h2>

<p>Pada waktu kita mengisi form dan menekan tombol Submit, client mengirim HTTP request dan data berbentuk JSON. Kemudian server memproses data yang diterima dan mengirim kembalian berupa JSON juga. Agar development lebih mudah, kita ingin melakukan request dan melihat response secara langsung, tanpa direpotkan dengan tampilan HTML dan coding Javascript. Kita bisa menggunakan plugin browser untuk melakukan hal ini.</p>

<p>Beberapa hal yang harus kita ketahui untuk mengetes proses di sisi server adalah:</p>

<ul>
<li>URL</li>
<li>HTTP Method</li>
<li>Tipe data yang dikirim</li>
<li>Data yang akan dikirim</li>
</ul>


<h3>Menggunakan Chrome</h3>

<p>Berikut adalah tampilan plugin Chrome, yaitu REST Console yang sudah terisi data di atas.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/14-request-form-rest-console.png" title="Request Form REST Console" ></p>

<p>Selanjutnya kita tinggal menekan tombol yang sesuai dengan HTTP Method yang dibutuhkan. Bila sukses, kita akan mendapatkan tampilan seperti ini</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/15-response-sukses-rest-console.png" title="Response Sukses REST Console" ></p>

<p>Bila gagal, kita akan melihat tampilan seperti ini</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/16-response-error-rest-console.png" title="Response Gagal REST Console" ></p>

<h3>Menggunakan Firefox</h3>

<p>Hal yang sama bisa dilakukan dengan Poster di Firefox. Berikut adalah form yang digunakan untuk entri data.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/17-request-form-poster.png" title="Request Form Poster" ></p>

<p>Bila sukses, kita mendapatkan hasil seperti ini</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/18-response-sukses-poster.png" title="Response Sukses Poster" ></p>

<p>Bila gagal berikut tampilannya</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/05/debug-ajax/19-response-error-poster.png" title="Response Gagal Poster" ></p>

<p>Dengan menggunakan REST Console dan Poster, kita dapat mengurus coding di sisi server tanpa perlu dipusingkan dengan coding di sisi client (HTML, CSS, dan JS).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrasi Aplikasi]]></title>
    <link href="http://software.endy.muhardin.com/java/integrasi-aplikasi/"/>
    <updated>2013-05-20T21:20:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/integrasi-aplikasi</id>
    <content type="html"><![CDATA[<p>Aplikasi jaman sekarang jarang sekali yang berdiri sendiri.
Umumnya aplikasi yang kita buat harus terhubung dengan aplikasi yang dibuat orang lain.
Beberapa contohnya:</p>

<ul>
<li>kita membuat aplikasi mobile, terhubung ke social network seperti Facebook dan Twitter</li>
<li>kita membuat aplikasi bisnis, harus terhubung ke aplikasi akunting yang sudah lebih dulu ada</li>
<li>kita membuat aplikasi pembayaran tagihan, harus terhubung ke penyedia tagihan seperti PLN, Telkom, dsb</li>
</ul>


<p>Pada artikel ini, kita akan membahas beberapa strategi untuk menghubungkan aplikasi yang kita buat dengan aplikasi lain.</p>

<!--more-->


<p>Secara umum, ada empat strategi untuk menghubungkan aplikasi satu dengan lainnya:</p>

<ul>
<li>pemanggilan prosedur/function</li>
<li>messaging</li>
<li>sharing database</li>
<li>kirim/terima file</li>
</ul>


<p>Mari kita bahas satu persatu.</p>

<h2>Pemanggilan prosedur</h2>

<p>Pada metode ini, aplikasi yang akan melayani (kita sebut aplikasi server),
harus menyediakan mekanisme agar bisa dipanggil aplikasi lain (kita sebut aplikasi client).</p>

<p>Ada beberapa protokol yang populer digunakan dalam strategi ini, misalnya:</p>

<ul>
<li>SOAP</li>
<li>REST</li>
<li>ISO-8583</li>
<li>XMLRPC</li>
</ul>


<p>Ciri utama dalam strategi ini adalah:</p>

<ul>
<li>ada kesepakatan nama method yang akan dipanggil</li>
<li>ada kesepakatan jumlah dan tipe data yang dikirim dan diterima</li>
<li>client dan server harus online dalam waktu yang berbarengan.</li>
<li>setelah client memanggil server, dia akan menunggu sampai ada balasan dari server. Sebelum terima balasan, client tidak bisa melanjutkan. Fenomena ini dikenal dengan istilah synchronous invocation.</li>
</ul>


<p>Berikut beberapa contoh implementasi dari strategi ini:</p>

<ul>
<li><a href="http://software.endy.muhardin.com/java/remoting-dengan-spring/">Remoting dengan Spring Framework</a></li>
<li><a href="http://martinusadyh.web.id/tulisanku/berkenalan-dengan-iso-8583-menggunakan-java/">Transaksi Finansial dengan ISO-8583</a></li>
</ul>


<h2>Messaging</h2>

<p>Konsep messaging sebetulnya sudah tidak asing lagi bagi kita. Sering kita gunakan sehari-hari dalam bentuk email, chatting, sms, dan sejenisnya.</p>

<p>Beberapa ciri dari messaging antara lain:</p>

<ul>
<li>pengirim dan penerima tidak harus online berbarengan. Bisa saja pengirim mengirim pesan pada saat penerima offline, setelah itu pengirim juga offline. Pada waktu penerima online, dia akan menerima pesan yang ditujukan kepadanya pada waktu dia sedang offline.</li>
<li>ada satu pihak yang berfungsi sebagai penyimpan message. Dalam dunia messaging, pihak ini disebut sebagai message broker.</li>
<li>karena sifatnya yang memungkinkan tidak online barengan, maka biasanya ada mekanisme status delivery</li>
<li>biasanya ada juga masa kadaluarsa message di dalam database broker. Sebagai contoh, bila handphone kita mati lebih dari tiga hari, maka sms yang ditujukan ke handphone tersebut dan belum sampai di handphone kita akan dihapus oleh operator telekomunikasi.</li>
<li>tidak ada aturan mengenai format dan tipe data. Pengirim bebas mengirim apa saja. Penerima yang harus melakukan validasi terhadap format message</li>
<li>tidak ada mekanisme notifikasi ketika ada message baru. Penerima harus secara periodik mengecek (polling) ke broker untuk mengetahui ada-tidaknya message baru</li>
</ul>


<p>Dalam Java, ada beberapa pilihan untuk implementasi strategi messaging, diantaranya:</p>

<ul>
<li><a href="http://software.endy.muhardin.com/java/integrasi-pusat-cabang-2/">melalui email</a></li>
<li><a href="http://www.playsms.org/">melalui sms</a></li>
<li><a href="http://software.endy.muhardin.com/java/intro-jms/">menggunakan protokol JMS</a></li>
<li>menggunakan protokol AMQP</li>
</ul>


<h2>Sharing Database</h2>

<p>Pada strategi ini, pengirim dan penerima menggunakan database sebagai media pertukaran data. Pengirim menaruh datanya ke suatu tabel di database untuk kemudian dibaca oleh penerima.</p>

<p>Karena menggunakan database, maka mekanisme ini memiliki beberapa ciri khusus interaksi dengan database, yaitu:</p>

<ul>
<li>transaction. Pengirim bisa memastikan datanya terkirim secara utuh. Bila terjadi error di tengah pengiriman data, maka data yang sudah terlanjur ditulis bisa dibatalkan</li>
<li>tipe data bisa di-enforce. Kita bisa menggunakan tipe data angka, text, dan tanggal. Bila pengirim salah memasukkan data, maka database server akan menolaknya.</li>
</ul>


<p>Mirip dengan messaging, tidak ada mekanisme notifikasi ketika ada data baru yang ditaruh pengirim. Penerima harus secara periodik mengecek (polling) ke database untuk mengetahui ada-tidaknya data baru. Untuk memudahkan polling, biasanya tiap data diberikan kolom status untuk membedakan mana data yang sudah diproses dan mana yang belum.</p>

<p>Bila kita menggunakan Spring Integration, kita bisa langsung menggunakan <a href="http://static.springsource.org/spring-integration/reference/htmlsingle/#jdbc">implementasi yang tersedia</a> sehingga tidak perlu lagi membuatkan mekanisme pengecekan data baru. <a href="https://github.com/SpringSource/spring-integration-samples/tree/master/basic/jdbc">Contoh pemakaian juga sudah disediakan</a>, tinggal diikuti.</p>

<h2>File Transfer</h2>

<p>Sama seperti messaging, dengan strategi ini pengirim dan penerima tidak harus online berbarengan. Yang membedakannya dengan messaging adalah pada mekanisme ini biasanya format file dan struktur data di dalamnya sudah ditentukan. Demikian juga dengan lokasi penyimpanan file dan aturan penamaannya.</p>

<p>Berbeda dengan sharing database, mekanisme file transfer tidak memiliki mekanisme untuk memastikan data sampai dengan utuh. Kita sendiri yang harus memastikan keutuhan data, misalnya dengan mengirim file checksum bersama dengan file berisi data. File checksum ini bisa digunakan untuk memastikan file data terkirim secara utuh.</p>

<p>Pada mekanisme ini kita juga tidak bisa tahu progress pengiriman data. Apakah pengirim masih dalam proses mengirim atau sudah selesai? Kita tidak tahu secara pasti. Biasanya diakali dengan cara memeriksa ukuran file dalam selang waktu tertentu. Bila ukurannya masih terus bertambah, berarti proses pengiriman masih berjalan. Bila ukurannya tidak membesar lagi, ada indikasi bahwa pengiriman sudah selesai.</p>

<p>Untungnya prosedur pengecekan ini sudah dibuatkan <a href="http://static.springsource.org/spring-integration/reference/htmlsingle/#files">implementasinya</a> oleh rekan-rekan Spring Integration, sehingga kita tinggal mengikuti <a href="https://github.com/SpringSource/spring-integration-samples/tree/master/basic/file">contoh yang tersedia</a>.</p>

<p>Demikianlah sedikit informasi mengenai integrasi antar aplikasi. Semoga bermanfaat :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Training CMMI]]></title>
    <link href="http://software.endy.muhardin.com/manajemen/training-cmmi/"/>
    <updated>2013-05-10T14:13:00+07:00</updated>
    <id>http://software.endy.muhardin.com/manajemen/training-cmmi</id>
    <content type="html"><![CDATA[<p>Saya akan mengisi <a href="http://brainmatics.com/cmmi-capability-maturity-model-integration/">training CMMI di Brainmatics</a> minggu depan, Senin - Rabu, 13 - 15 Mei 2013. Buat yang belum paham apa itu CMMI, bisa baca <a href="http://software.endy.muhardin.com/manajemen/apa-itu-cmmi/">artikel saya mengenai masalah ini</a>.</p>

<p>Sebenarnya, materi tentang CMMI banyak bertebaran secara gratis di internet. Bahkan spesifikasi resminya gratis bisa diunduh di <a href="http://cmmiinstitute.com/">websitenya Carnegie Mellon University</a>. Lalu buat apa ikut training lagi kalau di internet sudah banyak materinya?</p>

<!--more-->


<p>Berikut beberapa alasannya:</p>

<ul>
<li>Materi CMMI yang ada di website sangat abstrak dan penjelasannya bersifat umum.</li>
<li>Agar bisa diimplementasikan di perusahaan, aturan CMMI ini harus dibuatkan dulu padanan/mapping dengan proses bisnis di internal perusahaan.</li>
<li>Proses bisnis di internal perusahaan belum tentu selengkap yang diminta CMMI, sehingga harus didesain dan dibuat dulu.</li>
<li>Seringkali terjadi, cara mendesain proses bisnis yang baik juga belum dikuasai. Ini akan kita bahas pada sesi training.</li>
<li>Setelah dibuat, proses bisnis harus diimplementasikan ke seluruh perusahaan. Implementasi proses bisnis ada metodologinya sendiri.</li>
<li>Di website CMMI, dijelaskan proses appraisal, yaitu proses untuk menilai perusahaan apakah sudah sesuai dengan aturan CMMI. Penjelasan di kertas tentu jauh berbeda dengan pengalaman nyata yang saya alami pada waktu implementasi CMMI.</li>
<li>Ada banyak <a href="http://software.endy.muhardin.com/manajemen/meluruskan-mitos-cmmi/">mitos dan urban legend tentang CMMI</a>, terutama yang berkaitan dengan metodologi agile seperti Scrum, Kanban, XP, dan lainnya. Pada sesi training, kita akan bahas mana yang mitos mana yang nyata.</li>
</ul>


<p>Silabus lengkap bisa dilihat di <a href="http://brainmatics.com/cmmi-capability-maturity-model-integration/">website Brainmatics</a>. Tapi banyak jargon teknis di sana yang baru bisa kita pahami kalau sudah mengerti CMMI. Untuk yang masih awam, berikut adalah hal yang akan kita pelajari/lakukan selama training:</p>

<ol>
<li><p>Apa itu CMMI</p>

<ul>
<li>sejarah</li>
<li>use case</li>
<li>manfaat buat kita</li>
</ul>
</li>
<li><p>Isi perut CMMI</p>

<ul>
<li>apa itu process area</li>
<li>apa itu goals</li>
<li>apa itu practices</li>
<li>apa yang dimaksud generic goals/practices</li>
<li>apa yang dimaksud specific goals/practices</li>
<li>apa itu maturity level</li>
<li>apa yang dimaksud staged representation dan continuous representation</li>
<li>bagaimana proses appraisal</li>
</ul>
</li>
<li><p>Metodologi implementasi</p>

<ul>
<li>menentukan target maturity level yang realistis untuk dicapai perusahaan kita</li>
<li>melakukan gap analysis, antara kondisi perusahaan kita sekarang dan kondisi yang diminta CMMI</li>
<li>membuat mapping antara kebutuhan CMMI dan proses bisnis di perusahaan kita</li>
<li>cara mendesain proses bisnis perusahaan yang efektif dan komprehensif</li>
<li>cara implementasi proses bisnis yang sudah dibuat</li>
<li>tips dan trik dalam proses appraisal</li>
</ul>
</li>
</ol>


<p>Trainingnya akan berbentuk workshop. Saya akan menjelaskan teori secara singkat, lalu kita lanjutkan dengan praktek dan diskusi. Target training ini adalah, peserta pulang dengan membawa :</p>

<ul>
<li>strategi implementasi</li>
<li>daftar proses bisnis yang harus dibuat/direvisi</li>
<li>contoh dokumen dan template</li>
<li>action plan yang harus mereka lakukan di perusahaannya untuk berhasil mencapai target maturity level yang diinginkan.</li>
</ul>


<p>Jadi, tunggu apa lagi, ayo segera daftar. Sampai ketemu di sesi training :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Akses VM Proxmox Tanpa Applet]]></title>
    <link href="http://software.endy.muhardin.com/linux/akses-vm-proxmox-tanpa-applet/"/>
    <updated>2013-02-28T14:22:00+07:00</updated>
    <id>http://software.endy.muhardin.com/linux/akses-vm-proxmox-tanpa-applet</id>
    <content type="html"><![CDATA[<p>Jika kita ingin mengakses virtual machine di dalam Proxmox,
ada beberapa opsi yang bisa kita gunakan, yaitu:</p>

<ul>
<li>SSH langsung ke IP virtual machine tersebut.</li>
<li>Login ke web management Proxmox, kemudian pilih virtual machine, dan jalankan VNC console yang berupa aplikasi Java applet.</li>
<li>SSH ke mesin host, dan kemudian masuk ke console virtual machine</li>
<li>Membuat VNC server yang bisa diakses dari luar</li>
</ul>


<p>Kadangkala, kita tidak bisa menjalankan opsi pertama, karena belum menginstal SSH server di VM.
Opsi kedua sering tidak lancar di Linux.
Opsi ketiga hanya bisa dijalankan untuk OpenVZ, saya belum ketemu caranya untuk KVM.
Dengan demikian, kita harus menggunakan cara keempat.</p>

<!--more-->


<p>Berikut adalah caranya. Pertama kita ssh dulu ke mesin host.
Setelah itu kita tampilkan daftar semua VM yang bertipe KVM
dengan perintah <code>qm list</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># qm list
</span><span class='line'>      VMID NAME                 STATUS     MEM(MB)    BOOTDISK(GB) PID
</span><span class='line'>       101 vm110                running    512               30.00 16474
</span><span class='line'>       103 vm103                stopped    512               80.00 0
</span><span class='line'>       104 vm104                running    256               80.00 16256
</span><span class='line'>       107 vm107                running    2000              50.00 16348
</span><span class='line'>       113 vm113                stopped    512               32.00 0
</span><span class='line'>       115 vm115                running    8000             100.00 16316
</span><span class='line'>       116 vm116                running    1000              80.00 16460
</span><span class='line'>       119 vm119                running    1000              20.00 16390
</span><span class='line'>       120 vm120                running    1000              40.00 16284
</span><span class='line'>       166 vm166                running    1024             150.00 16440
</span><span class='line'>       190 vm190                running    512               20.00 16270
</span><span class='line'>       199 vm199                running    1024               5.00 16300</span></code></pre></td></tr></table></div></figure>


<p>Kita bisa membuka VNC server yang mengarah ke VM dengan ID tertentu
dengan perintah berikut:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -l -p portvnc -c "qm vncproxy vmid passwdvnc"</span></code></pre></td></tr></table></div></figure>


<p>Misalnya, bila kita ingin mengakses VMID <code>166</code> di port <code>10166</code> dengan password <code>abc321</code>,
maka perintahnya adalah sebagai berikut</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nc -l -p 10166 -c "qm vncproxy 166 abc321"</span></code></pre></td></tr></table></div></figure>


<p>Setelah itu, kita bisa mengakses VM tersebut menggunakan VNC client seperti pada screenshot.</p>

<p><img src="http://software.endy.muhardin.com/images/uploads/2013/02/28/vnc-kvm.png" title="Konfigurasi VNC Client" ></p>

<p>Kosongkan saja username dan password, nanti kita akan dimintai password oleh aplikasinya.</p>

<p>Hal yang sama bisa dilakukan juga dengan OpenVZ.</p>

<p>Pertama, cari dulu VM yang mau diakses dengan perintah <code>vzlist</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vzlist
</span><span class='line'>      CTID      NPROC STATUS    IP_ADDR         HOSTNAME
</span><span class='line'>       102        229 running   202.202.202.200  vm102
</span><span class='line'>       105         40 running   202.202.202.201  vm105
</span><span class='line'>       106         27 running   202.202.202.202  vm106
</span><span class='line'>       108         21 running   202.202.202.203  vm108
</span><span class='line'>       110         46 running   202.202.202.204  vm110
</span><span class='line'>       111         61 running   202.202.202.205  vm111
</span><span class='line'>       112         16 running   202.202.202.206  vm112
</span><span class='line'>       114         39 running   202.202.202.207  vm114
</span><span class='line'>       117         18 running   202.202.202.208  vm117
</span><span class='line'>       121         43 running   202.202.202.209  vm121
</span><span class='line'>       130         32 running   202.202.202.210  vm130</span></code></pre></td></tr></table></div></figure>


<p>Kemudian gunakan perintah berikut</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vncterm -c vzctl enter VMID</span></code></pre></td></tr></table></div></figure>


<p>Misalnya, bila ingin mengakses VM 111, maka perintahnya adalah</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vncterm -rfbport 10111 -c vzctl enter 104</span></code></pre></td></tr></table></div></figure>


<p>Referensi :</p>

<ul>
<li><a href="http://forum.proxmox.com/threads/612-External-VNC-viewer">Forum Proxmox</a></li>
<li><a href="http://honglus.blogspot.com/2011/02/access-guest-vm-console-via-text-mode.html">UNIX/LINUX TECH NOTES</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
