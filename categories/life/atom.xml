<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: life | Living life and make it better]]></title>
  <link href="http://software.endy.muhardin.com/categories/life/atom.xml" rel="self"/>
  <link href="http://software.endy.muhardin.com/"/>
  <updated>2013-11-14T16:44:44+07:00</updated>
  <id>http://software.endy.muhardin.com/</id>
  <author>
    <name><![CDATA[Endy Muhardin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Problem Solving]]></title>
    <link href="http://software.endy.muhardin.com/life/problem-solving/"/>
    <updated>2013-10-31T11:00:00+07:00</updated>
    <id>http://software.endy.muhardin.com/life/problem-solving</id>
    <content type="html"><![CDATA[<p>Saya aktif berbagai forum diskusi di internet, mostly mengenai pemrograman. Dari apa yang saya amati di forum tersebut, begitu ada pertanyaan, umumnya selalu disambut dengan alternatif solusi yang bermacam-macam. Padahal seharusnya, kita fokus dulu dalam memahami masalahnya. Begitu kita paham masalahnya, solusinya akan mudah ditemukan.</p>

<p>Ada <a href="http://www.snopes.com/business/genius/where.asp">cerita <em>urban legend</em> di internet yang menggambarkan pendekatan ini</a>. Berikut terjemahan bebas dari saya.</p>

<!--more-->


<blockquote><p>Budi adalah seorang pemilik pabrik yang sedang pusing tujuh keliling.
Salah satu mesinnya rusak sehingga produksi terhenti.
Padahal minggu depan tanggal gajian dan barang harus segera dikirim agar ada uang masuk.</p>

<p>Semua teknisi sudah dikerahkan, tapi tidak bisa memperbaiki mesin tersebut.
Akhirnya dia mendatangkan temannya bernama Agus.</p>

<p>Agus mulai beraksi. Tanya kiri-kanan, melihat ke dalam kap mesin, dan berkeliling pabrik seharian.
Di sore hari, dia mengambil spidol dan membuat tanda X di salah satu komponen mesin.
Teknisi mengganti komponen tersebut, dan mesin berjalan kembali dengan normal.</p>

<p>Agus kemudian memberikan invoice senilai 100 juta. Budi terkejut, "Masa menulis X saja 100 juta??"
Agus mengambil kembali invoice tersebut dan merevisinya sebagai berikut</p></blockquote>

<table>
<thead>
<tr>
<th>Pekerjaan             </th>
<th> Biaya</th>
</tr>
</thead>
<tbody>
<tr>
<td>Menulis X             </td>
<td>             10.000</td>
</tr>
<tr>
<td>Menentukan lokasi X   </td>
<td>         99.990.000</td>
</tr>
<tr>
<td>Total                 </td>
<td>        100.000.000</td>
</tr>
</tbody>
</table>


<p>Anda mungkin berkomentar,</p>

<blockquote><p>Ah itu kan cuma cerita dongeng saja.</p></blockquote>

<p>Kenyataannya, saya beberapa kali menemui kasus seperti ini. Contohnya:</p>

<p><img src="/images/uploads/2013/10/problem-solving/floating-point-problem.png"></p>

<p>Kenapa hasilnya tidak sama? Karena memang itu sifat dari bilangan <code>floating-point</code>.
Begitu kita paham problemnya (yaitu karakteristik bilangan <code>floating-point</code>), fenomena di atas tidak lagi membingungkan buat kita,
dan solusinya langsung terang benderang.</p>

<p>Contoh lain, di milis ada yang bertanya begini</p>

<blockquote><p>Saya ingin menggunakan icon di aplikasi Eclipse dalam aplikasi saya.
Lisensinya <a href="http://en.wikipedia.org/wiki/Eclipse_Public_License">EPL</a>, apakah boleh saya pakai gratis atau harus bayar?</p></blockquote>

<p>Diskusi berlanjut dengan orang-orang menjelaskan rincian lisensi EPL apa yang boleh apa yang tidak boleh
berikut referensi ke berbagai website.</p>

<p>Saya melihat masalahnya lebih sederhana</p>

<blockquote><p>Ada orang ingin pakai icon bagus di aplikasi yang dia buat.</p></blockquote>

<p>Kemudian saya memberikan rekomendasi yang lebih simple</p>

<blockquote><p>Coba google dengan keyword <code>free icon</code>.
Nanti ketemu banyak, salah satunya <a href="http://www.famfamfam.com/lab/icons/">famfamfam</a>.</p></blockquote>

<p>Nah, itu sudah jelas gratis, tidak perlu pusing <em>terms &amp; conditions</em> dari lisensi <a href="http://en.wikipedia.org/wiki/Eclipse_Public_License">EPL</a>.</p>

<h2>Kesimpulan</h2>

<p>Dengan menjabarkan problemnya dengan baik, solusi yang sederhana bisa didapatkan. Tim saya di <a href="http://www.artivisi.com">ArtiVisi</a> sudah terbiasa dengan pendekatan seperti ini. Setiap kali mereka minta solusi untuk suatu hal teknis yang rumit, saya akan selalu mengarahkan untuk menganalisa ulang requirement. Apakah memang harus demikian solusinya? Bila iya, coba lagi negosiasikan requirement supaya bisa menggunakan solusi yang lebih sederhana. Lebih baik negosiasi requirement seharian daripada harus coding solusi rumit dua minggu (belum lagi testing, debugging, maintenance, dst).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lan Na Zha]]></title>
    <link href="http://software.endy.muhardin.com/life/lan-na-zha/"/>
    <updated>2013-08-25T16:38:00+07:00</updated>
    <id>http://software.endy.muhardin.com/life/lan-na-zha</id>
    <content type="html"><![CDATA[<p>Beberapa hari yang lalu, saya membaca artikel menarik tentang profesi IT.
Inti dari artikel tersebut adalah profesi di dunia IT <em>sucks</em> dengan beberapa alasan:</p>

<ol>
<li>Pemrograman termasuk kategori <em>temporary knowledge capital</em>, yaitu pengetahuan yang cepat kadaluarsa</li>
<li>Bahasa pemrograman, teknologi, dan platform berubah dengan sangat cepat</li>
<li>Gajinya kecil dan prestisenya rendah</li>
<li>Jenjang karir tidak jelas</li>
</ol>


<p>Artikel selengkapnya bisa dibaca <a href="http://www.halfsigma.com/2007/03/why_a_career_in.html">di sini</a>.</p>

<p>Untuk masalah nomer #3 dan #4, menurut saya lebih terkait pada masalah ambisi, attitude, dan <a href="http://software.endy.muhardin.com/life/otodidak/">self-improvement/kemampuan otodidak</a>. Di artikel ini, kita akan bahas solusi untuk masalah nomer #1 dan #2.</p>

<p>Seperti di artikel sebelumnya, kali ini kita juga akan mengambil teladan dari seorang tokoh di luar dunia IT. Siapa dia?</p>

<p><img src="/images/uploads/2013/08/lan-na-zha/li-shu-wen.jpg" title="Li Shu Wen" ></p>

<p><em>gambar diambil dari <a href="http://mangafox.me/manga/kenji/v21/c003/3.html">MangaFox</a></em></p>

<p>Dia adalah Li Shu Wen, legenda <a href="http://en.wikipedia.org/wiki/B%C4%81j%C3%ADqu%C3%A1n">kungfu Delapan Mata Angin</a> yang diceritakan di <a href="http://mangafox.me/manga/kenji/">komik Kenji</a>.</p>

<!--more-->


<p>Sekilas kita lihat, memang dunia IT berkembang dengan sangat cepat. Bahasa pemrograman datang dan pergi dengan cepatnya. Waktu saya mulai belajar pemrograman dulu (tahun 2001), bahasa paling populer adalah PHP, VB, dan Delphi. Java waktu itu hanyalah mainan orang-orang di kampus. 12 tahun kemudian, kita mendengar banyak bahasa baru, misalnya:</p>

<ul>
<li>Go</li>
<li>Harlan</li>
<li>Kotlin</li>
<li>Rust</li>
<li>Dart</li>
<li>Clojure</li>
<li>dan banyak lagi yang lainnya</li>
</ul>


<p>Dan juga jangan dilupakan bahasa lama yang kembali ngetren, misalnya:</p>

<ul>
<li>Ruby</li>
<li>Python</li>
<li>JavaScript</li>
</ul>


<p>Hal yang sama berlaku juga di urusan platform. Beberapa tahun yang lalu, Blackberry adalah rajanya. Sebelum Blackberry, JavaME dan Symbian adalah platform utama di mobile. Jaman sekarang mereka semua sudah digusur oleh Android dan iPhone. Ini semua terjadi dalam kurun waktu 5 tahun saja. Jadi kalau 5 tahun yang lalu kemahiran kita dalam pemrograman JavaME membuat kita menjadi idola masyarakat, jaman sekarang kita tidak lebih dari seorang Pak Tua yang sudah mendekati usia pensiun ;)</p>

<p>Nah, saya termasuk salah satu Pak Tua tersebut. Tergabung dalam generasi dinosaurus yang masih tau apa itu CORBA, RMI, SOAP, XML, dan singkatan-singkatan lain yang tidak dipahami generasi masa kini yang urusannya adalah KML, JSON, dan kawan-kawannya. Bagaimana cara saya survive bisa menjadi pelajaran buat generasi 2013 yang akan menyusul menjadi Pak Tua dalam 5 tahun ke depan :D</p>

<p>Kuncinya ada di legenda kungfu jaman dulu, <a href="http://kenji.mangawiki.org/?p=1">Li Shu Wen</a> yang diceritakan dalam komik Kenji dengan nama Lie Syo Bun yang bisa dibaca online <a href="http://mangafox.me/manga/kenji/v21/c001/1.html">di sini</a>. Berikut sedikit bagian yang relevan dengan artikel ini, yaitu tentang gerakan Lan Na Zha.</p>

<blockquote><p>Untuk menjadi master di aliran kungfu Delapan Mata Angin, Li Shu Wen harus menguasai dua teknik, yaitu pukulan pamungkas dan teknik tombak. Dia menguasai pukulan pamungkas secara otodidak dengan mempertaruhkan nyawa. Baca ceritanya <a href="http://mangafox.me/manga/kenji/v21/c002/2.html">di bab dua Kenji volume 21</a>. Setelah itu, dia mendapat pengajaran dasar-dasar ilmu tombak di perguruannya. Karena sering berkelahi, maka Li Shu Wen hanya boleh menonton, tidak boleh mencoba. Gurunya mendemokan tiga gerakan dasar ilmu tombak, yaitu Lan (memutar ke luar), Na (memutar ke dalam), dan Zha (menusuk).</p></blockquote>

<p><img src="/images/uploads/2013/08/lan-na-zha/lan-na-zha.jpg" title="Lan Na Zha" ></p>

<p><em>gambar diambil dari <a href="http://mangafox.me/manga/kenji/v21/c003/8.html">MangaFox</a></em></p>

<blockquote><p>Ketika gurunya mengajarkan teknik kombinasi yang lebih advanced, dia menolak belajar karena menganggap sudah cukup dengan tiga gerakan dasar itu saja, sehingga diskorsing oleh gurunya. Tapi bermodalkan tiga gerakan dasar ini saja, dia berhasil mengalahkan semua yang menantangnya, sehingga digelari Dewa Tombak. Baca cerita lengkapnya <a href="http://mangafox.me/manga/kenji/v21/c003/6.html">di sini</a>.</p></blockquote>

<p>Sedemikian universalnya teknik dasar ini, sehingga bisa kita temukan juga di komik lain, yaitu <a href="">Legenda Naga</a>.</p>

<p><img src="/images/uploads/2013/08/lan-na-zha/lan-na-zha-gongfu.jpg" title="Lan Na Zha Legenda Naga" ></p>

<p><em>gambar diambil dari <a href="http://mangafox.me/manga/ryuurouden/v07/c024/16.html">MangaFox</a></em></p>

<p>Lalu apa hubungannya dengan profesi di dunia IT? Pelajaran utama dari komik di atas adalah kita harus mengambil inti dari setiap pengetahuan yang kita miliki. Teknik implementasi bisa berubah dengan cepat, tapi konsep dasar tidak berubah. Tidak percaya? Coba kita lihat istilah-istilah yang sedang trendi di jaman sekarang:</p>

<ul>
<li>Functional Programming, Closure, Clojure, Scala, Groovy, Lambda Expression</li>
<li>Object Oriented Programming, UML</li>
<li>ORM</li>
<li>REST</li>
</ul>


<p>Mari kita telusuri apakah benar istilah tersebut membuat skill kita kadaluarsa?</p>

<h3>Functional Programming</h3>

<p><a href="http://en.wikipedia.org/wiki/Functional_programming">Menurut Wikipedia</a>, Functional programming sudah dikenal sejak tahun 1950. Bahasa yang terkenal adalah <a href="http://en.wikipedia.org/wiki/Lisp_(programming_language">LISP</a>) dan <a href="http://en.wikipedia.org/wiki/Haskell_(programming_language">Haskell</a>).</p>

<p>Jadi, apa yang ngetren dengan nama Clojure di masa kini, sebetulnya sudah ada sejak tahun 1950. Kalau saja kita menguasai konsep functional programming, bukan hanya teknik pemrograman Lisp/Haskell, maka konsep yang kita pahami tersebut akan memungkinkan kita menguasai Clojure dalam waktu satu bulan saja. Demikian juga dengan bahasa pemrograman functional lain seperti Scala, Groovy, dan fitur Lambda Expression yang akan hadir di Java 8.</p>

<h3>Object Oriented Programming</h3>

<p>Istilah OOP mungkin tidak terdengar terlalu modern. Tapi sebetulnya dia umurnya sama dengan Functional Programming, yaitu dikenal sejak tahun 1950. Bahasa pemrograman berparadigma OOP yang terkenal antara lain adalah Smalltalk.</p>

<p>Untuk mendokumentasikan desain aplikasi OOP, digunakan notasi UML. Notasi ini dirumuskan pada tahun 1990.</p>

<h3>ORM</h3>

<p>Object Relational Mapping atau ORM, sering kita kenal dengan istilah JPA, Hibernate, Toplink, dan sebagainya, sebetulnya bukan konsep baru. ORM hanyalah library yang mengkonversi hasil query database relasional menjadi object, dan sebaliknya. Adapun istilah-istilah yang sering kita temui dalam penggunaan ORM seperti:</p>

<ul>
<li><a href="http://stackoverflow.com/questions/97197/what-is-the-n1-selects-issue">n+1 select</a></li>
<li><a href="http://en.wikipedia.org/wiki/Cartesian_product">cartesian product</a></li>
<li><a href="http://en.wikipedia.org/wiki/Foreign_key#CASCADE">cascade operation</a></li>
</ul>


<p>adalah istilah umum yang juga ditemui di SQL. Sedangkan</p>

<ul>
<li>second level cache</li>
<li>lazy loading vs eager fetching</li>
</ul>


<p>merupakan teknik optimasi pengambilan data, yang tidak hanya berlaku untuk database relasional, tapi juga semua pengambilan data dari sumber eksternal seperti:</p>

<ul>
<li>file</li>
<li>web service</li>
<li>network socket</li>
<li>dan sebagainya</li>
</ul>


<h3>REST</h3>

<p><a href="http://en.wikipedia.org/wiki/Representational_state_transfer">REST</a>, sebetulnya hanyalah satu metode untuk mengakses service yang disediakan aplikasi lain. Secara konseptual, dia tidak berbeda dengan:</p>

<ul>
<li>SOAP</li>
<li>ISO-8583</li>
<li>IMAP</li>
<li>POP3</li>
<li>SMTP</li>
</ul>


<p>Intinya adalah ada aplikasi A yang ingin menyuruh aplikasi B melakukan sesuatu. Sesuatu di sini bisa menjalankan perintah tertentu, mengambilkan data, mematikan komputer, dan apapun yang bisa kita pikirkan. Begitu kita paham intinya, menyuruh aplikasi lain bisa dilakukan dengan berbagai cara lain, misalnya:</p>

<ul>
<li>mengirim SMS</li>
<li>mengirim email</li>
<li>mengirim data dengan format yang kita tentukan sendiri melalui jaringan (TCP/IP)</li>
<li>mengirim message chat melalui Yahoo Messenger, BBM, Google Hangout, Line, Whatsapp, dan apapun media lain</li>
</ul>


<p>Kita bisa generalisasi lagi menjadi konsep yang lebih mendasar, yaitu <a href="http://software.endy.muhardin.com/java/integrasi-aplikasi/">bagaimana menghubungkan (integrasi) antar beberapa aplikasi agar bisa bekerjasama</a>.</p>

<h2>Framework dan Library</h2>

<p>Kita juga sering pusing dengan cepatnya perkembangan framework dan library. Di dunia Java, kita bisa ambil contoh Spring Framework dan Java EE.</p>

<p>Walaupun demikian, dengan menggunakan prinsip Lan-Na-Zha, kita tidak perlu pusing. Coba kita bahas evolusinya.</p>

<h3>Java EE</h3>

<p>Jaman dulu namanya J2EE, beberapa jargon yang kita dengar adalah:</p>

<ul>
<li>Container Managed Transaction (CMT) : programmer tidak perlu <code>begin-commit/rollback</code> sendiri, diurus appserver</li>
<li>Enterprise Java Beans (EJB) : object yang diinisialisasi, dimaintain, dan dibersihkan oleh appserver</li>
<li>Session Beans : EJB yang bertugas menampung proses bisnis</li>
<li>Entity Beans : EJB yang bertugas menjadi mapping dari Java ke tabel database</li>
<li>Message Driven Beans : EJB yang bertugas menunggu message JMS dan beraksi begitu ada message</li>
</ul>


<p>Teknik implementasinya adalah sebagai berikut:</p>

<ol>
<li>Coding Session Beans, Entity Beans, Message Driven Beans menggunakan Java</li>
<li>Deklarasikan objectnya di file XML</li>
<li>Bila object tersebut saling terkait, tulis juga hubungannya di file XML</li>
<li>Konfigurasi CMT di file XML juga</li>
</ol>


<p>Jaman sekarang namanya JEE. Implementasinya beda, seperti ini:</p>

<ol>
<li>Coding Session Beans, Entity Beans, Message Driven Beans menggunakan Java</li>
<li>Tambahkan annotation <code>@Stateless</code>, <code>@Stateful</code>, <code>@Entity</code>, <code>@MessageDriven</code> supaya EJB dikelola oleh appserver</li>
<li>Bila object tersebut saling terkait, tulis juga hubungannya menggunakan <code>@Inject</code></li>
<li>CMT sudah diaktifkan by-default. Konfigurasi tambahan bisa dilakukan menggunakan <code>@TransactionAttribute</code></li>
</ol>


<p>Konsepnya tetap sama. Tidak percaya? Baiklah saya copy paste ;)</p>

<ul>
<li>Container Managed Transaction (CMT) : programmer tidak perlu <code>begin-commit/rollback</code> sendiri, diurus appserver</li>
<li>Enterprise Java Beans (EJB) : object yang diinisialisasi, dimaintain, dan dibersihkan oleh appserver</li>
<li>Session Beans : EJB yang bertugas menampung proses bisnis</li>
<li>Entity Beans : EJB yang bertugas menjadi mapping dari Java ke tabel database</li>
<li>Message Driven Beans : EJB yang bertugas menunggu message JMS dan beraksi begitu ada message</li>
</ul>


<p>Seperti kita lihat, kalau kita menghafalkan implementasi (konfigurasi XML), maka skill J2EE kita akan kadaluarsa begitu JavaEE 6 dirilis. Tapi kalau kita pahami benar-benar konsepnya (CMT, EJB), maka pemahaman tersebut masih relevan di JavaEE 5, JavaEE 6, dan kemungkinan besar juga di JavaEE 10 beberapa tahun yang akan datang ;)</p>

<h3>Spring Framework</h3>

<p>Bagi aliran non JavaEE, biasanya pakai Spring Framework. Di sinipun tidak jauh berbeda. Dulunya konfigurasi menggunakan XML, sekarang bisa pakai Annotation dan JavaConfig.</p>

<p>Implementasi jaman dulu:</p>

<ul>
<li>inisialisasi (me<code>new</code>kan object) ada di XML</li>
<li>transaction management dilakukan menggunakan AOP, juga di XML</li>
</ul>


<p>Contohnya bisa dilihat di <a href="http://sourceforge.net/p/playbilling/code/7/tree/trunk/web/WEB-INF/conf/ctx-billing.xml">kode program saya tahun 2006 - 7 tahun yang lalu</a>. Perhatikan bahwa setiap class <code>DAO</code> dideklarasikan di XML. Demikian juga konfigurasi transaction di bagian <code>transactionAttributes</code>.</p>

<p>Implementasi jaman sekarang:</p>

<ul>
<li>inisialisasi dilakukan melalui annotation</li>
<li>transaction management dikonfigurasi di annotation</li>
</ul>


<p>Contohnya bisa dilihat di <a href="http://software.endy.muhardin.com/java/konfigurasi-koneksi-database-dengan-spring/">kode program saya tahun 2013</a>.</p>

<p>Walaupun kode programnya berubah sama sekali, konsepnya tidak berubah dalam kurun waktu 7 tahun, yaitu:</p>

<ul>
<li><a href="http://software.endy.muhardin.com/java/memahami-dependency-injection/">Dependency Injection</a></li>
<li>Aspect Oriented Programming</li>
</ul>


<h2>Gong Fu</h2>

<p>Kalau kita baca terus kisah Li Shu Wen sampai <a href="http://mangafox.me/manga/kenji/v21/c005/10.html">bab 5</a>, kita akan mendapat pelajaran penting lainnya, yaitu <code>gongfu</code>. Gongfu artinya adalah <code>hasil yang didapat dari latihan</code>. Kita melakukan satu hal berulang-ulang, sehingga hal tersebut menjadi refleks dan bisa kita lakukan tanpa harus berpikir lagi.</p>

<p><img src="/images/uploads/2013/08/lan-na-zha/gongfu.jpg" title="Gong Fu" ></p>

<p><em>gambar diambil dari <a href="http://mangafox.me/manga/kenji/v21/c005/21.html">MangaFox</a></em></p>

<p>Salah satu latihan yang sering saya lakukan adalah membuat aplikasi dengan satu tabel database, satu form input, satu tabel list, lengkap dengan validasinya, menggunakan framework yang biasa digunakan (Spring dan Hibernate), <strong>dari nol</strong>. Dengan latihan tersebut, saya hafal dan tahu persis fungsi dan tujuan setiap baris kode program dan konfigurasi yang ada dalam aplikasi. Bila ada error, saya bisa mengatasinya dengan cepat dengan bermodalkan <code>gongfu</code> dalam mengintegrasikan berbagai framework.</p>

<blockquote><p>Di jaman content seperti saat ini, <em>gongfu</em> yang paling perlu dipupuk adalah <a href="http://software.endy.muhardin.com/aplikasi/teknik-menggunakan-google/">teknik googling</a>. Memilih keyword yang tepat supaya hasil search sesuai keinginan merupakan suatu skill khusus. Skill ini hanya bisa ditingkatkan melalui latihan.</p></blockquote>

<p>Khusus programmer, penting juga dilatih cara untuk mendebug error. Membaca pesan error, memisahkan mana yang relevan dan tidak, kemudian mencari tahu baris kode yang menyebabkan error, merupakan skill yang hanya bisa didapat melalui latihan.</p>

<p>Dalam melatih gongfu, ada satu prinsip yang penting untuk kita gunakan, yaitu <a href="http://joshvogelart.blogspot.com/2013/02/slow-is-smooth-and-smooth-is-fast.html">Slow is smooth, smooth is fast</a>. Artinya, kita lakukan langkah demi langkah seakurat mungkin walaupun perlahan. Fokusnya adalah <strong>melakukan secara benar</strong>. Seiring dengan durasi latihan kita, rangkaian gerakan tersebut akan tertanam menjadi refleks di otak kita, sehingga kita bisa melakukannya dengan lebih cepat. Ulangi terus dalam jangka waktu yang lama, maka kita akan bisa melakukan hal tersebut dengan sangat cepat, namun tetap akurat.</p>

<h2>Kesimpulan</h2>

<p>Belajar dari kisah Li Shu Wen di atas, kita tidak perlu khawatir dengan cepatnya perkembangan teknologi di dunia IT. Bila kita paham konsep dan prinsip dasarnya, kita tidak akan tertinggal. Teknik implementasi, bahasa pemrograman, platform, format data, protokol komunikasi, memang akan terus berubah sepanjang jaman. Tapi prinsip yang mendasarinya akan tetap berpulang pada konsep klasik dan akal sehat.</p>

<p>Jadi, bila kita belajar sesuatu, tidak hanya di dunia IT, jangan cepat puas begitu kita tahu <strong>bagaimana cara melakukannya</strong>. Gali terus sampai kita memahami <strong>tujuan kenapa kita melakukan hal tersebut</strong> dan <strong>berbagai cara lain untuk mencapai tujuan yang sama</strong>. Jangan puas begitu kita bisa <strong>insert data menggunakan ORM</strong>. Tapi gali terus sampai kita paham <strong>mengapa ORM dibuat</strong> dan <strong>bagaimana cara kerja/isi perut ORM</strong>.</p>

<p>Setelah paham, latih terus pemahaman konsep tersebut sampai kita mahir. Jangan berhenti ketika merasa sudah mahir, karena semua skill dan teknik perlu maintenance supaya tidak hilang.</p>

<p>Terakhir, untuk mendapatkan hasil maksimal, kombinasikan artikel ini dengan <a href="http://software.endy.muhardin.com/life/otodidak/">artikel sebelumnya</a>. Pahami prinsip dasar dari skill otodidak, kemudian latihan sampai mahir. Jangan menyerah kalau merasa sulit dalam belajar. Yang namanya belajar pasti sulit, kalau sudah tidak sulit lagi tandanya kita sudah bisa ;)</p>

<p>Juga jangan bosan bila kita tidak cepat memahami/menguasai sesuatu. Menguasai suatu konsep dan teknik dasar seringkali butuh waktu lama. Dalam komik Legenda Naga, Lan Na Zha dilatih selama enam bulan</p>

<p><img src="/images/uploads/2013/08/lan-na-zha/lan-na-zha-gongfu.jpg" title="Lan Na Zha Legenda Naga" ></p>

<p><em>gambar diambil dari <a href="http://mangafox.me/manga/ryuurouden/v07/c024/16.html">MangaFox</a></em></p>

<p>Dalam komik Kenji, Li Shu Wen melatih kuda-kuda dasar selama 3 bulan. Tidak seperti aliran lain, selama periode tersebut siswa belum belajar memukul sama sekali.</p>

<p><img src="/images/uploads/2013/08/lan-na-zha/horse-stance-training.jpg" title="Latihan Kuda-kuda" ></p>

<p><em>gambar diambil dari <a href="http://mangafox.me/manga/kenji/v21/c007/6.html">MangaFox</a></em></p>

<p>Bagaimana dengan programming?</p>

<blockquote><p>Menurut Peter Norvig, <a href="http://norvig.com/21-days.html">belajar pemrograman butuh waktu 10 tahun</a>.</p></blockquote>

<p>Jadi, kalau kita belajar sesuatu, setelah dua minggu belum paham dan masih bingung, jangan khawatir. Masih ada waktu 10 tahun kurang
2 minggu lagi untuk belajar ;)</p>

<p>Nah, dengan artikel ini, mudah-mudahan orang bisa memahami mengapa di berbagai forum, milis, sesi kuliah dan pelatihan, saya selalu bersikeras supaya orang <a href="http://software.endy.muhardin.com/life/rtfm/">mencoba dulu sebelum bertanya/minta solusi</a>. Karena dengan mencoba, kita akan meningkatkan gongfu dalam skill problem solving.</p>

<p>Selamat berlatih ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Otodidak]]></title>
    <link href="http://software.endy.muhardin.com/life/otodidak/"/>
    <updated>2013-08-18T20:04:00+07:00</updated>
    <id>http://software.endy.muhardin.com/life/otodidak</id>
    <content type="html"><![CDATA[<p>Sebagai programmer, ada banyak tokoh yang bisa kita teladani, seperti Linus Torvalds, Bill Gates, Richard Stallman, Eric Raymond, Brian Kernighan, Dennis Ritchie, Erich Gamma, dan banyak lainnya. Tetapi di dunia modern seperti sekarang ini, dimana teknologi baru bermunculan lebih cepat dari kemampuan kita untuk bisa menggunakannya (apalagi bisa mempelajarinya), ada satu tokoh yang wajib kita teladani, bukan berasal dari dunia IT. Siapa dia?</p>

<p><img src="/images/uploads/2013/08/otodidak/hatake-kakashi.jpg" title="Hatake Kakashi" ></p>

<p>Gambar diambil dari <a href="http://www.fanpop.com/clubs/kakashi/images/18899114/title/kakashi-hatake-screencap">Fanpop</a></p>

<p>Dia adalah Hatake Kakashi dari komik Naruto.</p>

<p>Kenapa begitu? Karena skill dan special ability yang dia miliki adalah juga skill dan special ability yang wajib dimiliki semua programmer tanpa kecuali, agar bisa selamat dari bencana pengangguran. Buat yang tidak mengikuti komik Naruto, berikut profil singkat Hatake Kakashi yang berkaitan dengan urusan programming. Sisanya bisa dibaca sendiri <a href="http://naruto.wikia.com/wiki/Kakashi_Hatake">di sini</a>.</p>

<!--more-->


<blockquote><p>Hatake Kakashi adalah guru (sensei) dari Uzumaki Naruto dan Uchiha Sasuke, dua tokoh sentral dalam komik Naruto. Dia memiliki julukan <em>Copy Ninja Kakashi</em>, karena kemampuannya untuk mengamati, menganalisa, dan menirukan jurus yang digunakan lawannya hanya dengan sekali lihat saja. Karena kemampuan khusus ini, lawannya menjadi serba salah. Mengeluarkan jurus andalan, resikonya dicuri dan digunakan melawan dia sendiri. Tidak mengeluarkan jurus, ya sama saja menyediakan diri menjadi sansak berjalan.</p></blockquote>

<p>Penggunaan skill ini bisa dibaca di <a href="http://komikbaru.com/Naruto/015/7">Naruto episode 15</a> dimana Kakashi bertarung melawan Momochi Zabuza. Kakashi melihat, menganalisa, mempelajari, menirukan, dan kemudian menghajar Zabuza dengan jurusnya sendiri.</p>

<p>Seorang programmer harus mampu menguasai konsep dan teknik baru dengan cepat, seperti halnya Copy Ninja Kakashi.
Ini disebabkan karena pengetahuan teknis dalam pemrograman bisa kadaluarsa dalam waktu yang cepat. Contohnya, di tahun 2003, programmer Java menggunakan framework yang disebut EJB 2 dan Struts 1 untuk membuat aplikasi. Hanya dalam kurun waktu 2 tahun (tahun 2005), kedua teknologi tersebut sudah usang dan diganti dengan jargon baru yang disebut SOAP. Saat ini di tahun 2013, siapapun yang berani menyebut-nyebut EJB 2, Struts 1, ataupun SOAP, terancam diledek sebagai Pak Tua ;) Di tahun 2013 ini, era-nya REST dan JavaScript. Entah apa lagi trend di masa depan.</p>

<p>Saya sendiri belajar banyak hal secara otodidak, diantaranya adalah pemrograman, fotografi, membaca Al Qur'an, bahkan kerajinan membuat gelang ;)</p>

<p><img src="/images/uploads/2013/08/otodidak/camera-strap.jpg" title="Camera Strap buatan sendiri" ></p>

<p>Saking sering mempelajari segala sesuatu secara otodidak, saya seringkali malas diajari orang lain. Belum tentu cara mengajar dan cara berpikirnya sesuai dengan kebutuhan saya. Orang lain biasanya tidak tahu <em>modal awal</em> kita, sehingga bisa jadi terlalu banyak memberikan materi pemula, atau sebaliknya mengasumsikan saya sudah tau banyak hal dan langsung saja ke topik advanced.</p>

<p><blockquote><p>I am always ready to learn although I do not always like being taught</p><footer><strong>Winston Churchill</strong> <cite><a href='http://www.brainyquote.com/quotes/quotes/w/winstonchu106394.html'></a></cite></footer></blockquote></p>

<p>Dalam hal belajar otodidak, hal yang paling penting kita kuasai adalah:</p>

<ol>
<li>Membuat jalur belajar (roadmap), mana yang duluan, mana yang belakangan</li>
<li>Menentukan metode latihan untuk menguasai konsep atau teknik tertentu</li>
<li>Melakukan kegiatan belajar (membaca / menonton) yang diperlukan sesuai langkah #2 sampai paham</li>
<li>Kalau langkah #3 tidak efektif, revisi metode latihan (kembali ke #2)</li>
<li>Begitu sudah dikuasai cepat-cepat diabadikan dalam bentuk tulisan atau pelatihan supaya tidak cepat lupa</li>
</ol>


<p>Satu hal penting lainnya, kita juga harus tahu sampai di mana batasnya kita bisa belajar otodidak. Belajar membaca Al Qur'an, tidak boleh 100% otodidak. Ada materi tertentu -misalnya <em>makhrajul huruf</em>- yang harus diverifikasi oleh orang yang kompeten. Ini disebabkan karena Al Qur'an diwariskan secara lisan, bukan tulisan. Sehingga teknik membacanya harus dicek secara lisan juga apakah sudah benar atau belum. Selain itu, ilmu membaca Al Qur'an merupakan suatu ilmu yang harus jelas sanadnya. Teknik yang kita gunakan harus bisa ditelusuri asal-usulnya sampai ke Rasulullah SAW. Walaupun demikian, belajar otodidak dapat digunakan supaya kita tidak terlalu merepotkan guru kita.</p>

<p>Langkah #1 dan #2 juga penting apabila kita menjadi mengajari orang lain baik sebagai instruktur, guru, atau dosen. Pengajar yang baik mampu mendefinisikan urutan belajar dan metode latihan yang cocok untuk setiap muridnya. Contohnya, lagi-lagi dari komik Naruto, kita lihat bagaimana Kakashi membuatkan metode latihan untuk kontrol chakra pada Naruto, Sasuke, dan Sakura <a href="http://komikbaru.com/Naruto/018/2">di episode 18</a>. Lihat juga bagaimana Sensei Jiraiya memberikan latihan khusus untuk Naruto <a href="http://komikbaru.com/Naruto/150/16">di episode 150</a>.</p>

<p>Mari kita bahas satu persatu.</p>

<h2>Membuat Roadmap</h2>

<p>Langkah pertama yang harus kita lakukan adalah memetakan topik yang akan kita pelajari. Mana yang termasuk pengetahuan dasar (fundamental), mana yang tingkat menengah, mana yang tingkat lanjut. Kita juga harus menentukan urutan penguasaan materi. Sebagai contoh, untuk bisa memahami penggunaan framework Hibernate, kita harus paham dulu konsep SQL dan database relasional. Untuk bisa memahami <a href="http://www.infoq.com/minibooks/JTDS">berbagai strategi transaction dalam Java EE</a>, kita harus paham dulu <a href="http://software.endy.muhardin.com/java/database-transaction/">apa itu database transaction</a>.</p>

<p>Jalur untuk belajar Java sudah saya tuliskan di beberapa artikel:</p>

<ul>
<li><a href="http://software.endy.muhardin.com/java/road-to-java-se/">Java Fundamental</a>.</li>
<li><a href="http://software.endy.muhardin.com/java/road-to-java-ee/">Java EE</a></li>
</ul>


<p>Bila kita ikut kursus, sekolah, atau kuliah, dosen yang kompeten sudah membuatkan jalur belajar ini sehingga peserta tinggal mengikutinya. Tapi bila kita ingin belajar secara otodidak, kita harus memiliki kemampuan untuk membuat jalur ini sendiri.</p>

<blockquote><p>Bagaimana cara membuat roadmap belajar?</p></blockquote>

<p>Pertama, kita kumpulkan dulu semua materi yang berkaitan dengan topik yang ingin kita pelajari. Sebagai contoh, pada waktu saya belajar fotografi, semua artikel dan video yang berhasil saya kumpulkan saya masukkan ke <a href="https://springpad.com/#!/endy.muhardin/notebooks/belajarfotografi/blocks">Springpad</a>.</p>

<p>Materi ini tidak perlu dibaca/ditonton semua. Pada tahap ini kita hanya mengumpulkan dan mengelompokkan. Biasanya saya hanya membaca/menonton sedikit bagian di awal, tengah, dan akhir saja. Dari hasil skimming ini, saya kelompokkan menjadi materi dasar, menengah, dan lanjut. Untuk materi fotografi, hasil pengelompokannya bisa dilihat <a href="https://springpad.com/#!/endy.muhardin/notebooks/belajarfotografi/blocks/note/learningpath">di sini</a>.</p>

<p>Beberapa pertimbangan dalam membuat roadmap:</p>

<ul>
<li>urutan penguasaan materi. Misalnya sebelum Hibernate, harus paham JDBC dulu. Sebelum Spring MVC harus paham Servlet dan JSP dulu.</li>
<li>tingkat kompleksitas materi. Materi tingkat lanjut biasanya baru bisa dipahami dengan menggabungkan konsep-konsep tingkat dasar. Contohnya untuk bisa memahami <code>@Transactional</code>, kita harus paham dulu <a href="http://software.endy.muhardin.com/java/database-transaction/">konsep umum database transaction</a>, <a href="http://www.infoq.com/minibooks/JTDS">apa itu distributed transaction dan berbagai strategi penggunaannya</a>, baru kemudian terakhir <a href="http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/transaction.html">bagaimana cara pakainya dalam kode program</a>.</li>
<li>urutan dan pengelompokan ini tidak bersifat final. Sepanjang perjalanan kita belajar, kita akan beberapa kali mengoreksi sudut pandang kita, mengubah prioritas mana yang penting mana yang tidak, dan juga mengubah pemahaman kita terhadap suatu konsep. Pada waktu itu terjadi, jangan sungkan untuk merevisi roadmap. Toh ini kita buat untuk diri sendiri, ya bebas saja kalau mau diubah kapanpun. Ini adalah hal yang normal.</li>
</ul>


<h2>Menentukan Metode Latihan</h2>

<p>Selain konsep di atas, kita juga perlu menentukan latihan yang dibutuhkan. Contohnya seperti ini:</p>

<ol>
<li><p>Memahami akses database Java menggunakan JDBC</p>

<ul>
<li>membuat koneksi database</li>
<li>memasukkan data ke dalam database (insert)</li>
<li>mengubah data dalam database (update)</li>
<li>mengambil data dari database (select)</li>
<li>menghapus data dalam database (delete)</li>
</ul>
</li>
<li><p>Memahami fitur aplikasi web Java</p>

<ul>
<li>menangani request terhadap URL tertentu</li>
<li>menerima variabel melalui HTTP GET</li>
<li>menerima variabel melalui HTTP POST</li>
<li>implementasi login menggunakan HTTP Session dan Filter</li>
<li>membuat inisialisasi aplikasi web menggunakan Listener</li>
<li>upload/download file</li>
</ul>
</li>
</ol>


<p>Kalau kita tidak otodidak, melainkan kursus, sekolah, atau kuliah, pengajar sudah membuatkan daftar latihan ini buat kita.
Kita tinggal ikuti. Masalahnya adalah, metode latihan yang dibuatkan pengajar biasanya disesuaikan untuk kebutuhan orang banyak dari berbagai latar belakang. Kadang cocok dengan kita, kadang tidak cocok. Bila kita otodidak, kita bisa menentukan metode latihan yang sesuai dengan kebutuhan kita.</p>

<p>Bila kita ingin menjadi pengajar, kita juga harus bisa melihat karakteristik murid dan membuatkan metode latihan yang cocok dengan murid tersebut. Dalam komik Naruto, ini dicontohkan Sensei Jiraiya <a href="http://komikbaru.com/Naruto/092/13">di episode 92</a>, pada waktu dia membuatkan latihan khusus sesuai bakat Naruto.</p>

<p>Yang perlu diperhatikan dalam menentukan metode latihan adalah tujuan dari suatu latihan. Setiap kegiatan yang kita lakukan harus memiliki tujuan akhir, yaitu pemahaman konsep tertentu atau penguasaan teknik tertentu.</p>

<p>Latihan yang kita rancang haruslah mencukupi, tapi tidak berlebihan. Jangan sampai dalam latihan untuk menguasai materi Z, kita terpaksa melakukan semua kegiatan dari A sampai Y. Contohnya, bila kita ingin menguasai Hibernate, tidak perlu membuat tampilan desktop/web secara lengkap. Cukup method <code>public static void main</code> saja dengan data yang dihardcode, dibuat kode programnya sampai bisa masuk ke tabel database.</p>

<p>Hal lain yang juga penting, kita tidak perlu menyusun program latihan sampai materi tingkat lanjut. Kenapa begitu? Karena pada waktu kita baru mulai di tingkat dasar, tentu kita belum paham materi tingkat lanjut, sehingga belum tau metode latihan yang sesuai dengan materi tersebut. Kalaupun dipaksakan, hasilnya tidak akan bagus dan kemungkinan besar pasti akan direvisi lagi di tengah jalan. Jadi daripada dua kali kerja, lebih baik tidak usah dikerjakan dulu sebelum waktunya.</p>

<p>Sama seperti urutan materi, jangan ragu untuk merevisi program latihan di tengah jalan.</p>

<h2>Belajar dan Berlatih</h2>

<p>Setelah urutan belajar dan daftar latihan kita susun, kita harus luangkan waktu untuk melakukannya dengan benar sampai ke tujuan. Artinya, setelah membaca artikel tertentu dan melakukan program latihan tertentu, pastikan bahwa kita menguasai konsep dan teknik yang kita tuju. Bila masih belum paham konsepnya, atau belum mahir tekniknya, ulangi atau revisi program latihannya.</p>

<p>Beberapa latihan yang saya lakukan dapat dilihat di repository Github saya, misalnya:</p>

<ul>
<li><a href="https://github.com/endymuhardin/belajar-restful">belajar-restful</a> : latihan untuk memahami arsitektur <a href="http://en.wikipedia.org/wiki/Representational_state_transfer">REST</a></li>
<li><a href="https://github.com/endymuhardin/belajar-sip">belajar-sip</a> : latihan untuk memahami <a href="http://en.wikipedia.org/wiki/Session_Initiation_Protocol">Session Initiation Protocol</a> menggunakan Java</li>
<li><a href="https://github.com/endymuhardin/belajar-akses-database-java">belajar-akses-database-java</a> : latihan untuk memahami berbagai metode akses database</li>
<li><a href="https://github.com/endymuhardin/belajar-spring-android">belajar-spring-android</a> : latihan untuk memahami struktur project aplikasi Android dengan Maven</li>
<li><a href="https://github.com/endymuhardin/belajar-velocity-textoutput">belajar-velocity-textoutput</a> : latihan untuk menguasai penggunaan library <a href="http://velocity.apache.org">Velocity</a> untuk membuat cetakan printer dot matrix</li>
<li><a href="https://github.com/endymuhardin/belajar-ssl">belajar-ssl</a> : latihan untuk memahami konfigurasi SSL</li>
<li><a href="https://github.com/endymuhardin/belajar-auditlog">belajar-auditlog</a> : latihan untuk menguasai library <a href="http://www.jboss.org/envers">Hibernate Envers</a>, library untuk membuat history perubahan database</li>
<li><a href="https://github.com/endymuhardin/belajar-spring-integration">belajar-spring-integration</a> : latihan untuk menguasai library <a href="http://www.springsource.org/spring-integration">Spring Integration</a></li>
<li><a href="https://github.com/endymuhardin/belajar-spring-data-jpa">belajar-spring-data-jpa</a> : latihan untuk menguasai library <a href="http://www.springsource.org/spring-data/jpa">Spring Data JPA</a></li>
<li><a href="https://github.com/endymuhardin/belajar-spring-security">belajar-spring-security</a> : latihan untuk menguasai library <a href="http://www.springsource.org/spring-security">Spring Security</a></li>
<li><a href="https://github.com/endymuhardin/belajar-jmf">belajar-jmf</a> : latihan untuk mencoba fitur <a href="http://www.oracle.com/technetwork/java/javase/tech/index-jsp-140239.html">Java Media Framework</a></li>
<li><a href="https://github.com/endymuhardin/belajar-software-testing">belajar-software-testing</a> : latihan untuk mencoba software testing dengan Maven</li>
<li><a href="https://github.com/endymuhardin/belajar-ws">belajar-ws</a> : latihan untuk mencoba berbagai teknik dan framework <a href="http://en.wikipedia.org/wiki/SOAP">SOAP</a></li>
<li><a href="https://github.com/endymuhardin/belajar-extjs">belajar-extjs</a> : latihan untuk memahami framework javascript <a href="http://www.sencha.com/products/extjs">ExtJS</a></li>
<li><a href="https://github.com/endymuhardin/belajar-css">belajar-css</a> : latihan untuk memahami CSS, berguna untuk yang sama sekali belum tau apa itu CSS</li>
<li><a href="https://github.com/endymuhardin/belajar-spring">belajar-spring</a> : latihan untuk memahami cara penggunaan <a href="http://www.springsource.org/spring-framework">Spring Framework</a></li>
<li><a href="https://github.com/endymuhardin/belajar-servlet">belajar-servlet</a> : latihan untuk memahami fundamental aplikasi web dalam Java</li>
<li><a href="https://github.com/endymuhardin/belajar-jsf">belajar-jsf</a> : latihan untuk memahami penggunaan framework <a href="http://www.oracle.com/technetwork/java/javaee/javaserverfaces-139869.html">JSF</a></li>
<li><a href="https://github.com/endymuhardin/belajar-jpos">belajar-jpos</a> : latihan untuk memahami penggunaan library <a href="http://jpos.org/">JPos</a> untuk menangani message <a href="http://en.wikipedia.org/wiki/ISO_8583">ISO-8583</a></li>
</ul>


<p>Dari latihan yang sekian banyak, kita bisa melihat bahwa tidak ada yang instan di dunia ini. Untuk menguasai berbagai hal secara otodidak, kita harus mencoba dengan tangan sendiri sampai paham. Pantau terus koleksi repository saya untuk mengamati bagaimana proses belajar saya. Semua repository yang diawali dengan nama <code>belajar-</code> adalah repository latihan yang saya buat untuk memahami sesuatu.</p>

<h2>Menulis dan Mengajar</h2>

<p><blockquote><p>If you can't explain it simply, you don't understand it well enough.</p><footer><strong>Albert Einstein</strong> <cite><a href='http://blog.ampli.com/2012/03/albert-einstein-quotes-education-15-of.html'>blog.ampli.com/2012/03/&hellip;</a></cite></footer></blockquote></p>

<p>Salah satu kelemahan saya dalam urusan belajar adalah easy come easy go. Setelah puluhan tahun belajar macam-macam hal secara otodidak, maka saya bisa belajar hal baru dalam waktu relatif singkat. Walaupun demikian, kapasitas otak manusia ternyata ada batasnya. Setiap kali saya mempelajari sesuatu yang baru, ada saja pengetahuan lama yang hilang. Contohnya, pada waktu saya belajar Linux dan networking, pengetahuan akuntansi saya memudar. Demikian juga setelah lama berfokus di pemrograman Java, konsep dan perintah aplikasi <code>iptables</code> (aplikasi firewall di Linux) yang dulu saya hafal, saya lupa semua.</p>

<p>Untuk mengatasi masalah tersebut, ada beberapa cara yang saya lakukan:</p>

<ol>
<li>Sering menggunakan konsep dan teknik yang dimaksud. Sebagai contoh, supaya saya tidak lupa <a href="http://software.endy.muhardin.com/linux/backup-home-folder/">cara menggunakan rsync</a>, saya selalu menggunakannya untuk copy file dari laptop ke komputer lain atau ke harddisk external.</li>
<li>Mencatatnya di blog. Perintah <code>iptables</code> adalah sesuatu yang jarang saya pakai, karena sebagai orang normal, saya tidak mengkonfigurasi firewall setiap hari. Bahkan belum tentu saya lakukan sebulan sekali. Agar tidak lupa, pemakaian yang sering saya gunakan seperti <a href="http://software.endy.muhardin.com/linux/network-address-translation/">internet connection sharing</a> dan <a href="http://software.endy.muhardin.com/linux/setup-proxmox-dengan-1-ip-public/">port forwarding</a> saya tuliskan di blog. Demikian juga halnya untuk <a href="http://software.endy.muhardin.com/aplikasi/memasang-sertifikat-ssl/">cara konfigurasi SSL</a>.</li>
<li>Mengajarkannya pada orang lain. Ini adalah salah satu alasan mengapa saya mengajar di Universitas Pancasila dan berbagai pelatihan. Dengan mengajar, saya memperdalam pengetahuan saya tentang materi yang diajarkan, dan juga mencegah supaya tidak lupa.</li>
</ol>


<p>Demikianlah penjelasan tentang otodidak. Skill ini adalah salah satu solusi untuk mengatasi beratnya perjuangan di dunia IT seperti dibahas <a href="http://www.halfsigma.com/2007/03/why_a_career_in.html">di artikel ini</a>. Ada solusi lain yaitu menguasai konsep, bukan teknis implementasi yang bisa dibaca di <a href="(http://software.endy.muhardin.com/life/lan-na-zha/">artikel berikutnya</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wirausaha]]></title>
    <link href="http://software.endy.muhardin.com/life/wirausaha/"/>
    <updated>2008-07-04T18:01:08+07:00</updated>
    <id>http://software.endy.muhardin.com/life/wirausaha</id>
    <content type="html"><![CDATA[<p>Tiga bulan yang lalu, tepatnya Februari 2008, saya membuat keputusan signifikan sepanjang kehidupan saya.
Yaitu berpindah sisi meja, dari menerima gaji, menjadi memberi gaji alias mendirikan perusahaan sendiri. Padahal kantor tempat saya bekerja merupakan perusahaan terkenal, posisi saya strategis dan menantang, dan lingkungan kerjanya menyenangkan.</p>

<p>Perubahan ini, terutama bagi mereka yang sudah cukup lama bekerja di perusahaan dan sudah berkeluarga, merupakan hal yang menakutkan.
Pada waktu kita masih single, kalau ada kesulitan keuangan, yang menderita cukup diri sendiri saja. Sedangkan bila kita sudah berkeluarga, bokek bisa berakibat fatal bagi istri dan anak. Saya pernah mengalami masa melarat dulu di Surabaya sekitar tahun 2001-2002. Saking bokeknya, kami (saya dan teman-teman serumah) tidak punya uang untuk membeli lauk. Hanya ada nasi. Akhirnya, kami memetik daun kelor yang tumbuh di pekarangan dan merebusnya sebagai teman nasi. Jika ada yang memiliki ilmu kebatinan, pasti akan luntur seketika :p. Setelah berkeluarga, tentunya kita ingin memastikan bahwa jangan sampai anggota keluarga kita terpaksa makan sayur daun kelor.</p>

<p>Tidak sedikit teman-teman yang bertanya bagaimana cara melakukan peralihan dari karyawan menjadi wirausahawan dengan mulus. Yah, saat ini saya juga masih belum menjadi pengusaha sukses. Masih berjuang. Tapi ada sedikit pengalaman yang bisa saya ceritakan pada mereka-mereka yang ingin mengikuti jejak saya.</p>

<p>Di jaman serba sulit seperti ini, akan lebih baik jika kita bisa mandiri menciptakan lapangan pekerjaan sendiri. Jadi, semakin banyak pengusaha, semakin cepat Indonesia akan bangkit dari keterpurukan nasional.</p>

<p>Kerja kantoran dulu kemudian buka usaha sendiri berbeda dengan lulus sekolah dan langsung buka usaha. Masing-masing ada plus-minusnya.</p>

<p>Jika kita langsung buka usaha, kita biasanya akan:</p>

<ul>
<li><p>terbiasa dengan kondisi finansial yang tidak menentu. Kadang kaya raya, kadang melarat.</p></li>
<li><p>memiliki jiwa sales (ini adalah karakteristik penting yang akan saya bahas lebih lanjut nanti)</p></li>
<li><p>berorientasi hasil, bukan jam kerja</p></li>
<li><p>miskin pengalaman, sehingga usaha sulit maju</p></li>
</ul>


<p>Sebaliknya, bila kita jadi karyawan dulu, biasanya kita:</p>

<ul>
<li><p>terbiasa gajian di akhir bulan dengan jumlah fixed.</p></li>
<li><p>naluri pemburu kurang terasah, kecuali yang bekerja di lini penjualan</p></li>
<li><p>berorientasi jam kerja, lewat jam kantor masih kerja, hitung lembur</p></li>
<li><p>sudah mengenal sistem birokrasi kantoran dengan hirarki kekuasaan dan wewenang</p></li>
<li><p>terbiasa dengan prosedur yang baku (bila bekerja di perusahaan yang rapi)</p></li>
</ul>


<p>Masing-masing starting-position memiliki plus minusnya. Yang akan kita bahas sekarang adalah start dari posisi karyawan. Mungkin lain waktu kita akan bahas tentang start langsung jadi pengusaha.</p>

<p>Untuk bisa beralih dengan mulus, ada beberapa persiapan terutama dari aspek pola pikir dan gaya hidup.</p>

<p>Pola pikir yang dibutuhkan adalah:</p>

<ul>
<li><p>Orientasi terhadap hasil</p></li>
<li><p>Sense of urgency</p></li>
<li><p>Kepekaan terhadap peluang</p></li>
</ul>


<p>Sedangkan gaya hidup yang dibutuhkan adalah:</p>

<ul>
<li><p>Multiple Stream of Income (MSI).</p></li>
<li><p>Aktif di komunitas, baik fisik maupun maya.</p></li>
</ul>


<p>Mari kita bahas satu persatu.</p>

<h3>Orientasi Hasil</h3>

<p>Bila kita menjadi karyawan swasta --apalagi di industri IT--, kita sulit untuk santai. Selalu ada atasan yang memantau kinerja kita. Terlihat chatting atau browsing, pasti akan langsung diajak diskusi mengenai pemanfaatan jam kerja yang efisien. Dengan demikian, performa kita akan selalu kinclong, karena dimonitor dan diingatkan sepanjang waktu.</p>

<p>Lain halnya bila kita menjadi wirausahawan. Tidak ada lagi atasan yang memantau kinerja kita dan mengingatkan bila kita mulai tidak fokus. Mau berpola hidup PNS, monggo. Mau sampai di kantor jam 11 pulang jam 14, silahkan.</p>

<p>Ini merupakan tantangan bagi kita. Kita harus memacu diri sendiri untuk menghasilkan sesuatu. Bila kita programmer, harus menghasilkan kode program. Bila kita instruktur pelatihan, harus menghasilkan modul pelatihan dan slide presentasi. Tanpa orientasi terhadap hasil, dapur bisa berhenti ngebul.</p>

<h3>Sense of Urgency</h3>

<p>Mirip dengan orientasi hasil, di lingkungan karyawan kita memiliki atasan yang rajin menagih hasil kerja kita. Setelah hasil kerja kita serahkan, biasanya akan diperiksa dulu sebelum kita berikan pada client.</p>

<p>Berbeda halnya bila kita berwirausaha. Bila kita tidak memiliki sense of urgency, semua delivery ke client akan terlambat dan berkualitas rendah, karena tidak ada yang menagih dan memeriksa pekerjaan kita.</p>

<p>Kedua hal ini, orientasi hasil dan sense of urgency sepintas nampak seperti hal sepele dan sudah menjadi kondisi yang umum. Tapi walaupun ini terkesan common sense, tapi ternyata sangat berat dilakukan tanpa adanya atasan yang mengawasi. Penguasaan kita terhadap dua hal ini akan menentukan apakah kita bermental bos atau karyawan. Tanpa kedua hal ini, walaupun kita menjadi karyawan, sulit untuk meningkatkan karir di kantor.</p>

<h3>Kepekaan terhadap peluang</h3>

<p>Sebagai karyawan, bila tidak berada di departemen business development, marketing, atau sales, biasanya kita tidak mampu mengenali peluang bisnis. Kepekaan terhadap peluang adalah suatu kemampuan yang harus dilatih terus menerus, mirip seperti kemampuan mendesain aplikasi.</p>

<p>Saat belum terlatih, kita tidak bisa melihat peluang bisnis, bahkan walaupun sudah disodorkan di depan mata. Berikutnya, kita bisa mengenali peluang, tapi belum bisa membedakan mana yang angin surga dan mana peluang betulan. Bila sudah mahir, kita bisa mengendus dari sekian banyak peluang, mana yang akan menghasilkan imbal hasil yang paling menguntungkan.</p>

<p>Inilah yang saya sebut di atas "memiliki jiwa sales". Sebagai pendiri perusahaan, tugas utama kita adalah mendatangkan bisnis ke dalam perusahaan. Menjadi seorang deal-maker. Bila perusahaan kita tidak mendapat project, karyawan tidak ada kerjaan, ini adalah tanggung jawab founder.</p>

<p>Tanpa kemampuan ini, perusahaan tidak akan jalan, tidak peduli sepintar apapun programmer yang dimiliki. No sales, no company.</p>

<h3>Multiple Stream of Income</h3>

<p>Sebagai karyawan yang loyal, biasanya kita hanya memiliki satu sumber penghasilan, yaitu gaji. Kondisi ini menyulitkan kita bila tiba-tiba ingin banting setir menjadi pengusaha. Seperti kita tahu, menjadi pengusaha penuh dengan ketidakpastian income. Kadang panen raya, kadang paceklik. Tidak ada bisnis yang terus menerus sukses. Bila Anda percaya ada bisnis yang tidak bisa gagal, hati-hati, bisa jadi Anda akan masuk koran sebagai investor blue energy yang ternyata palsu.</p>

<p>Untuk mengatasi perbedaan suasana ini, saya anjurkan untuk membiasakan diri mencari penghasilan tambahan di luar gaji. Setidaknya selama dua sampai tiga tahun, cobalah untuk mencari penghasilan diluar gaji. Tentunya dilakukan dengan <a href="http://endy.artivisi.com/blog/life/nyambi-bolehkah/">cara yang profesional dan etis</a>. Bila sumber penghasilan kita sudah lebih dari satu, maka kita sudah memiliki Multiple Stream of Income (MSI).</p>

<p>Ada beberapa keuntungan yang didapat dari MSI ini. Pertama, terutama bagi eks-karyawan, ini akan menghilangkan paradigma kita bahwa yang namanya penghasilan hanyalah dari gaji bulanan. Kedua, ini akan mengasah kepekaan kita terhadap peluang bisnis. Ketiga, ini akan melatih kita berorientasi hasil dan memiliki sense of urgency. Keempat, ini akan menambah keyakinan diri bahwa tanpa gaji rutin kita tetap bisa survive.</p>

<p>Saya sendiri sudah memiliki MSI sejak lulus kuliah. Dua tahun terakhir sebelum saya benar-benar berhenti jadi karyawan, saya mulai mencatat income saya, baik dari gaji maupun dari yang lainnya. Di akhir tahun pertama, proporsi pendapatan gaji dengan non-gaji berbanding 85:15. Di tahun kedua, proporsinya naik menjadi 65:35. Artinya, hanya dengan menggunakan 10-15% waktu, saya mampu menghasilkan 35% penghasilan tahunan saya.</p>

<p>Kemudian hal ini saya bicarakan dengan keluarga. Siapkah mereka hidup dengan hanya 35% saja dari income biasa? Tentunya dengan imbalan waktu yang lebih fleksibel untuk keluarga dan potensi penghasilan yang tidak terbatas.</p>

<p>Alhamdulillah keluarga saya menyatakan siap berjuang bersama. Saat ini, setelah lima bulan berjuang, rata-rata income saya sudah lebih dari gaji semasa kerja dulu. Tidak ada yang instan. Pada masa awal dulu, kami hidup prihatin dan mengencangkan ikat pinggang.</p>

<p>Paradigma MSI ini akan menjadi lebih penting setelah kita memiliki usaha sendiri. Bila kita mengerjakan project software development, harus selalu ada lebih dari satu project yang berjalan bersamaan. Bila kita mengadakan pelatihan, harus ada pemasukan dari sesi training, lisensi materi pelatihan, dan penjualan buku atau sampel kode program.</p>

<h3>Aktif di komunitas</h3>

<p>Rasulullah bersabda bahwa silaturahmi akan membuka pintu rejeki. Brian Tracy dan Robert Kiyosaki mengatakan bahwa aliran kas masuk berbanding lurus dengan komunikasi keluar. Hasilnya mungkin tidak terlihat langsung, tapi bisa terasakan dampaknya.</p>

<p>Di ArtiVisi, kita mengikuti filosofi tersebut. Saya dan Ifnu aktif mengisi blog dan berkontribusi di milis Java. Motif utamanya tentu saja sedekah ilmu dan mencari pahala. Kalau kemudian ada project yang datang dari komunitas, kami anggap itu sebagai bonus dan juga konsekuensi logis dari aktifitas tersebut.</p>

<p>Demikianlah sedikit sharing pengalaman mendirikan perusahaan baru. Masih panjang jalan yang harus ditempuh untuk membesarkan perusahaan yang baru seumur jagung ini. Di atas semua usaha, tentunya doa memiliki peranan yang paling penting.</p>

<p>Harapan saya, dengan artikel ini akan banyak pengusaha baru yang bisa membuka banyak lapangan kerja. Di satu sisi, banyak training centre dan software development company memang akan menambah saingan ArtiVisi. Tapi di sisi lain, kami jadi bisa berjualan lisensi materi pelatihan, project management training, dan consulting kepada para kompetitor.</p>

<p>Ayo jadi pengusaha !!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kandidat Java vs PHP]]></title>
    <link href="http://software.endy.muhardin.com/life/kandidat-java-vs-php/"/>
    <updated>2008-02-07T00:04:44+07:00</updated>
    <id>http://software.endy.muhardin.com/life/kandidat-java-vs-php</id>
    <content type="html"><![CDATA[<p>Disclaimer : kondisi dan pengalaman Anda SANGAT MUNGKIN BERBEDA.
Jadi jangan bilang saya salah ... ini pengalaman pribadi.
Pengalaman Anda boleh saja berbeda, dan sangat dianjurkan untuk sharing.</p>

<blockquote><p>Belakangan ini banyak yang nyari Programmer PHP yah :-d</p></blockquote>

<p>Demikian tanggapan moderator milis JUG-Indonesia.</p>

<p>Saya mau sharing pengalaman sedikit tentang rekrutasi ArtiVisi beberapa hari yang lalu.
Rate salary di lowongan kemarin itu 2-3 juta rupiah, looking for PHP Programmer.</p>

<p>Ternyata, dengan rate salary segitu, para kandidat sudah mampu 'melaju ke babak playoff'.
Begini maksudnya.</p>

<p>Kalau interview, saya selalu mengajukan pertanyaan yang makin lama makin sulit.
Job seeker, perhatikan ini, Endy's interview style.</p>

<ol>
<li>Urusan coding standar. Percabangan dan perulangan.
Misalnya:</li>
<li>tampilkan nama anda sebanyak jumlah hurufnya
kalau namanya Endy, tampilkan
endy endy endy endy
kalau namanya Dhiku, tampilkan
dhiku dhiku dhiku dhiku dhiku</li>
<li><p>dengan input bulan dan tahun, buat function/method untuk menghitung jumlah harinya</p></li>
<li><p>Lalu topik-topik populer</p></li>
<li>HTML syntax</li>
<li>Tableless layout with CSS</li>
<li>SQL Injection   3. Setelah itu masalah yang membutuhkan imajinasi, misalnya perbedaan pass by value dan pass by reference   4. Kalau masih lolos juga, matakuliah CS yang biasanya bikin ngantuk</li>
<li>Struktur Data</li>
<li>Algoritma tingkat menengah (tree, sorting, dsb)</li>
<li>Automata / Finite State Machine   5. Baru kemudian pertanyaan tentang wawasan</li>
<li>Primary Operating System, dan Secondary OS, yang biasa digunakan
Cuma pernah pakai Windows??? Hmm ... terima kasih atas waktunya, nanti akan saya hubungi lagi.
Tidak pernah pakai OS selain FreeBSD?? Hmm ... menarik juga ... mari kita tanya lebih lanjut, "Kamu sekolah TK di mana?"Saya pernah posting tentang kandidat ideal menurut saya <a href="http://endy.artivisi.com/blog/life/pengetahuan-wajib-buat-programmer/">di sini</a>.</li>
</ol>


<p>Lalu banyak yang berkomentar tentang betapa sulitnya persyaratan tersebut.</p>

<p>Nah ...kembali ke pertanyaan Joshua ... kenapa sekarang banyak cari PHP Programmer?</p>

<p>Well ... berdasarkan pengalaman saya, dengan tawaran 2-3 juta,
para kandidat programmer PHP ini umumnya mampu sampai pertanyaan 3.
Beberapa ada yang bisa jawab sampai nomer 4.
Belum ada yang sampai 5.</p>

<p>Bagaimana dengan koleganya, kandidat programmer Java?
Menyedihkan ....
Bahkan no 2 pun banyak yang gak bisa jawab.
Fresh graduate Java programmer, berdasarkan survei yang tidak serius dan tidak bisa dipertanggungjawabkan metodologinya, apalagi hasilnya, menyatakan bahwa mereka mengharapkan gaji setidaknya 3-4 juta.</p>

<p>Jadi ... kalau saya punya budget 3-4 juta, lalu buka lowongan, bandingkan apa yang akan saya peroleh.</p>

<p><em>PHP Programmer</em></p>

<ul>
<li>Berpengalaman 2-3 tahun, sudah tahu sopan santun kerja di kantor</li>
<li>Bisa HTML</li>
<li>Bisa CSS, lengkap dengan div, span, bisa bikin table-less layout</li>
<li>Bisa AJAX, low level lagi pakai prototype.js atau whatever library JavaScript yang sedang trend</li>
<li>Ngerti konsep HTTP request-response, session, cookie, upload file, dan urusan remeh-temeh HTTP lainnya</li>
<li>Kalau beruntung, mungkin bisa dapat yang ngerti SOAP segala</li>
<li>Hey, 4 juta cukup mahal ... coba kita lihat mungkin dia ngerti Photoshop juga :D</li>
</ul>


<p><em>Java Programmer</em>  * Fresh graduate, masih bergaya mahasiswa
* Ngerti HTML seadanya, belum tentu ngerti perilakunya frameset
* Gak bisa CSS, apalagi table-less layout
* Forget about AJAX
* Forget about low-level HTTP, servlet mapping di web.xml aja belum tentu ngerti
* SOAP?? Buat mandi??
* Photoshop atau Corel Draw .. hmm .. itu kan kerjaannya Web Designer. Saya gak ikut-ikut.</p>

<p>Nah .... lalu apa pesan moral dari artikel ini?</p>

<ol>
<li>Freshmen Java harus lebih tahu diri. Kerjakan PR dulu baru apply. Dengan kondisi seperti di atas, saya lebih suka mempekerjakan PHP programmer lalu diajari Java</li>
<li>Industri PHP harus lebih mengapresiasi komunitasnya</li>
<li>Sebagai company-owner, harus tahu kondisi di berbagai dunia</li>
</ol>

]]></content>
  </entry>
  
</feed>
