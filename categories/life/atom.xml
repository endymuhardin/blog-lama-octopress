<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: life | Living life and make it better]]></title>
  <link href="http://software.endy.muhardin.com/categories/life/atom.xml" rel="self"/>
  <link href="http://software.endy.muhardin.com/"/>
  <updated>2014-04-08T16:33:23+07:00</updated>
  <id>http://software.endy.muhardin.com/</id>
  <author>
    <name><![CDATA[Endy Muhardin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Menjadi Mahasiswa Hi-Tech]]></title>
    <link href="http://software.endy.muhardin.com/life/menjadi-mahasiswa-hi-tech/"/>
    <updated>2014-03-09T20:22:00+07:00</updated>
    <id>http://software.endy.muhardin.com/life/menjadi-mahasiswa-hi-tech</id>
    <content type="html"><![CDATA[<p>Seperti sudah diceritakan pada <a href="http://software.endy.muhardin.com/java/silabus-kuliah-pemrograman/">posting sebelumnya</a>, saya sudah beberapa tahun ini mengajar di Universitas Pancasila. Total sudah lebih dari 6 kelas yang saya ajar. Kalau satu kelas saja isinya 30 orang, maka setidaknya ada 180 mahasiswa yang telah mengikuti perkuliahan saya.</p>

<p>Memperhatikan perilaku ratusan mahasiswa dalam mengikuti kuliah, saya menemui suatu kondisi yang ironis.</p>

<blockquote><p>Dari sekian banyak mahasiswa, tidak ada satupun yang mengikuti perkuliahan sesuai dengan kondisi jaman sekarang. Semuanya, tanpa terkecuali, masih kuliah seperti halnya saya kuliah di tahun 1997 dulu. Ya benar, selama 17 tahun tidak ada perubahan metodologi sama sekali.</p></blockquote>

<p>Padahal ini mahasiswa jurusan IT, yang sepatutnya menjadi yang terdepan dalam hal memahami dan memanfaatkan teknologi terkini. Mereka masih saja:</p>

<ul>
<li>mendengarkan saya berceloteh di depan kelas</li>
<li>mencatat celotehan saya dan gambar-gambar yang saya buat di papan tulis</li>
<li>pada saat mau ujian, belajar dari catatan tersebut</li>
</ul>


<p>Tidak sebanding dengan persenjataan masing-masing individu:</p>

<ul>
<li>Smartphone. Segelintir pakai iPhone, dan mayoritas pakai Android. Minimal Blackberry.</li>
<li>Internet Nonstop. Baik paket data dari smartphone maupun internet gratis dari kampus.</li>
<li>Sesi kuliah saya selalu diadakan di lab komputer. Masing-masing orang menghadapi PC di depan mukanya.</li>
</ul>


<blockquote><p>Nah, lalu bagaimana seharusnya??</p></blockquote>

<p>Ada beberapa poin yang seharusnya dilakukan mahasiswa jaman sekarang:</p>

<ol>
<li>Jangan mencatat</li>
<li>Tinggal di awan</li>
<li>Kolaborasi menggunakan social networking</li>
<li>Belajar dari internet</li>
</ol>


<blockquote><p>Waduh, tidak mencatat gimana mau ingat? Tidak bawa buku lalu mau menulis dimana? Bukannya orang bilang Facebook itu tidak produktif?</p></blockquote>

<p>Mari kita bahas..</p>

<!--more-->


<h2>Jangan Mencatat</h2>

<p>Urusan catat-mencatat ini kita bagi dua:</p>

<ul>
<li>pada saat kuliah teori</li>
<li>pada saat praktikum</li>
</ul>


<h3>Saat Kuliah</h3>

<p>Ada beberapa kerugian kalau kita mencatat selama sesi perkuliahan:</p>

<ul>
<li>tidak mengikuti penjelasan dosen secara penuh karena konsentrasi kita terbagi</li>
<li>tidak bisa mengabadikan materi 100%, karena kecepatan menulis kita jauh lebih lambat daripada kecepatan bicara dosen</li>
<li>untuk konten instruksional, seperti sesi <code>live coding</code> yang biasa saya lakukan di kelas, ada urut-urutan langkah yang sulit untuk ditangkap tulisan tangan</li>
</ul>


<p>Walaupun demikian, menulis itu tetap penting karena banyak manfaatnya:</p>

<ul>
<li>mengatasi faktor lupa. Apalagi pada masa kuliah kita mengikuti beragam perkuliahan. Kalau tidak dicatat, isi kuliah Pemrograman akan ludes begitu kita masuk kelas Basis Data.</li>
<li>kegiatan menulis ulang dengan kalimat sendiri dapat meningkatkan pemahaman kita. Ini sebabnya saya menulis blog.</li>
<li>kegiatan menulis juga bisa mengikat materi lebih kuat ke ingatan kita dibanding hanya mendengarkan saja.</li>
</ul>


<blockquote><p>Lalu bagaimana? Katanya jangan mencatat.</p></blockquote>

<p>Begini _best practices_nya:</p>

<ul>
<li>Kalau dosen menulis di papan tulis, jangan dicatat. Potret saja.</li>
<li>Selama sesi perkuliahan, nyalakan perekam suara untuk merekam omongan dosen.</li>
<li><p>Setelah selesai kuliah, investasikan waktu 30 menit untuk:</p>

<ul>
<li>mengetik ulang materi kuliah dengan kata-kata kita sendiri</li>
<li>tambahkan dengan foto tulisan/diagram yang digambar dosen di papan tulis</li>
<li>bila ada hal-hal yang kurang jelas, segera lengkapi <a href="http://software.endy.muhardin.com/aplikasi/teknik-menggunakan-google/">dengan bantuan Google</a>.</li>
</ul>
</li>
</ul>


<p>Dengan demikian, kita bisa mendapatkan segala keuntungan menulis tanpa terkena kerugian karena menulis selama sesi kuliah. Intinya, pisahkan kegiatan menulis (yang berguna untuk memperjelas pemahaman dan mengikat materi di otak) dengan kegiatan merekam penjelasan dosen.</p>

<blockquote><p>Sulitkah melakukan hal tersebut di atas?</p></blockquote>

<p>Sama sekali tidak. Lihat daftar persenjataan yang saya jabarkan di atas. Smartphone termurah sekalipun (harga 1 juta ke bawah BNIB) sudah mampu memotret dan merekam suara. Tambahkan budget sekitar 300 ribu untuk memory card berkapasitas 32GB. Sebagai gambaran, rekaman suara 60 menit ukuran filenya 60MB. Dengan 32 GB, kita bisa menampung 500 jam celotehan dosen :D Ok lah kita bagi dua menjadi 200 jam, karena separuhnya kita pakai untuk foto papan tulis. Kalau satu foto ukurannya 4MB, maka kita punya space untuk 4000 foto. Cukuplah untuk satu semester.</p>

<h3>Saat Praktikum</h3>

<p>Pada sesi praktikum, biasanya tidak ada penjelasan dosen atau asisten. Mahasiswa diberikan tugas untuk dikerjakan. Kadangkala dilengkapi dengan instruksi atau tutorial. Bagi mahasiswa pemrograman, selama praktikum tentu akan disuruh coding. Untuk mata kuliah jaringan, kadangkala disuruh setting server. Apapun itu, untuk menyelesaikan tugas praktikum biasanya dibutuhkan beberapa langkah pengerjaan menggunakan komputer.</p>

<blockquote><p>Lalu apa yang dicatat?</p></blockquote>

<p>Ya tentu saja langkah demi langkah penyelesaian tugas. Ambil screenshot tiap langkah, kemudian pasang di aplikasi <em>word processor</em> seperti Microsoft Word atau Libre Office Writer. Kalau mau lebih canggih, gunakan format Markdown seperti <a href="http://software.endy.muhardin.com/aplikasi/membuat-dokumen-dengan-markdown-dan-pandoc/">yang saya jelaskan di sini</a>. Bingung bagaimana format pencatatannya? Silahkan ikuti contoh <a href="http://software.endy.muhardin.com/aplikasi/teknik-menggunakan-google/">tulisan saya tentang penggunaan Google</a>.</p>

<p>Selain menggunakan <em>word processor</em>, kita juga bisa rekam kegiatan kita di komputer selama sesi praktikum. Kalau sudah ada rekaman, kapan saja perlu tinggal kita tonton ulang. Bonus point kalau setelah praktikum rekaman <em>screencast</em> tersebut kita dubbing untuk menambahkan penjelasan suara. Contohnya bisa dilihat di <a href="http://www.youtube.com/user/artivisi">berbagai video tutorial ArtiVisi di Youtube</a>.</p>

<h3>Tools dan Aplikasi</h3>

<p>Pengguna Ubuntu bisa menggunakan aplikasi <a href="http://shutter-project.org/">Shutter</a> untuk mengambil <em>screenshot</em> dan <a href="http://recordmydesktop.sourceforge.net/about.php">RecordMyDesktop</a> untuk merekam <em>screencast</em>. Bila ingin men-<em>dubbing</em> screencast, rekam dulu penjelasannya pakai smartphone, kemudian gabungkan audio dan video dengan aplikasi <a href="http://www.openshot.org/">OpenShot</a>.</p>

<p>Bagi mereka yang di jaman merdeka ini masih saja terkurung di balik jendela, bisa menggunakan aplikasi <a href="http://www.techsmith.com/snagit.html">SnagIt</a> untuk membuat screenshot, dan <a href="http://www.techsmith.com/camtasia.html">Camtasia</a> untuk membuat screencast.</p>

<blockquote><p>Ok pak. Saya sudah mencatat di luar sesi kuliah menggunakan <em>word processor</em>, tidak lagi pakai buku dan pulpen. Berarti saya kemana-mana harus bawa flashdisk dong?</p></blockquote>

<p>Tidak perlu. Kan sekarang trend-nya tinggal di awan ;)</p>

<h2>Tinggal di Awan</h2>

<p>Jaman sekarang, orang berlomba-lomba menyediakan <em>cloud services</em>. Ada 4shared, Dropbox, Youtube, Github, Twitter, Facebook, dan sebagainya. Kita harus manfaatkan layanan gratis ini semaksimal mungkin. Kasihan yang bikin, udah susah-susah bikinnya, kita tinggal pake aja gak mau :D</p>

<p>Ada beberapa layanan yang saya gunakan, yaitu:</p>

<ul>
<li>Youtube: untuk mengupload hasil screencast. Silahkan <a href="http://www.youtube.com/user/artivisi">tonton dan subscribe</a>.</li>
<li><a href="http://springpad.com">Springpad</a>. Ini adalah layanan untuk membuat catatan. Kita bisa membuat catatan, mengupload foto pada catatan tersebut, bahkan sampai membuat buku. Springpad ini saya gunakan selama sesi training. Semua penjelasan saya catat di situ, kemudian saya share ke peserta training. Dengan demikian mereka tidak perlu mencatat dan saya tidak perlu mengirim email berisi catatan. Halaman SpringPad saya bisa <a href="https://springpad.com/#!/endy.muhardin">diakses di sini</a>. Ada beberapa notebook yang aksesnya public sebagai referensi.</li>
<li>Github. Ini adalah social networking buat programmer. Halaman Github saya bisa diakses <a href="https://github.com/endymuhardin/">di sini</a>. Lihat juga <a href="https://github.com/endymuhardin?tab=repositories">daftar repository</a>. Materi kuliah, tugas praktikum, dan sample source code saya posting di sana. Sebagai contoh, <a href="https://github.com/endymuhardin/materi-kuliah-java-2014-02/blob/master/materi-kuliah/01.maven.md">ini adalah penjelasan tentang Maven</a>. Lihat juga history commit untuk mengetahui <a href="https://github.com/endymuhardin/belajar-akses-database-java/commits/master">langkah-langkah membuat suatu program</a>.</li>
</ul>


<blockquote><p>Saya kan baru mahasiswa pak. Tidak perlu bikin akun Github gpp ya?</p></blockquote>

<p>Nah, kalau kamu mahasiswa saya, wajib punya. Saya cuma terima pengumpulan tugas via Github. Udah gak jaman mahasiswa <em>ngejunk</em> di inbox saya mengirim file <code>*.rar</code> atau <code>*.zip</code>. Tanpa akun Github, nilai tugas kamu nol.</p>

<p>Kalau bukan mahasiswa saya ya terserah saja. Satu hal yang perlu diingat. Github itu adalah portfolio kamu sebagai programmer. Modal utama programmer dalam mencari kerja. Di situ kamu menunjukkan apa yang bisa dan pernah kamu buat. Rekruter jaman sekarang juga sudah canggih. Memanggil orang interview itu buang waktu, tenaga, dan biaya. Akan jauh lebih cepat mudah dan murah untuk langsung saja melihat isi repo Github. Dalam 5 menit udah ketahuan kandidat tersebut bisa apa saja dan sejauh mana kompetensinya.</p>

<p>Setelah tinggal di awan, jangan introvert. Mari kita bersosialisasi.</p>

<h2>Kolaborasi di Socmed</h2>

<p>Jaman dulu, orang diskusi di milis. Jaman sekarang milis sudah mulai sepi. Pindah ke Facebook. Ada beberapa forum Facebook yang saya ikuti, diantaranya:</p>

<ul>
<li><a href="https://www.facebook.com/groups/ForumJavaIndonesia/">Forum Java Indonesia</a></li>
<li><a href="https://www.facebook.com/groups/netbeans.id/">Netbeans Indonesia</a></li>
<li><a href="https://www.facebook.com/groups/aprogsi/">Asosiasi Programmer Indonesia</a></li>
</ul>


<p>Silahkan tanya di situ dan mention saya. Insya Allah ditanggapi kalau lagi tidak sibuk. Perlu diingat, <a href="http://software.endy.muhardin.com/java/tips-melaporkan-error/">buatlah pertanyaan yang bagus, karena kita programmer bukan dukun</a>.</p>

<p>Bila grup di atas terlalu ramai, silahkan buat baru. Gratis kok. Bahkan <a href="https://www.facebook.com/groups/processor.kaspersky.engineers/">siswa asuhan ArtiVisi di SMKN 10 Jakarta saja punya grup Facebook</a>, masa mahasiswa kalah. Di grup tersebut, siswa SMKN 10 diskusi tentang tugas yang diberikan gurunya. Gurunya juga ikut dalam grup sehingga bisa ditanya-tanyai.</p>

<p>Di panel kanan blog ini, ada juga <a href="http://twitter.com/endymuhardin">kontak Twitter saya</a>. Silahkan mention kalau mau tanya-tanya.</p>

<p>Facebook diblokir di kantor? Masih ada grup BBM atau Whatsapp. Pakailah buat diskusi masalah pemrograman, jangan buat gosip artis atau politikus aja ;)</p>

<h2>Belajar dari Internet</h2>

<p>Bapak menteri kita pernah bertanya,</p>

<blockquote><p>Memangnya kalau internet kenceng, mau dipake apa??</p></blockquote>

<p>Setelah membaca artikel ini sampai di sini, kamu sekarang bisa menjawab dengan yakin.</p>

<blockquote><p>Buat belajar pak !! Saya akan donlod semua video tutorial di Youtube. Saya copy ke smartphone saya. Tiap ada waktu luang, misalnya ngantri di ATM, selama kegencet di commutter line, kena macet di angkot, saya akan tonton tutorial tersebut. Insya Allah saya bisa cepet pinter pak, biar bisa gantiin Bapak ngeberesin internet Indonesia ;)</p></blockquote>

<p>Banyak sekali materi pelajaran di internet. Mau <a href="http://irlnathan.github.io/sailscasts/blog/archives/">belajar NodeJS dan SailsJS</a> ada. Mau <a href="http://www.youtube.com/user/SpringSourceDev">belajar Spring Framework</a> ada. Mau <a href="http://www.youtube.com/user/adoramaTV">belajar fotografi</a> ada.</p>

<h2>Modal</h2>

<blockquote><p>Wah, dengan segala macam teknologi di atas, pasti modalnya mahal ya Pak? Saya mahasiswa cekak, bokek, pas-pasan.</p></blockquote>

<p>Tidak juga. Ini cuma masalah prioritas dan kesungguhan aja. Coba kita hitung-hitungan.</p>

<p>Pertama, kita beli smartphone dulu. Untuk gampangnya, saya buka <a href="http://www.bhinneka.com/aspx/products/smart-phone-android.aspx">Bhinneka.com, masuk ke menu Smart Phone Android</a>, dan urutkan dari yang termurah.</p>

<p><img src="https://lh3.googleusercontent.com/-6p2Qy-EfWc4/Uxx53-JnWiI/AAAAAAAAFao/tjF4qnRWTyw/w909-h533-no/01-modal-kuliah.png"></p>

<p>Lihat kan, dengan 800 ribu rupiah saja sudah dapat prosesor 1Ghz Dual Core, RAM 512MB, Internal Storage 4GB. Sebagai gambaran, waktu saya kuliah tahun 1997 dulu, komputer saya spec-nya 233Mhz single core, RAM 32MB, Harddisk 128MB. Smartphone? Stupidphone aja belum ada. Adanya ini nih</p>

<p><img src="/images/uploads/2013/10/teknik-menggunakan-google/pager.JPG" title="Pager" ></p>

<blockquote><p>Wah, saya gak punya uang 800 ribu buat beli smartphone.</p></blockquote>

<p>Gampang, saya ada dua solusi. Solusi pertama butuh otak, solusi kedua gak perlu otak. Tinggal pilih.</p>

<p>Kalau mau pakai otak, cukup bikin selebaran les privat matematika. Bisa disebar di Facebook, Twitter, atau diprint fotokopi dan sebar di SD/SMP/SMU. Atau kalau malas bikin selebaran dan sebar-sebar, bikin lamaran kerja aja selembar ke bimbingan belajar.</p>

<blockquote><p>Hmm, solusi pakai otak terlalu berat buat saya. Coba yang satu lagi pak.</p></blockquote>

<p>Awas, hati-hati otaknya nanti ngambek karena gak pernah dipake :D</p>

<p><img src="https://lh6.googleusercontent.com/-vA0HTRryVCE/Uxx8AVOrXlI/AAAAAAAAFbA/8YEQrSqIm5s/w423-h597-no/utek-gak-tau-digawe.jpeg"></p>

<p>Anyway, ini solusi tanpa otak.</p>

<p><img src="https://lh5.googleusercontent.com/-0yytZ2Tbw-Y/Uxx_OjH5OQI/AAAAAAAAFbg/Iobz_-nrmV4/w519-h300-no/whistle-blue-m.jpg"></p>

<p><em>Gambar diambil <a href="http://www.seron.com/p38.html">dari tokonya</a></em></p>

<p>Harganya sekitar 30 ribu rupiah di toko olahraga terdekat. Dengan bermodalkan peluit tersebut, kamu tinggal nongkrong di parkiran kampus atau minimarket/warung kopi terdekat. Tiap ada yang mau keluar, "Priiitt !!". Lumayan 100 kendaraan sehari, masing-masing 1000 rupiah. Setengah hari sudah balik modal untuk beli peluit. Seminggu kebeli deh smartphone.</p>

<blockquote><p>Ok pak, Berkat strategi peluit, smartphone sudah punya. Gimana dengan akses internetnya?</p></blockquote>

<p>Paket internet jaman sekarang makin murah dan cepat. Biayanya dibawah 100 ribu sebulan untuk quota 2 - 3 GB.</p>

<blockquote><p>Wah, saya gak punya uang 100 ribu sebulan Pak. Maklum mahasiswa kere.</p></blockquote>

<p>Gampang, mau solusi pake otak atau gak pake otak?? Apa perlu saya jelaskan sekali lagi?? :D</p>

<h2>Kesimpulan</h2>

<p>Jaman sekarang semua sudah serba mudah. Mau belajar apa saja gak perlu tunggu guru/dosen. 5 tahun ke depan, harusnya murid/mahasiswa saya bisa 5 kali lebih hebat dari saya. Masa kalah sama generasi pager yang komputernya jauh lebih lemot daripada handphone jaman sekarang?</p>

<p>Tinggal kita saja pintar-pintar mengatur prioritas. Mana yang lebih penting, jago coding atau up to date dengan kelakuan Farhat/Jupe/Justin/whatever yang terbaru?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ongoing Learning]]></title>
    <link href="http://software.endy.muhardin.com/life/ongoing-learning/"/>
    <updated>2014-02-20T12:48:00+07:00</updated>
    <id>http://software.endy.muhardin.com/life/ongoing-learning</id>
    <content type="html"><![CDATA[<p>Hidup sebagai programmer bisa diibaratkan seperti nyemplung di laut. Untuk bisa survive, kita harus terus bergerak dan berenang. Begitu kita diam, langsung deh tenggelam.</p>

<p>Ini juga berlaku buat saya yang sudah 12 tahun jadi programmer. Teknologi baru bermunculan dengan cepat dan kita harus <em>keep up to date</em>. Artikel ini adalah bagian pertama dari catatan perjalanan saya belajar teknologi baru. Seperti biasa, source code yang dihasilkan akan saya share di Github.</p>

<p>Mari kita mulai.</p>

<!--more-->


<h2>Pemilihan Teknologi</h2>

<p>Pertama, saya tentukan dulu apa yang mau dipelajari. Sebetulnya ada banyak teknologi yang belum saya kuasai, misalnya:</p>

<ul>
<li>Grails</li>
<li>Spring Roo</li>
<li>Spring Batch</li>
<li>Pentaho</li>
<li>NoSQL</li>
<li>NodeJS</li>
<li>Android</li>
<li>iOS Programming</li>
<li>Advanced Functional Programming (LISP, Clojure, Scala)</li>
<li>Amazon Cloud Services</li>
<li>dan masih banyak lagi</li>
</ul>


<p>Tapi kita harus memilih salah satu yang akan didahulukan. Tidak mungkin belajar semua.</p>

<p>Dari sekian banyak dalam list, saya akhirnya pilih NodeJS dan NoSQL.</p>

<blockquote><p>Kenapa?</p></blockquote>

<p>Karena kedua hal itu memiliki ekosistem yang sangat berbeda dari yang selama ini saya tekuni. Kalau selama ini terbiasa dengan <a href="http://software.endy.muhardin.com/java/development-stack-2014/">ekosistem Java</a> dan <a href="http://software.endy.muhardin.com/java/konfigurasi-koneksi-database-dengan-spring/">database relasional</a>, kali ini kita akan coba dunia di luar Java dan pemodelan data non-relasional.</p>

<p>Selanjutnya, seperti sering saya sarankan di berbagai forum, untuk belajar programming kita harus bikin aplikasi. Cuma baca-baca saja tidak akan banyak hasilnya.</p>

<h2>Contoh Aplikasi</h2>

<p>Nah kebetulan istri saya dapat amanah jadi sekretaris di pengajiannya, dia butuh aplikasi untuk menyimpan data member. Tidak rumit-rumit, berikut daftar fitur yang dibutuhkan:</p>

<h3>Fitur Administrator</h3>

<ul>
<li>Entri data member</li>
<li>Entri data pembayaran iuran</li>
<li>Entri pengumuman</li>
</ul>


<h3>Fitur Member</h3>

<ul>
<li>Lihat pengumuman</li>
<li>Lihat data pembayaran iuran</li>
</ul>


<p>Paling penting di sini adalah mulai dari hal yang sederhana dulu. Jangan terlalu ambisius ingin fitur canggih seperti:</p>

<ul>
<li>Mobile Interface</li>
<li>Pemberian tugas/target individu</li>
<li>Tracking progress penyelesaian tugas/target</li>
</ul>


<p>Kalaupun mau fitur tersebut, bisa kita tunda di rilis versi selanjutnya.</p>

<h2>Langkah Pertama</h2>

<p>Di jaman sekarang, jarang sekali aplikasi bisa dibangun hanya dengan satu library/framework saja. Beda dengan jaman VB 6 dulu. Sekali buka Visual Studio, beres langsung aplikasinya. Di jaman sekarang, kita harus pakai kombinasi teknologi atau yang biasa disebut <em>Development Stack</em>.</p>

<p>Karena ini dunia yang baru bagi saya, kombinasi stacknya masih belum saya pahami. Untuk itu perlu googling dulu. Beberapa link yang berhasil saya kumpulkan antara lain:</p>

<ul>
<li>Untuk deployment, kita bisa pakai <a href="https://devcenter.heroku.com/articles/getting-started-with-nodejs">gratisan dari Heroku</a></li>
<li>Framework MVC untuk di sisi server ada dua kandidat kuat yaitu <a href="http://expressjs.com/">ExpressJS</a> dan <a href="http://sailsjs.org/#!documentation">SailJS</a>.</li>
<li>Workflow tools (ala Maven) bisa pakai <a href="http://yeoman.io/">Yeoman</a>. Di dalamnya dia include <a href="http://bower.io/">Bower</a> dan <a href="http://gruntjs.com/">Grunt</a>. Sekilas baca, Bower adalah dependency management (bertugas untuk mencarikan library yang kita butuhkan) dan Grunt adalah tools untuk build (compile, minify, optimize, dsb)</li>
<li><a href="http://blog.modulus.io/nodejs-and-express-sessions">Integrasi antara NodeJS, ExpressJS, dan Redis</a></li>
<li><a href="http://blog.semmy.me/post/46247962979/storing-simple-data-with-redis-and-node-js">Simpan data ke Redis dengan NodeJS</a></li>
<li><a href="https://devcenter.heroku.com/articles/redistogo">Deployment NodeJS dan Redis di Heroku</a></li>
</ul>


<p>Perlu diketahui, NodeJS adalah JavaScript untuk di sisi server. Di sisi client, kita akan menggunakan AngularJS dan Twitter Bootstrap. Untuk itu, kita cari tahu dulu <a href="https://www.google.com/search?q=sample+application+nodejs+angularjs">bagaimana menyambungkan AngularJS dan NodeJS</a>. Terutama, bagaimana mengatur struktur folder aplikasinya.</p>

<p>Dari hasil pencarian di atas, saya menemukan beberapa artikel, yaitu:</p>

<ul>
<li><a href="http://www.ibm.com/developerworks/library/wa-nodejs-polling-app/">Tutorial dari IBM, menggunakan ExpressJS, AngularJS, dan MongoDB</a></li>
<li><a href="https://www.twilio.com/blog/2013/12/votr-part-5-angularjs-crud-restful-apis.html">Membuat CRUD dengan AngularJS dan NodeJS</a></li>
<li><a href="http://bardevblog.wordpress.com/2013/08/14/understanding-angularjs-simple-example/">Aplikasi Sederhana dengan AngularJS dan NodeJS</a></li>
</ul>


<h2>Langkah Selanjutnya</h2>

<p>Setelah materi dan referensi terkumpul, saatnya kita mulai bekerja. Pertama tentu kita <a href="http://askubuntu.com/a/83290">install dulu NodeJS</a>. Setelah itu, kita buat <a href="https://github.com/endymuhardin/aplikasi-membership">repository Githubnya</a>.</p>

<p>Lalu, kita mulai coding. Follow terus repositorynya dan nantikan artikel lanjutannya ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Source Code Milik Siapa ?]]></title>
    <link href="http://software.endy.muhardin.com/life/source-code-milik-siapa/"/>
    <updated>2014-01-08T21:31:00+07:00</updated>
    <id>http://software.endy.muhardin.com/life/source-code-milik-siapa</id>
    <content type="html"><![CDATA[<p>Malam ini, saya mendapatkan pertanyaan menarik di milis komunitas programmer. Berikut isinya.</p>

<blockquote><p>hello all,</p>

<p>saya mau tanya, ketika kita bekerja di suatu perusahaan base on project single programmer, yang semua dikerjakan sendiri, dari mulai analis sampai coding, apakah source code hasil kerja kita adalah milik perusahaan? atau milik programmer ybs?</p>

<p>karena source code itu kita yang buat dari awal hingga menjadi suatu sistem aplikasi, programmer dikecewakan dianggap tidak memenuhi target atau alasan lain, saat tiba waktu deadline pimpinan perusahaan marah2 bentak2 kemudian dengan gampang perusahaan meminta source yang kita kerjakan? padahal programmer tsb sudah menyelesaikan pekerjaannya</p>

<p>sebagai programmer akhibat dikecewakan demi mempertahankan harga diri, akhirnya resign dan rela keluar dari perusahaan alias nganggur, programmer tidak rela memberikan source yg mjd hasil karyanya sendiri begitu saja</p>

<p>apakah ada hukum kemudian terjadi tuntutan perusahaan ke programmer untuk meminta source code tersebut ?</p>

<p>apakah source code hasil coding programmer adalah termasuk Hak Cipta Programmer?</p>

<p>mohon sharingnya, thanks</p></blockquote>

<p>Berikut tanggapan saya</p>

<!--more-->


<p>Pertama harus kita pisahkan dulu mana yang relevan mana yang tidak. Bahwa si penanya resign <em>tidak secara baik-baik</em> tidak relevan dengan kepemilikan source code. Bahkan sekalipun si penanya resign dengan terhormat, diberikan farewell party yang meriah, dapat suvenir yang ditandatangani seluruh karyawan, tidak akan mengubah kondisi kepemilikan source code.</p>

<p>Kalo mau jawaban yang lebih panjang dan berbagai kemungkinannya, bisa baca jawabannya Joel Spolsky <a href="http://web.archive.org/web/20130121231716/http://answers.onstartups.com/questions/19422/if-im-working-at-a-company-do-they-have-intellectual-property-rights-to-the-st/20136">di sini</a>. Interesting read, tapi harus diperhatikan bahwa itu membahas hukum di Amerika sana, belum tentu sesuai untuk Indonesia.</p>

<p>Sebenarnya sih masalah ini sangat bisa diperdebatkan, malah mungkin bisa dibahas Karni Ilyas di ILC saking beragamnya pendapat. Tapi kalo mau terima saran saya, sudahlah move on dan lupakan saja. Tidak perlu kita pusingkan milik siapa dan apakah bisa dituntut atau tidak. Kenapa begitu?</p>

<ol>
<li><p>Dunia IT sempit. Di Indonesia sini, semua orang IT saling mengenal. Sekali kamu dapat reputasi 'pencuri source code', tamat sudah masa depan kamu. Terlepas dari benar/salah, tidak banyak orang yang mau repot verifikasi kebenarannya. Selain 'pencuri source code', satu lagi yang harus diwaspadai adalah 'pencuri data'. Kalau nanti sempat dipercayakan akses ke data production, harus dijaga baik-baik.</p></li>
<li><p>Pertengkaran memperebutkan source code hanya akan menghabiskan energi kita, menambah musuh, dan memperkaya Ruhut, Farhat, dan yang sejenisnya. Hidup cuma sebentar, kita harus pintar-pintar memilih pertempuran yang akan dijalani.</p></li>
<li><p>Source code kamu tidak seberharga yang kamu bayangkan. Source code tanpa bisnis yang mendasarinya gak ada gunanya. Waktu saya kerja di perusahaan terdahulu, banyak beredar kabar tentang si anu dan si anu yang mencuri source code aplikasi core banking. Tapi di mana mereka sekarang? Belum ada terdengar mereka buka perusahaan penyedia aplikasi core banking dan sukses. Client bukan cuma butuh source code, tapi juga:</p>

<ul>
<li>keyakinan bahwa vendornya bisa solve kalau ada problem</li>
<li>keyakinan bahwa vendornya akan terus support kalau ada perubahan atau bug</li>
<li>keyakinan bahwa vendornya tidak akan bangkrut dalam waktu dekat sehingga merepotkan mereka</li>
</ul>
</li>
<li><p>Apa yang sulit kamu bikin, belum tentu sulit bagi orang lain. Mahasiswa saya di kampus sering sekali mengeluh disuruh bikin tugas barang 4-5 tabel database saja. Dikasi waktu satu semester, masih juga gak selesai. Susah katanya. Mereka gak tau bahwa untuk programmer dengan jam terbang 1 tahun ke atas bisa mengerjakan 2 tabel database <strong>hanya dalam waktu 1 hari saja</strong>. So, apa yang mereka anggap berat dan gak selesai 1 semester, sebenarnya hanyalah kerjaan 3 hari belaka.</p></li>
<li><p>Sebagai pekerja kreatif, kita seharusnya selalu merasa bahwa kita belum membuat hasil karya terbaik kita. Artinya, sehebat apapun hasil kerja kita di masa lalu, kita masih bisa membuat yang lebih canggih lagi. Dengan mentalitas seperti ini, kita akan merasa lebih ringan untuk merelakan apapun yang kita sudah pernah kerjakan.</p></li>
</ol>


<blockquote><p>Tidak apa-apalah mereka mengambil aplikasi saya yang itu. Toh saya masih punya yang jauh lebih baik. Mana dia? Ini sedang saya kerjakan.</p></blockquote>

<p>Begitulah sikap yang lebih baik.</p>

<p>Lagipula, sekedar source code saja apa hebatnya. Source code Linux saja yang sedemikian hebatnya dibagi-bagikan gratis.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Problem Solving]]></title>
    <link href="http://software.endy.muhardin.com/life/problem-solving/"/>
    <updated>2013-10-31T11:00:00+07:00</updated>
    <id>http://software.endy.muhardin.com/life/problem-solving</id>
    <content type="html"><![CDATA[<p>Saya aktif berbagai forum diskusi di internet, mostly mengenai pemrograman. Dari apa yang saya amati di forum tersebut, begitu ada pertanyaan, umumnya selalu disambut dengan alternatif solusi yang bermacam-macam. Padahal seharusnya, kita fokus dulu dalam memahami masalahnya. Begitu kita paham masalahnya, solusinya akan mudah ditemukan.</p>

<p>Ada <a href="http://www.snopes.com/business/genius/where.asp">cerita <em>urban legend</em> di internet yang menggambarkan pendekatan ini</a>. Berikut terjemahan bebas dari saya.</p>

<!--more-->


<blockquote><p>Budi adalah seorang pemilik pabrik yang sedang pusing tujuh keliling.
Salah satu mesinnya rusak sehingga produksi terhenti.
Padahal minggu depan tanggal gajian dan barang harus segera dikirim agar ada uang masuk.</p>

<p>Semua teknisi sudah dikerahkan, tapi tidak bisa memperbaiki mesin tersebut.
Akhirnya dia mendatangkan temannya bernama Agus.</p>

<p>Agus mulai beraksi. Tanya kiri-kanan, melihat ke dalam kap mesin, dan berkeliling pabrik seharian.
Di sore hari, dia mengambil spidol dan membuat tanda X di salah satu komponen mesin.
Teknisi mengganti komponen tersebut, dan mesin berjalan kembali dengan normal.</p>

<p>Agus kemudian memberikan invoice senilai 100 juta. Budi terkejut, "Masa menulis X saja 100 juta??"
Agus mengambil kembali invoice tersebut dan merevisinya sebagai berikut</p></blockquote>

<table>
<thead>
<tr>
<th>Pekerjaan             </th>
<th> Biaya</th>
</tr>
</thead>
<tbody>
<tr>
<td>Menulis X             </td>
<td>             10.000</td>
</tr>
<tr>
<td>Menentukan lokasi X   </td>
<td>         99.990.000</td>
</tr>
<tr>
<td>Total                 </td>
<td>        100.000.000</td>
</tr>
</tbody>
</table>


<p>Anda mungkin berkomentar,</p>

<blockquote><p>Ah itu kan cuma cerita dongeng saja.</p></blockquote>

<p>Kenyataannya, saya beberapa kali menemui kasus seperti ini. Contohnya:</p>

<p><img src="/images/uploads/2013/10/problem-solving/floating-point-problem.png"></p>

<p>Kenapa hasilnya tidak sama? Karena memang itu sifat dari bilangan <code>floating-point</code>.
Begitu kita paham problemnya (yaitu karakteristik bilangan <code>floating-point</code>), fenomena di atas tidak lagi membingungkan buat kita,
dan solusinya langsung terang benderang.</p>

<p>Contoh lain, di milis ada yang bertanya begini</p>

<blockquote><p>Saya ingin menggunakan icon di aplikasi Eclipse dalam aplikasi saya.
Lisensinya <a href="http://en.wikipedia.org/wiki/Eclipse_Public_License">EPL</a>, apakah boleh saya pakai gratis atau harus bayar?</p></blockquote>

<p>Diskusi berlanjut dengan orang-orang menjelaskan rincian lisensi EPL apa yang boleh apa yang tidak boleh
berikut referensi ke berbagai website.</p>

<p>Saya melihat masalahnya lebih sederhana</p>

<blockquote><p>Ada orang ingin pakai icon bagus di aplikasi yang dia buat.</p></blockquote>

<p>Kemudian saya memberikan rekomendasi yang lebih simple</p>

<blockquote><p>Coba google dengan keyword <code>free icon</code>.
Nanti ketemu banyak, salah satunya <a href="http://www.famfamfam.com/lab/icons/">famfamfam</a>.</p></blockquote>

<p>Nah, itu sudah jelas gratis, tidak perlu pusing <em>terms &amp; conditions</em> dari lisensi <a href="http://en.wikipedia.org/wiki/Eclipse_Public_License">EPL</a>.</p>

<h2>Problem Worth Solving</h2>

<p>Satu hal lagi yang penting, problem solving itu butuh cost. Baik waktu, tenaga, maupun uang. Jadi sebelum kita mulai, dipastikan dulu bahwa cost tersebut ada justifikasinya.</p>

<p>Kalo kita cari solusi di google dan gak nemu, baiknya introspeksi dulu.</p>

<blockquote><p>Apakah problem saya sedemikian uniknya sehingga sedunia gak ada yang pernah mengalami?</p></blockquote>

<p>Tanyakan juga ke diri sendiri</p>

<blockquote><p>Atau jangan2, problem kita sedemikian worthless sehingga gak ada yang mau repot2 bikinin solusi?</p></blockquote>

<h2>Kesimpulan</h2>

<p>Dengan menjabarkan problemnya dengan baik, solusi yang sederhana bisa didapatkan. Tim saya di <a href="http://www.artivisi.com">ArtiVisi</a> sudah terbiasa dengan pendekatan seperti ini. Setiap kali mereka minta solusi untuk suatu hal teknis yang rumit, saya akan selalu mengarahkan untuk menganalisa ulang requirement. Apakah memang harus demikian solusinya? Bila iya, coba lagi negosiasikan requirement supaya bisa menggunakan solusi yang lebih sederhana. Lebih baik negosiasi requirement seharian daripada harus coding solusi rumit dua minggu (belum lagi testing, debugging, maintenance, dst).</p>

<p>Jangan lupa ditimbang-timbang dulu, apakah problemnya <code>layak</code> dicarikan solusinya. Supaya waktu, tenaga, uang kita bisa dialokasikan seoptimal mungkin.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lan Na Zha]]></title>
    <link href="http://software.endy.muhardin.com/life/lan-na-zha/"/>
    <updated>2013-08-25T16:38:00+07:00</updated>
    <id>http://software.endy.muhardin.com/life/lan-na-zha</id>
    <content type="html"><![CDATA[<p>Beberapa hari yang lalu, saya membaca artikel menarik tentang profesi IT.
Inti dari artikel tersebut adalah profesi di dunia IT <em>sucks</em> dengan beberapa alasan:</p>

<ol>
<li>Pemrograman termasuk kategori <em>temporary knowledge capital</em>, yaitu pengetahuan yang cepat kadaluarsa</li>
<li>Bahasa pemrograman, teknologi, dan platform berubah dengan sangat cepat</li>
<li>Gajinya kecil dan prestisenya rendah</li>
<li>Jenjang karir tidak jelas</li>
</ol>


<p>Artikel selengkapnya bisa dibaca <a href="http://www.halfsigma.com/2007/03/why_a_career_in.html">di sini</a>.</p>

<p>Untuk masalah nomer #3 dan #4, menurut saya lebih terkait pada masalah ambisi, attitude, dan <a href="http://software.endy.muhardin.com/life/otodidak/">self-improvement/kemampuan otodidak</a>. Di artikel ini, kita akan bahas solusi untuk masalah nomer #1 dan #2.</p>

<p>Seperti di artikel sebelumnya, kali ini kita juga akan mengambil teladan dari seorang tokoh di luar dunia IT. Siapa dia?</p>

<p><img src="/images/uploads/2013/08/lan-na-zha/li-shu-wen.jpg" title="Li Shu Wen" ></p>

<p><em>gambar diambil dari <a href="http://mangafox.me/manga/kenji/v21/c003/3.html">MangaFox</a></em></p>

<p>Dia adalah Li Shu Wen, legenda <a href="http://en.wikipedia.org/wiki/B%C4%81j%C3%ADqu%C3%A1n">kungfu Delapan Mata Angin</a> yang diceritakan di <a href="http://mangafox.me/manga/kenji/">komik Kenji</a>.</p>

<!--more-->


<p>Sekilas kita lihat, memang dunia IT berkembang dengan sangat cepat. Bahasa pemrograman datang dan pergi dengan cepatnya. Waktu saya mulai belajar pemrograman dulu (tahun 2001), bahasa paling populer adalah PHP, VB, dan Delphi. Java waktu itu hanyalah mainan orang-orang di kampus. 12 tahun kemudian, kita mendengar banyak bahasa baru, misalnya:</p>

<ul>
<li>Go</li>
<li>Harlan</li>
<li>Kotlin</li>
<li>Rust</li>
<li>Dart</li>
<li>Clojure</li>
<li>dan banyak lagi yang lainnya</li>
</ul>


<p>Dan juga jangan dilupakan bahasa lama yang kembali ngetren, misalnya:</p>

<ul>
<li>Ruby</li>
<li>Python</li>
<li>JavaScript</li>
</ul>


<p>Hal yang sama berlaku juga di urusan platform. Beberapa tahun yang lalu, Blackberry adalah rajanya. Sebelum Blackberry, JavaME dan Symbian adalah platform utama di mobile. Jaman sekarang mereka semua sudah digusur oleh Android dan iPhone. Ini semua terjadi dalam kurun waktu 5 tahun saja. Jadi kalau 5 tahun yang lalu kemahiran kita dalam pemrograman JavaME membuat kita menjadi idola masyarakat, jaman sekarang kita tidak lebih dari seorang Pak Tua yang sudah mendekati usia pensiun ;)</p>

<p>Nah, saya termasuk salah satu Pak Tua tersebut. Tergabung dalam generasi dinosaurus yang masih tau apa itu CORBA, RMI, SOAP, XML, dan singkatan-singkatan lain yang tidak dipahami generasi masa kini yang urusannya adalah KML, JSON, dan kawan-kawannya. Bagaimana cara saya survive bisa menjadi pelajaran buat generasi 2013 yang akan menyusul menjadi Pak Tua dalam 5 tahun ke depan :D</p>

<p>Kuncinya ada di legenda kungfu jaman dulu, <a href="http://kenji.mangawiki.org/?p=1">Li Shu Wen</a> yang diceritakan dalam komik Kenji dengan nama Lie Syo Bun yang bisa dibaca online <a href="http://mangafox.me/manga/kenji/v21/c001/1.html">di sini</a>. Berikut sedikit bagian yang relevan dengan artikel ini, yaitu tentang gerakan Lan Na Zha.</p>

<blockquote><p>Untuk menjadi master di aliran kungfu Delapan Mata Angin, Li Shu Wen harus menguasai dua teknik, yaitu pukulan pamungkas dan teknik tombak. Dia menguasai pukulan pamungkas secara otodidak dengan mempertaruhkan nyawa. Baca ceritanya <a href="http://mangafox.me/manga/kenji/v21/c002/2.html">di bab dua Kenji volume 21</a>. Setelah itu, dia mendapat pengajaran dasar-dasar ilmu tombak di perguruannya. Karena sering berkelahi, maka Li Shu Wen hanya boleh menonton, tidak boleh mencoba. Gurunya mendemokan tiga gerakan dasar ilmu tombak, yaitu Lan (memutar ke luar), Na (memutar ke dalam), dan Zha (menusuk).</p></blockquote>

<p><img src="/images/uploads/2013/08/lan-na-zha/lan-na-zha.jpg" title="Lan Na Zha" ></p>

<p><em>gambar diambil dari <a href="http://mangafox.me/manga/kenji/v21/c003/8.html">MangaFox</a></em></p>

<blockquote><p>Ketika gurunya mengajarkan teknik kombinasi yang lebih advanced, dia menolak belajar karena menganggap sudah cukup dengan tiga gerakan dasar itu saja, sehingga diskorsing oleh gurunya. Tapi bermodalkan tiga gerakan dasar ini saja, dia berhasil mengalahkan semua yang menantangnya, sehingga digelari Dewa Tombak. Baca cerita lengkapnya <a href="http://mangafox.me/manga/kenji/v21/c003/6.html">di sini</a>.</p></blockquote>

<p>Sedemikian universalnya teknik dasar ini, sehingga bisa kita temukan juga di komik lain, yaitu <a href="">Legenda Naga</a>.</p>

<p><img src="/images/uploads/2013/08/lan-na-zha/lan-na-zha-gongfu.jpg" title="Lan Na Zha Legenda Naga" ></p>

<p><em>gambar diambil dari <a href="http://mangafox.me/manga/ryuurouden/v07/c024/16.html">MangaFox</a></em></p>

<p>Lalu apa hubungannya dengan profesi di dunia IT? Pelajaran utama dari komik di atas adalah kita harus mengambil inti dari setiap pengetahuan yang kita miliki. Teknik implementasi bisa berubah dengan cepat, tapi konsep dasar tidak berubah. Tidak percaya? Coba kita lihat istilah-istilah yang sedang trendi di jaman sekarang:</p>

<ul>
<li>Functional Programming, Closure, Clojure, Scala, Groovy, Lambda Expression</li>
<li>Object Oriented Programming, UML</li>
<li>ORM</li>
<li>REST</li>
</ul>


<p>Mari kita telusuri apakah benar istilah tersebut membuat skill kita kadaluarsa?</p>

<h3>Functional Programming</h3>

<p><a href="http://en.wikipedia.org/wiki/Functional_programming">Menurut Wikipedia</a>, Functional programming sudah dikenal sejak tahun 1950. Bahasa yang terkenal adalah <a href="http://en.wikipedia.org/wiki/Lisp_(programming_language">LISP</a>) dan <a href="http://en.wikipedia.org/wiki/Haskell_(programming_language">Haskell</a>).</p>

<p>Jadi, apa yang ngetren dengan nama Clojure di masa kini, sebetulnya sudah ada sejak tahun 1950. Kalau saja kita menguasai konsep functional programming, bukan hanya teknik pemrograman Lisp/Haskell, maka konsep yang kita pahami tersebut akan memungkinkan kita menguasai Clojure dalam waktu satu bulan saja. Demikian juga dengan bahasa pemrograman functional lain seperti Scala, Groovy, dan fitur Lambda Expression yang akan hadir di Java 8.</p>

<h3>Object Oriented Programming</h3>

<p>Istilah OOP mungkin tidak terdengar terlalu modern. Tapi sebetulnya dia umurnya sama dengan Functional Programming, yaitu dikenal sejak tahun 1950. Bahasa pemrograman berparadigma OOP yang terkenal antara lain adalah Smalltalk.</p>

<p>Untuk mendokumentasikan desain aplikasi OOP, digunakan notasi UML. Notasi ini dirumuskan pada tahun 1990.</p>

<h3>ORM</h3>

<p>Object Relational Mapping atau ORM, sering kita kenal dengan istilah JPA, Hibernate, Toplink, dan sebagainya, sebetulnya bukan konsep baru. ORM hanyalah library yang mengkonversi hasil query database relasional menjadi object, dan sebaliknya. Adapun istilah-istilah yang sering kita temui dalam penggunaan ORM seperti:</p>

<ul>
<li><a href="http://stackoverflow.com/questions/97197/what-is-the-n1-selects-issue">n+1 select</a></li>
<li><a href="http://en.wikipedia.org/wiki/Cartesian_product">cartesian product</a></li>
<li><a href="http://en.wikipedia.org/wiki/Foreign_key#CASCADE">cascade operation</a></li>
</ul>


<p>adalah istilah umum yang juga ditemui di SQL. Sedangkan</p>

<ul>
<li>second level cache</li>
<li>lazy loading vs eager fetching</li>
</ul>


<p>merupakan teknik optimasi pengambilan data, yang tidak hanya berlaku untuk database relasional, tapi juga semua pengambilan data dari sumber eksternal seperti:</p>

<ul>
<li>file</li>
<li>web service</li>
<li>network socket</li>
<li>dan sebagainya</li>
</ul>


<h3>REST</h3>

<p><a href="http://en.wikipedia.org/wiki/Representational_state_transfer">REST</a>, sebetulnya hanyalah satu metode untuk mengakses service yang disediakan aplikasi lain. Secara konseptual, dia tidak berbeda dengan:</p>

<ul>
<li>SOAP</li>
<li>ISO-8583</li>
<li>IMAP</li>
<li>POP3</li>
<li>SMTP</li>
</ul>


<p>Intinya adalah ada aplikasi A yang ingin menyuruh aplikasi B melakukan sesuatu. Sesuatu di sini bisa menjalankan perintah tertentu, mengambilkan data, mematikan komputer, dan apapun yang bisa kita pikirkan. Begitu kita paham intinya, menyuruh aplikasi lain bisa dilakukan dengan berbagai cara lain, misalnya:</p>

<ul>
<li>mengirim SMS</li>
<li>mengirim email</li>
<li>mengirim data dengan format yang kita tentukan sendiri melalui jaringan (TCP/IP)</li>
<li>mengirim message chat melalui Yahoo Messenger, BBM, Google Hangout, Line, Whatsapp, dan apapun media lain</li>
</ul>


<p>Kita bisa generalisasi lagi menjadi konsep yang lebih mendasar, yaitu <a href="http://software.endy.muhardin.com/java/integrasi-aplikasi/">bagaimana menghubungkan (integrasi) antar beberapa aplikasi agar bisa bekerjasama</a>.</p>

<h2>Framework dan Library</h2>

<p>Kita juga sering pusing dengan cepatnya perkembangan framework dan library. Di dunia Java, kita bisa ambil contoh Spring Framework dan Java EE.</p>

<p>Walaupun demikian, dengan menggunakan prinsip Lan-Na-Zha, kita tidak perlu pusing. Coba kita bahas evolusinya.</p>

<h3>Java EE</h3>

<p>Jaman dulu namanya J2EE, beberapa jargon yang kita dengar adalah:</p>

<ul>
<li>Container Managed Transaction (CMT) : programmer tidak perlu <code>begin-commit/rollback</code> sendiri, diurus appserver</li>
<li>Enterprise Java Beans (EJB) : object yang diinisialisasi, dimaintain, dan dibersihkan oleh appserver</li>
<li>Session Beans : EJB yang bertugas menampung proses bisnis</li>
<li>Entity Beans : EJB yang bertugas menjadi mapping dari Java ke tabel database</li>
<li>Message Driven Beans : EJB yang bertugas menunggu message JMS dan beraksi begitu ada message</li>
</ul>


<p>Teknik implementasinya adalah sebagai berikut:</p>

<ol>
<li>Coding Session Beans, Entity Beans, Message Driven Beans menggunakan Java</li>
<li>Deklarasikan objectnya di file XML</li>
<li>Bila object tersebut saling terkait, tulis juga hubungannya di file XML</li>
<li>Konfigurasi CMT di file XML juga</li>
</ol>


<p>Jaman sekarang namanya JEE. Implementasinya beda, seperti ini:</p>

<ol>
<li>Coding Session Beans, Entity Beans, Message Driven Beans menggunakan Java</li>
<li>Tambahkan annotation <code>@Stateless</code>, <code>@Stateful</code>, <code>@Entity</code>, <code>@MessageDriven</code> supaya EJB dikelola oleh appserver</li>
<li>Bila object tersebut saling terkait, tulis juga hubungannya menggunakan <code>@Inject</code></li>
<li>CMT sudah diaktifkan by-default. Konfigurasi tambahan bisa dilakukan menggunakan <code>@TransactionAttribute</code></li>
</ol>


<p>Konsepnya tetap sama. Tidak percaya? Baiklah saya copy paste ;)</p>

<ul>
<li>Container Managed Transaction (CMT) : programmer tidak perlu <code>begin-commit/rollback</code> sendiri, diurus appserver</li>
<li>Enterprise Java Beans (EJB) : object yang diinisialisasi, dimaintain, dan dibersihkan oleh appserver</li>
<li>Session Beans : EJB yang bertugas menampung proses bisnis</li>
<li>Entity Beans : EJB yang bertugas menjadi mapping dari Java ke tabel database</li>
<li>Message Driven Beans : EJB yang bertugas menunggu message JMS dan beraksi begitu ada message</li>
</ul>


<p>Seperti kita lihat, kalau kita menghafalkan implementasi (konfigurasi XML), maka skill J2EE kita akan kadaluarsa begitu JavaEE 6 dirilis. Tapi kalau kita pahami benar-benar konsepnya (CMT, EJB), maka pemahaman tersebut masih relevan di JavaEE 5, JavaEE 6, dan kemungkinan besar juga di JavaEE 10 beberapa tahun yang akan datang ;)</p>

<h3>Spring Framework</h3>

<p>Bagi aliran non JavaEE, biasanya pakai Spring Framework. Di sinipun tidak jauh berbeda. Dulunya konfigurasi menggunakan XML, sekarang bisa pakai Annotation dan JavaConfig.</p>

<p>Implementasi jaman dulu:</p>

<ul>
<li>inisialisasi (me<code>new</code>kan object) ada di XML</li>
<li>transaction management dilakukan menggunakan AOP, juga di XML</li>
</ul>


<p>Contohnya bisa dilihat di <a href="http://sourceforge.net/p/playbilling/code/7/tree/trunk/web/WEB-INF/conf/ctx-billing.xml">kode program saya tahun 2006 - 7 tahun yang lalu</a>. Perhatikan bahwa setiap class <code>DAO</code> dideklarasikan di XML. Demikian juga konfigurasi transaction di bagian <code>transactionAttributes</code>.</p>

<p>Implementasi jaman sekarang:</p>

<ul>
<li>inisialisasi dilakukan melalui annotation</li>
<li>transaction management dikonfigurasi di annotation</li>
</ul>


<p>Contohnya bisa dilihat di <a href="http://software.endy.muhardin.com/java/konfigurasi-koneksi-database-dengan-spring/">kode program saya tahun 2013</a>.</p>

<p>Walaupun kode programnya berubah sama sekali, konsepnya tidak berubah dalam kurun waktu 7 tahun, yaitu:</p>

<ul>
<li><a href="http://software.endy.muhardin.com/java/memahami-dependency-injection/">Dependency Injection</a></li>
<li>Aspect Oriented Programming</li>
</ul>


<h2>Gong Fu</h2>

<p>Kalau kita baca terus kisah Li Shu Wen sampai <a href="http://mangafox.me/manga/kenji/v21/c005/10.html">bab 5</a>, kita akan mendapat pelajaran penting lainnya, yaitu <code>gongfu</code>. Gongfu artinya adalah <code>hasil yang didapat dari latihan</code>. Kita melakukan satu hal berulang-ulang, sehingga hal tersebut menjadi refleks dan bisa kita lakukan tanpa harus berpikir lagi.</p>

<p><img src="/images/uploads/2013/08/lan-na-zha/gongfu.jpg" title="Gong Fu" ></p>

<p><em>gambar diambil dari <a href="http://mangafox.me/manga/kenji/v21/c005/21.html">MangaFox</a></em></p>

<p>Salah satu latihan yang sering saya lakukan adalah membuat aplikasi dengan satu tabel database, satu form input, satu tabel list, lengkap dengan validasinya, menggunakan framework yang biasa digunakan (Spring dan Hibernate), <strong>dari nol</strong>. Dengan latihan tersebut, saya hafal dan tahu persis fungsi dan tujuan setiap baris kode program dan konfigurasi yang ada dalam aplikasi. Bila ada error, saya bisa mengatasinya dengan cepat dengan bermodalkan <code>gongfu</code> dalam mengintegrasikan berbagai framework.</p>

<blockquote><p>Di jaman content seperti saat ini, <em>gongfu</em> yang paling perlu dipupuk adalah <a href="http://software.endy.muhardin.com/aplikasi/teknik-menggunakan-google/">teknik googling</a>. Memilih keyword yang tepat supaya hasil search sesuai keinginan merupakan suatu skill khusus. Skill ini hanya bisa ditingkatkan melalui latihan.</p></blockquote>

<p>Khusus programmer, penting juga dilatih cara untuk mendebug error. Membaca pesan error, memisahkan mana yang relevan dan tidak, kemudian mencari tahu baris kode yang menyebabkan error, merupakan skill yang hanya bisa didapat melalui latihan.</p>

<p>Dalam melatih gongfu, ada satu prinsip yang penting untuk kita gunakan, yaitu <a href="http://joshvogelart.blogspot.com/2013/02/slow-is-smooth-and-smooth-is-fast.html">Slow is smooth, smooth is fast</a>. Artinya, kita lakukan langkah demi langkah seakurat mungkin walaupun perlahan. Fokusnya adalah <strong>melakukan secara benar</strong>. Seiring dengan durasi latihan kita, rangkaian gerakan tersebut akan tertanam menjadi refleks di otak kita, sehingga kita bisa melakukannya dengan lebih cepat. Ulangi terus dalam jangka waktu yang lama, maka kita akan bisa melakukan hal tersebut dengan sangat cepat, namun tetap akurat.</p>

<h2>Kesimpulan</h2>

<p>Belajar dari kisah Li Shu Wen di atas, kita tidak perlu khawatir dengan cepatnya perkembangan teknologi di dunia IT. Bila kita paham konsep dan prinsip dasarnya, kita tidak akan tertinggal. Teknik implementasi, bahasa pemrograman, platform, format data, protokol komunikasi, memang akan terus berubah sepanjang jaman. Tapi prinsip yang mendasarinya akan tetap berpulang pada konsep klasik dan akal sehat.</p>

<p>Jadi, bila kita belajar sesuatu, tidak hanya di dunia IT, jangan cepat puas begitu kita tahu <strong>bagaimana cara melakukannya</strong>. Gali terus sampai kita memahami <strong>tujuan kenapa kita melakukan hal tersebut</strong> dan <strong>berbagai cara lain untuk mencapai tujuan yang sama</strong>. Jangan puas begitu kita bisa <strong>insert data menggunakan ORM</strong>. Tapi gali terus sampai kita paham <strong>mengapa ORM dibuat</strong> dan <strong>bagaimana cara kerja/isi perut ORM</strong>.</p>

<p>Setelah paham, latih terus pemahaman konsep tersebut sampai kita mahir. Jangan berhenti ketika merasa sudah mahir, karena semua skill dan teknik perlu maintenance supaya tidak hilang.</p>

<p>Terakhir, untuk mendapatkan hasil maksimal, kombinasikan artikel ini dengan <a href="http://software.endy.muhardin.com/life/otodidak/">artikel sebelumnya</a>. Pahami prinsip dasar dari skill otodidak, kemudian latihan sampai mahir. Jangan menyerah kalau merasa sulit dalam belajar. Yang namanya belajar pasti sulit, kalau sudah tidak sulit lagi tandanya kita sudah bisa ;)</p>

<p>Juga jangan bosan bila kita tidak cepat memahami/menguasai sesuatu. Menguasai suatu konsep dan teknik dasar seringkali butuh waktu lama. Dalam komik Legenda Naga, Lan Na Zha dilatih selama enam bulan</p>

<p><img src="/images/uploads/2013/08/lan-na-zha/lan-na-zha-gongfu.jpg" title="Lan Na Zha Legenda Naga" ></p>

<p><em>gambar diambil dari <a href="http://mangafox.me/manga/ryuurouden/v07/c024/16.html">MangaFox</a></em></p>

<p>Dalam komik Kenji, Li Shu Wen melatih kuda-kuda dasar selama 3 bulan. Tidak seperti aliran lain, selama periode tersebut siswa belum belajar memukul sama sekali.</p>

<p><img src="/images/uploads/2013/08/lan-na-zha/horse-stance-training.jpg" title="Latihan Kuda-kuda" ></p>

<p><em>gambar diambil dari <a href="http://mangafox.me/manga/kenji/v21/c007/6.html">MangaFox</a></em></p>

<p>Bagaimana dengan programming?</p>

<blockquote><p>Menurut Peter Norvig, <a href="http://norvig.com/21-days.html">belajar pemrograman butuh waktu 10 tahun</a>.</p></blockquote>

<p>Jadi, kalau kita belajar sesuatu, setelah dua minggu belum paham dan masih bingung, jangan khawatir. Masih ada waktu 10 tahun kurang
2 minggu lagi untuk belajar ;)</p>

<p>Nah, dengan artikel ini, mudah-mudahan orang bisa memahami mengapa di berbagai forum, milis, sesi kuliah dan pelatihan, saya selalu bersikeras supaya orang <a href="http://software.endy.muhardin.com/life/rtfm/">mencoba dulu sebelum bertanya/minta solusi</a>. Karena dengan mencoba, kita akan meningkatkan gongfu dalam skill problem solving.</p>

<p>Selamat berlatih ;)</p>
]]></content>
  </entry>
  
</feed>
