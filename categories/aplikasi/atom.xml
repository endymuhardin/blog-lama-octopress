<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: aplikasi | Living life and make it better]]></title>
  <link href="http://software.endy.muhardin.com/categories/aplikasi/atom.xml" rel="self"/>
  <link href="http://software.endy.muhardin.com/"/>
  <updated>2013-07-08T22:04:31+07:00</updated>
  <id>http://software.endy.muhardin.com/</id>
  <author>
    <name><![CDATA[Endy Muhardin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Apa itu SSL]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/apa-itu-ssl/"/>
    <updated>2013-07-08T17:52:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/apa-itu-ssl</id>
    <content type="html"><![CDATA[<p>SSL adalah protokol keamanan yang kita gunakan sehari-hari. Sebagai programmer, kita harus paham konsep SSL dan bisa memanfaatkannya dalam aplikasi yang kita buat.</p>

<p>Artikel ini adalah bagian pertama dari 4 artikel, yaitu:</p>

<ol>
<li><a href="http://software.endy.muhardin.com/aplikasi/apa-itu-ssl">Apa itu SSL</a></li>
<li>Membuat self-signed SSL</li>
<li>Membeli sertifikat SSL</li>
<li>Memasang sertifikat SSL</li>
</ol>


<!--more-->


<p><a href="https://en.wikipedia.org/wiki/Transport_Layer_Security">SSL adalah singkatan dari Secure Socket Layer, juga dikenal dengan istilah Transport Secure Layer (TLS)</a>.</p>

<p>Ada beberapa keuntungan bila kita menggunakan SSL, yaitu:</p>

<ul>
<li>kerahasiaan (confidentiality)</li>
<li>identifikasi (authentication)</li>
</ul>


<p>Kerahasiaan diperlukan bila kita mengirim informasi yang tidak noleh diketahui orang lain, misalnya username dan password pada saat mengisi halaman login. Kita tidak ingin ada orang lain yang menyadap trafik internet kita dan mengintip password kita (<a href="http://en.wikipedia.org/wiki/Eavesdropping">eavesdropping</a>).</p>

<p>Identifikasi diperlukan untuk memastikan identitas suatu layanan/aplikasi. Misalnya kita mengakses situs internet banking, kita butuh keyakinan bahwa yang kita akses adalah aplikasi yang asli. Tidak dimanipulasi orang di tengah jalan (<a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">man in the middle attack</a>) ataupun diganti dengan situs palsu (<a href="https://en.wikipedia.org/wiki/Phishing">phising</a>).</p>

<p>Untuk bisa memahami apa itu SSL, ada beberapa konsep yang perlu kita pahami yaitu:</p>

<ul>
<li>identitas</li>
<li>trust model</li>
<li>public key infrastructure</li>
<li>dasar-dasar enkripsi</li>
</ul>


<p>Dengan memahami beberapa istilah di atas, nanti kita akan memahami dari mana datangnya fitur SSL seperti kerahasiaan dan identifikasi.</p>

<h2>Identitas</h2>

<p>Coba kunjungi website internet banking seperti <a href="https://ibank.klikbca.com/">KlikBCA</a> dan <a href="https://ib.bankmandiri.co.id/retail/Login.do?action=form&amp;lang=in_ID">Bank Mandiri</a>. Bagaimana kita memastikan bahwa kedua situs barusan asli dikelola oleh bank masing-masing? Bila Anda klik link di atas, bagaimana Anda yakin bahwa saya tidak mengarahkan Anda ke situs saya sendiri yang mirip dengan situs aslinya?</p>

<p>Di kehidupan sehari-hari, kita biasa memastikan identitas seseorang dengan beberapa cara, misalnya:</p>

<ul>
<li>menyuruh orang tersebut menulis tandatangan, kemudian dibandingkan dengan KTP, SIM, atau bukti identitas lain.</li>
<li>mengambil sidik jarinya (pakai tinta ataupun fingerprint scanner), dan dibandingkan dengan data yang sudah kita miliki sebelumnya.</li>
<li>membandingkan sidik mata (iris) dengan database.</li>
</ul>


<p>Manapun cara yang kita gunakan, ada satu kesamaan. Kita akan memeriksa informasi/benda yang hanya bisa dimiliki pemegang aslinya. Tentu semua hal bisa dipalsukan, tapi untuk menyederhanakan masalah, kita bisa asumsikan bahwa tandatangan, sidik jari, dan sidik mata hanya bisa dimiliki oleh orang yang asli.</p>

<p>Website yang kita akses ditaruh di server. Tentunya server tidak memiliki anggota tubuh yang bisa dipastikan keunikannya. Untuk itu, kita membuat padanan sidik jari, yaitu suatu file yang disebut <code>private key</code>. File ini bisa kita buat di server itu sendiri, ataupun bisa kita buat di laptop dan kemudian dipasang (copy-paste/upload) ke server tersebut. Private key ini harus kita lindungi dengan baik. Karena bila orang lain sampai bisa mendapatkannya, sama saja dengan kita menyerahkan jari kita ke orang lain ataupun mengajari orang membuat tanda tangan kita.</p>

<p>Private key bentuknya adalah file text biasa yang isinya seperti ini
```
-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: AES-256-CBC,1CB1AC44166F92FA3817B5E95EDBF1E5</p>

<p>rhH0ueRW1uxTa2w2wY1r9bkm9eyFjDzXLAHMGoMpDyCCYiYQ4/BmFYx+68ElsYPO
+tV2iRz4OXthU2SXK+StBZYtE27BSUMbrR6NXNkZFCs9sEYGsJzoiyT/caHYr4p3
8gI+SJQc215oJdltpS8jML8Ygg3FCfOQoxnR9Ior0W3EKQtUbzsnkHLGH9s06Y8B
RyHb9hKB5YCiWBFo3lH4wfvSxb5A68s0hH0enGu6F/216TLis733E6PEgnhjwUvp
FTuKzie+UXWGRjNwPNUIYh74hmS3vfaj4c0tKDzrNcuO7tZmMGEEOJICyBjEMmDO
0PAUe+Cy0KqkckYfJCS8cN1lAgWuR1NrqaCezt87qVEbr3Om1H6z45ObwGNdnfUi
uncFPqkUrjRYriB6xt6+Lg2iyk2dhbwrU6vMxDG3VPvMiAvXXYBlUBPi4xlpKv28
awuLpaSM4yegiZO2wTjRoHECJJVHSADQ7KVRlCc5fRe+3QyIYRQmYG/u44J+ykDK
Fx7nvTSHy/qDsDYrmacHIJJAdzoxiWIDJ2MedvYdamJ6EGH2Zk+xBOpV+ss4slhq
nStKIUA0qR9Wnh3KicubosKsNo8yp3uzrNRO/f+cQdmItjMLjosOOKhIDNgD3xCv
csGziNQMq+iJ0mt6ntu+B+ETsaVsD4HspkxZpL9JHnqGKvn46DtJuvBeJ9TTQkZo
1doFj/wwk6ljNtibYWYpPFDaP9f7XAtlm6RQ+0Vm/X6pwTUKZA9/5ABqJ9YYIaIg
TvOgX1e5RpCANBKjXvQpuEyHsk24QzG5Q8tMuqBeXALl+I8XDFAVgkNBmeObp5Nw
02lQqb53t5sg4CN3+prtG18c1xU+g7t1mb3so/86ZHrZxY08Ykf+7Y1yO1rOBqkc
fRkhegMVWYzzxtE82FI2gp9cwDRTix1CAwRSMjItQnHua5il5UvigkIQLmZW96kV
Hh/CxZMyevcLMZHUdPrpiuA4fZBh4EA0Z0JXQy69bAe3gnAbw0ky0zsC5RttXGol
cfPCHKCKgvGVMDw6b+f9NhQQKlzjCscA+CbCTvUGPnu4+7KCoo6Z1652t3N9AoRB
wVds4AHqeH3+H6v8bDJ5yQv2aAAFMSnvMyUqkD1Rt960Qgbl8TUb6JHvvWnjbjvF
cA5AvkxiPWCQNRiHRIZHfhwysQv5gizu2CY04cKkn9ynvpajjKa5LVQr68kR57sH
Q2ymJkKlQw4wXCTYBrfVsNvGG5XZBrfz8brt8rHHgAKdBD8jordICwEqZlhBYPct
UQr0DTT0i+lA8AgKDTK9hcSa1G5hOO/ekUKwTnvBMjckWju1P4NF1aTOUg09eYEo
Z6OTR4kGi5Usdc9I8DuTloeb26+o88Meiqu2NX3bOGH50KHEA4zVJxPhMf48dOvk
0JFOUM39n81OIJTVcis6RkyMmTWRR8NUdTdvwlNpuETq6i1iXrVCeDT3tBA+KinN
LcEbheYfk/3aZoivZoFfGYNlD4HSMooauG9eZSdzvGf700u/7qhUB8kZEik9uaXh
QycMFVGSEVFnADP7Eb7H5Z/pZVq5iyG/lKAHh5He2m6dpnu2Q1pO6qdF/KQ7b8kZ
-----END RSA PRIVATE KEY-----
```</p>

<p>Private key dapat digunakan untuk dua hal, signature dan dekripsi. Digital signature bisa diumpamakan dengan kita membubuhkan tandatangan atau stempel di suatu dokumen. Dokumen yang saya stempel dan tandatangani bisa meyakinkan orang bahwa dokumen tersebut memang benar-benar berasal dari saya. Demikian juga dengan dokumen digital (file), dapat kita tandatangani/stempel dengan menggunakan private key. File yang sudah diberikan digital signature tidak bisa diubah ditengah jalan tanpa ketahuan. Bila diubah, maka digital signaturenya tidak cocok lagi.</p>

<p>Private key memiliki pasangan yang dinamakan public key. Public key ini tidak rahasia, dan bisa kita sebarluaskan pada siapapun yang membutuhkannya. Bila orang lain ingin mengirim pesan rahasia pada kita, dia bisa mengacak (enkripsi) pesan tersebut dengan menggunakan public key. Pesan yang sudah diacak tersebut hanya bisa dibuka dengan private key yang sesuai.</p>

<p>Jadi, untuk memiliki identitas, kita harus memiliki pasangan private dan public key.</p>

<h2>Trust Model</h2>

<p>Siapa saja bisa membuat pasangan key. Lalu bagaimana cara kita bisa tahu bahwa private key tertentu adalah milik orang tertentu?
Misalnya, Anda mendapat dokumen dari <code>Endy Muhardin</code> yang ditandatangani dengan private key <code>abcd-efgh-1234-5678</code>. Bagaimana kita yakin bahwa <code>abcd-efgh-1234-5678</code> adalah benar tandatangan dari <code>Endy Muhardin</code>?</p>

<p>Ada dua cara untuk mengatasi masalah ini,</p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Web_of_trust">Web of Trust</a></li>
<li><a href="http://en.wikipedia.org/wiki/Public-key_infrastructure">Public Key Infrastructure</a></li>
</ul>


<h3>Web of Trust</h3>

<p>Web of Trust bekerja dengan mekanisme referensi teman. Kita bisa tanyakan pada teman kita yang sudah pernah berinteraksi dengan <code>Endy Muhardin</code>, "Apakah benar <code>abcd-efgh-1234-5678</code> adalah tandatangan dari <code>Endy Muhardin</code> ?". Bila teman kita tidak ada yang pernah berinteraksi, maka kita bisa tanyakan pada temannya teman, temannya teman dari teman, dan seterusnya sampai ada yang bisa memastikan identitas dari tandatangan <code>abcd-efgh-1234-5678</code> tersebut.</p>

<p>Kembali ke analogi internet banking, bagaimana kalau saya baru saja launching dan belum memiliki referensi? Nah tentunya membangun jaringan referensi butuh waktu lama. Bisa jadi pada minggu-minggu pertama setelah launching tidak ada yang berani pakai internet banking saya, karena belum ada teman kita yang memiliki referensi.</p>

<p>Untuk itu, kita menggunakan mekanisme kedua, yaitu Public Key Infrastructure.</p>

<h3>Public Key Infrastructure</h3>

<p>Pada sistem ini, kita mempercayakan verifikasi identitas pada sekelompok orang/perusahaan. Kelompok ini dikenal dengan istilah Certificate Authority (CA). CA bertugas memberikan sertifikasi pada identitas digital, mirip dengan pemberian peringkat bintang pada hotel/penginapan.</p>

<p>Dengan mekanisme ini, bila kita ingin menginap di suatu hotel yang belum pernah kita datangi sebelumnya, kita tinggal melihat peringkatnya. Kita yakin bahwa <a href="https://en.wikipedia.org/wiki/Hotel_rating">hotel bintang lima</a> pasti lebih baik daripada bintang empat, dan seterusnya. Keyakinan ini kita dapatkan karena kita percaya dengan prosedur verifikasi yang telah dilakukan oleh lembaga pemeringkat hotel.</p>

<p>Kembali ke aplikasi internet banking kita, untuk mendapatkan sertifikasi dari CA, ada beberapa langkah yang harus dilakukan:</p>

<ol>
<li>Membuat pasangan private dan public key</li>
<li>Membuat sertifikat digital</li>
<li>Mengajukan sertifikat tersebut ke CA untuk disetujui</li>
<li>CA akan melakukan verifikasi terhadap identitas kita. Bila sukses, sertifikat kita akan disetujui oleh CA.</li>
<li>Memasang sertifikat yang telah disetujui CA di <del>pintu hotel</del> website kita</li>
</ol>


<p>Detail teknis untuk melakukan langkah-langkah ini akan kita bahas di artikel berikutnya.</p>

<p>Sistem public key infrastructure ini juga punya kelemahan. Beberapa CA pernah ditembus keamanannya oleh <a href="http://en.wikipedia.org/wiki/Comodo_Group#2011_breach_incident">orang Iran</a> dan <a href="http://en.wikipedia.org/wiki/Diginotar#Issuance_of_fraudulent_certificates">Turki</a> sehingga bisa mengeluarkan sertifikat palsu. Kronologi lengkapnya bisa dibaca <a href="http://blog.gerv.net/2011/09/diginotar-compromise/">di sini</a>.</p>

<p>Walaupun demikian, kita tidak perlu khawatir, karena begitu hal tersebut terungkap, CA yang bersalah akan langsung mendapatkan <a href="http://www.wired.com/threatlevel/2011/09/diginotar-bankruptcy/">hukuman mati dari masyarakat</a>. Dengan demikian, para CA tentu akan berusaha menjaga keamanannya dengan baik.</p>

<h2>Penggunaan SSL</h2>

<p>SSL digunakan pada protokol yang kita gunakan setiap hari, yaitu HTTP, SMTP, IMAP, dan POP3. HTTP kita gunakan untuk aplikasi web, sedangkan tiga sisanya kita gunakan untuk email. Cara kerjanya relatif sama, sebagai berikut:</p>

<ol>
<li>Kita membuka browser dan mengetik alamat website, misalnya <code>https://mail.google.com</code></li>
<li>Mekanisme DNS akan menerjemahkan alamat <code>mail.google.com</code> menjadi alamat IP, misalnya <code>123.123.123.123</code>.</li>
<li>Browser melakukan request ke <code>123.123.123.123</code>. Karena URLnya https, maka browser meminta sertifikat dari server</li>
<li>Server mengirim sertifikat yang sudah ditandatangani oleh CA.</li>
<li>Browser memiliki daftar CA yang sudah disetujui olehnya. Dengan daftar tersebut, browser melakukan verifikasi keabsahan tandatangan CA.</li>
<li>Bila tandatangan CA valid, berarti CA sudah memastikan bahwa sertifikat tersebut memang benar milik server <code>mail.google.com</code>. Browser akan menampilkan halaman web dengan tanda gembok hijau di address bar. Pada tahap ini, identitas server sudah dikonfirmasi. Berarti kita sudah menggunakan fitur <em>authentication</em> dari SSL.</li>
<li>Bila CA yang menandatangani tidak terdaftar, maka browser akan menampilkan halaman peringatan.</li>
<li>Browser membuat kode rahasia untuk enkripsi data. Kode rahasia ini dienkripsi menggunakan public key yang ada di dalam sertifikat server, sehingga hanya bisa dibuka oleh server yang memiliki sertifikat.</li>
<li>Server melakukan dekripsi terhadap data kode rahasia dari browser.</li>
<li>Komunikasi data antara server dan browser selanjutnya akan dienkripsi dengan kode rahasia tersebut. Pada tahap ini, kita sudah menggunakan fitur <em>confidentiality</em> dari SSL.</li>
</ol>


<p>Untuk protokol email (SMTP, IMAP, POP3) mekanismenya sama. Cukup gantikan kata <code>browser</code> dengan <code>mail-client</code> pada penjelasan di atas.</p>

<p>Demikian artikel SSL bagian pertama. Nantikan artikel selanjutnya tentang cara membuat dan membeli sertifikat SSL.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mematikan Location Service di Facebook Android]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/mematikan-location-service-di-facebook-android/"/>
    <updated>2013-02-04T11:23:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/mematikan-location-service-di-facebook-android</id>
    <content type="html"><![CDATA[<p>Jaman sekarang, berbagai layanan internet semakin ingin tahu saja
di mana kita sedang berada. Memang ada layanan yang dikhususkan untuk
mempublikasikan lokasi kita, seperti misalnya <a href="https://foursquare.com/">Foursquare</a> atau
<a href="https://latitude.google.com">Google Latitude</a>.
Tapi untuk kedua layanan tersebut, kita sendiri yang secara sukarela mempublikasikan lokasi kita.</p>

<p>Banyak aplikasi social lain yang sering kita gunakan, dan berusaha untuk mengetahui posisi kita setiap saat.
Tidak terkecuali aplikasi sejuta umat, yaitu <a href="http://facebook.com">Facebook</a>.
Setiap kali kita chat atau posting sesuatu, Facebook langsung memasang lokasi kita di posting atau pesan
yang kita taruh di Facebook.</p>

<p>Nah, pada artikel ini, kita akan membahas cara mematikan fitur tersebut
pada <a href="https://play.google.com/store/apps/details?id=com.facebook.katana">aplikasi Facebook yang berjalan di Android</a>.</p>

<!--more-->


<p>Ada dua tempat yang mempublikasikan lokasi kita, yaitu:</p>

<ul>
<li>Chat (Facebook Messenger)</li>
<li>Posting Status</li>
</ul>


<h1>Facebook Chat</h1>

<p>Bila kita sedang chat dengan teman di Facebook, maka di aplikasi akan tampil informasi lokasi kita
berikut dengan tombol panah untuk mematikan/menyalakan informasi lokasi tersebut.
Pada menu chat ini, tidak sulit untuk mematikannya, cukup sentuh saja icon tersebut hingga berganti warna
menjadi abu-abu. Biru artinya aktif, abu-abu artinya tidak aktif.</p>

<p>Lebih jelasnya bisa dilihat pada gambar berikut:</p>

<p><img src="/images/uploads/2013/02/04/messenger-location.png" title="messenger-location" ></p>

<p>Biasanya, sekali dimatikan akan tetap mati sampai kita nyalakan lagi.
Tapi untuk amannya, jangan lupa dicek sebelum kirim tombol <code>Send</code>.</p>

<h1>Posting Status</h1>

<p>Nah untuk menu posting status, Facebook lebih rewel. Pertama, kita lihat dulu screenshot aplikasi
pada saat kita ingin memposting sesuatu.</p>

<p><img src="/images/uploads/2013/02/04/posting-location.png" title="posting-location" ></p>

<p>Kita bisa lihat bahwa lokasi kita tercantum di sana. Untuk mematikannya, kita tekan icon bola dunia.
Aplikasi akan menampilkan menu pemilihan lokasi. Kita klik tanda silang di pojok kanan bawah seperti pada screenshot berikut.</p>

<p><img src="/images/uploads/2013/02/04/location-menu.png" title="location-menu" ></p>

<p>Selanjutnya, layar akan kembali ke menu posting. Kita bisa lihat bahwa informasi lokasi sudah tidak ada.</p>

<p><img src="/images/uploads/2013/02/04/after-disable.png" title="after-disable" ></p>

<p>Yang menyebalkan, informasi lokasi ini akan kembali aktif pada waktu kita mau posting lagi.
Sehingga kita harus mematikannya tiap kali mau posting.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Buku Panduan Markdown dan Pandoc]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/buku-panduan-markdown-dan-pandoc/"/>
    <updated>2012-09-26T12:26:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/buku-panduan-markdown-dan-pandoc</id>
    <content type="html"><![CDATA[<p>Menyusul <a href="http://software.endy.muhardin.com/aplikasi/membuat-dokumen-dengan-markdown-dan-pandoc/">postingan sebelumnya</a>, saya telah menulis buku panduan cara menggunakan Markdown dan Pandoc.</p>

<p>Buku ini tentu saja ditulis menggunakan Markdown dan dikonversi ke PDF menggunakan Pandoc. Silahkan digunakan:</p>

<ul>
<li>Source code ada di <a href="https://github.com/endymuhardin/buku-pandoc">Github</a></li>
<li>Hasil PDF yang sudah jadi bisa diunduh <a href="https://raw.github.com/endymuhardin/buku-pandoc/master/buku/markdown-dan-pandoc.pdf">di sini</a>.</li>
</ul>


<p>Semoga bermanfaat.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membuat dokumen dengan Markdown dan Pandoc]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/membuat-dokumen-dengan-markdown-dan-pandoc/"/>
    <updated>2012-09-05T11:53:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/membuat-dokumen-dengan-markdown-dan-pandoc</id>
    <content type="html"><![CDATA[<p>Sudah lama saya mencari format yang tepat untuk membuat dokumentasi. Baik untuk menulis ebook, user manual, modul pelatihan, dan berbagai keperluan penulisan lainnya. Beberapa fitur yang saya inginkan antara lain:</p>

<ol>
<li>berbentuk text file biasa. Dengan menggunakan format text file biasa, ada beberapa keuntungan yang bisa diambil:

<ul>
<li>Bisa dikelola di version control seperti Git atau Subversion</li>
<li>Bisa diedit di komputer, handphone, ataupun tablet</li>
<li>Ukurannya kecil, sehingga memudahkan penyimpanan di cloud storage seperti Dropbox</li>
</ul>
</li>
<li>Bisa dikonversi ke format lain, terutama pdf</li>
<li>Mudah dipahami</li>
<li>Bisa diwarnai dengan syntax highlighting</li>
<li>Bisa autocomplete</li>
</ol>


<p>Dari empat fitur di atas, yang wajib cuma yang pertama dan kedua saja. Fitur lainnya bersifat <em>nice to have</em>, ada syukur, gak ada juga tidak terlalu masalah.</p>

<!--more-->


<p>Setelah google kesana-kemari, ada dua format yang kira-kira memenuhi syarat di atas, yaitu <a href="http://en.wikipedia.org/wiki/Markdown">Markdown</a> dan <a href="http://en.wikipedia.org/wiki/DocBook">Docbook</a>. Dua-duanya mudah dipahami. Walaupun demikian, format Markdown lebih mudah diedit, karena menggunakan markup yang enak dilihat mata. Sedangkan Docbook menggunakan format XML, selain kurang WYSYWIG, juga bikin capek kelingking karena harus mengetik kurung siku terus menerus. Kurung siku ini juga menyulitkan kalau kita mengetik di handphone atau tablet.</p>

<p>Jadi, disimpulkan kita akan menggunakan format Markdown saja. Ini juga sejalan dengan aplikasi yang saya gunakan untuk menulis blog, yaitu <a href="http://octopress.org/">Octopress</a>. Untuk melihat bagaimana tampilan file markdown, silahkan unduh <a href="https://raw.github.com/endymuhardin/belajar-pandoc/master/01-akses-database-spring-25.md">file contoh yang saya gunakan di bawah</a>, kemudian buka dengan text editor primitif seperti Notepad atau Gedit.</p>

<p>Setelah dokumen ditulis, kita bisa melakukan konversi dengan menggunakan aplikasi bernama <a href="http://johnmacfarlane.net/pandoc/index.html">Pandoc</a>. Pandoc ini adalah aplikasi yang dibuat oleh <a href="http://johnmacfarlane.net/">John MacFarlane</a>, seorang profesor filosofi di University of California, Berkeley. Pandoc dibuat dengan bahasa pemrograman <a href="http://en.wikipedia.org/wiki/Haskell_(programming_language">Haskell</a>).</p>

<h1>Instalasi Pandoc</h1>

<p>Di Ubuntu, instalasinya tidak sulit, cukup jalankan perintah berikut:</p>

<p><code>sudo apt-get install pandoc texlive-latex-base texlive-xetex latex-beamer</code></p>

<p>Instalasi untuk Windows saya tidak tahu dan juga tidak berminat untuk cari tahu. Silahkan baca <a href="http://johnmacfarlane.net/pandoc/installing.html">petunjuk instalasi</a>.</p>

<h1>Cara Pemakaian</h1>

<p>Cara pakainya tidak sulit, cukup dengan perintah sederhana seperti ini:</p>

<p><code>pandoc -o hasil.pdf input.md</code></p>

<p>File <code>input.md</code> adalah tulisan kita dalam format markdown, sedangkan opsi <code>-o hasil.pdf</code> menunjukkan file output yang ingin dihasilkan. Pandoc cukup cerdas untuk mengetahui format output yang diinginkan dengan melihat ekstensi di nama file. Jadi, kalau kita berikan opsi <code>-o hasil.html</code>, dia akan mengkonversi tulisan kita menjadi file HTML.</p>

<p>Lebih jauh tentang cara pemakaian Pandoc bisa dilihat di <a href="http://johnmacfarlane.net/pandoc/README.html">user manualnya</a>. Selain itu, kita juga bisa melihat <a href="http://johnmacfarlane.net/pandoc/demos.html">berbagai contoh pemakaian Pandoc</a> di websitenya. Beberapa contoh yang menarik diantaranya adalah cara menghasilkan slide presentasi dengan format HTML, yaitu di contoh nomer 16.</p>

<h1>Customization</h1>

<p>Untuk kebutuhan modul pelatihan ArtiVisi, tentu kita membutuhkan sedikit penyesuaian, yaitu:</p>

<ul>
<li>font serif diganti menjadi Droid Serif. Font serif ini biasa digunakan untuk paragraf.</li>
<li>font sans diganti menjadi Droid Sans. Font sans biasa digunakan untuk judul.</li>
<li>font monospace diganti menjadi Inconsolata. Font monospace biasa digunakan untuk contoh kode program.</li>
<li>cover depan. Pandoc secara default tidak membuatkan cover depan. Kita perlu membuat template cover sendiri.</li>
</ul>


<p>Penyesuaian di atas dilakukan dengan cara membuat template dokumen. Template ini berbeda-beda tergantung jenis output yang akan dihasilkan.</p>

<h2>Template Open Office</h2>

<p>Untuk membuat template dokumen Open Office, berikut langkah-langkahnya:</p>

<ol>
<li>Generate dulu dokumen Open Office dengan perintah <code>pandoc -o hasil.odt input.md</code></li>
<li>Buka <code>hasil.odt</code> dengan Open Office.</li>
<li>Edit masing-masing style yang digunakan, misalnya TextBody, PreformattedText, dsb.</li>
<li>Simpan dokumen tersebut, dan rename menjadi <code>template.odt</code></li>
<li>Generate lagi dokumen Open Office menggunakan template tersebut dengan perintah <code>pandoc --reference-odt=template.odt -o hasil.odt input.md</code></li>
</ol>


<p>Cara ini saya dapatkan dari <a href="http://maketecheasier.com/use-pandoc-convert-text-to-ebook/2012/09/01">tutorial ini</a>.</p>

<h2>Template PDF</h2>

<p>Pandoc menghasilkan dokumen PDF secara dua tahap. Tahap pertama adalah konversi dari <code>Markdown</code> menjadi <code>LaTeX</code>. Kemudian dari format <code>LaTeX</code> akan dikonversi lagi menjadi <code>PDF</code>. Perlu diperhatikan, yang dimaksud <code>LaTeX</code> di sini adalah format penulisan dokumen, bukan bahan baku pembuatan alat kontrasepsi.</p>

<p>Dengan demikian, untuk menyesuaikan output PDF, kita perlu membuat template <code>LaTeX</code>. Prof John sudah memberi tahu cara pakai template di contoh nomer 14. Di situ kita bisa mengunduh <a href="http://johnmacfarlane.net/pandoc/demo/mytemplate.tex">contoh template</a> yang dia gunakan. Contoh template ini akan menjadi titik awal kita untuk melakukan penyesuaian.</p>

<p>Di contoh template tersebut, beliau sudah memasang font yang bisa dicustomize melalui opsi <code>--variable</code>. Yang kurang adalah halaman sampul (cover page). Saya menemukan <a href="http://www.latextemplates.com/">daftar template cover yang siap pakai</a>, dan juga <a href="http://en.wikibooks.org/wiki/LaTeX/Title_Creation">tutorial cara mendesain cover sendiri</a>. Untuk penyesuaian lebih lanjut, kita bisa berpedoman pada <a href="http://en.wikibooks.org/wiki/LaTeX/Command_Glossary">dokumentasi perintah Latex</a>.</p>

<p>Setelah template selesai dibuat, kita bisa langsung gunakan dengan perintah sebagai berikut:</p>

<p><code>sh
pandoc --template artivisi-template.tex  --variable mainfont="Droid Serif" --variable sansfont="Droid Sans" --variable fontsize=12pt --variable version=1.0 --variable subtitle="Mengakses database menggunakan Spring-JDBC" --latex-engine=xelatex --toc -N -o hasil.pdf *md
</code></p>

<p>Anda bisa melihat <a href="https://raw.github.com/endymuhardin/belajar-pandoc/master/output/coba.pdf">file PDF yang dihasilkan</a>, <a href="https://raw.github.com/endymuhardin/belajar-pandoc/master/00-cover.md">file markdown untuk cover</a>, <a href="https://raw.github.com/endymuhardin/belajar-pandoc/master/01-akses-database-spring-25.md">file markdown isi artikel</a>, dan <a href="https://raw.github.com/endymuhardin/belajar-pandoc/master/artivisi-template.tex">template LaTeX yang digunakan</a>. Atau bisa juga unduh <a href="https://nodeload.github.com/endymuhardin/belajar-pandoc/zipball/master">file zip</a> yang berisi semua file yang dibutuhkan untuk menjalankan perintah di atas.</p>

<h1>Kesimpulan</h1>

<p>Dengan menggunakan format berbasis text, kita bisa memperoleh keuntungan sebagai berikut:</p>

<ul>
<li>bisa diedit menggunakan aplikasi apa saja, termasuk Notepad</li>
<li>bisa dikelola menggunakan aplikasi version control</li>
<li>bisa diedit kapan saja dan di mana saja (menggunakan Dropbox) dengan device apa saja (handphone, tablet, komputer)</li>
<li>penulis bisa lebih fokus pada isi artikel, tidak memusingkan urusan formatting seperti besar kecil huruf, jenis font, penomoran bab, dan hal-hal lain yang bersifat tampilan</li>
</ul>


<p>Aplikasi pandoc bisa digunakan untuk mengkonversi berbagai format file seperti Markdown, Docbook, LaTeX, dan sebagainya menjadi berbagai format seperti PDF, HTML, Open Office, Microsoft Word, dan sebagainya.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Terima kasih Wordpress]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/terima-kasih-wordpress/"/>
    <updated>2012-08-09T13:54:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/terima-kasih-wordpress</id>
    <content type="html"><![CDATA[<p>Sejak pertama saya membuat blog, aplikasi yang saya gunakan adalah <a href="http://www.wordpress.org">Wordpress</a>. Aplikasi Wordpress sangat mudah digunakan dan banyak fiturnya. Selain itu, themes gratisan di internet juga berlimpah ruah, sehingga kita bisa ganti tampilan setiap hari kalau mau.</p>

<p>Walaupun demikian, zaman berganti, dan cara kita bekerja juga berubah. Saya saat ini lebih banyak berkutat di pemrograman dengan workflow sebagai berikut :</p>

<ol>
<li>Buka text editor</li>
<li>Edit source code</li>
<li>Jalankan di local dan test</li>
<li>Kalau sudah ok, simpan di version control (commit)</li>
<li>Ulangi ke langkah 2 sampai selesai</li>
<li>Begitu sudah siap untuk sharing hasil pekerjaan, upload (push) perubahan ke version control pusat.</li>
</ol>


<p>Workflow ini sayangnya tidak dapat dilakukan untuk menulis blog. Workflow saya dalam menulis blog biasanya seperti ini:</p>

<ol>
<li>Buka text editor</li>
<li>Ketik dalam format text file biasa, dengan menggunakan HTML tag bila perlu</li>
<li>Simpan di folder Dropbox selama masih draft</li>
<li>Setelah siap dipublish, buka Wordpress di browser</li>
<li>Login ke Wordpress</li>
<li>Create New Post</li>
<li>Copy - Paste dari text editor</li>
<li>Preview dan rapikan lagi</li>
<li>Publish</li>
</ol>


<p>Seperti bisa kita lihat, dengan workflow di atas, praktis fitur-fitur Wordpress yang serba canggih tidak termanfaatkan. Oleh karena itu, sudah tiba saatnya untuk mencari aplikasi blogging yang <strong>lebih sedikit</strong> fiturnya. Biasanya orang mengganti aplikasi dengan yang lebih banyak fiturnya, tapi kali ini saya melakukan hal yang sebaliknya.</p>

<!--more-->


<p>Setelah mencari berbagai alternatif, pilihan jatuh ke <a href="https://github.com/mojombo/jekyll/">Jekyll</a>. Jekyll adalah static content generator. Kita menulis artikel dalam format <a href="http://daringfireball.net/projects/markdown/">Markdown</a>, yaitu text file biasa dengan sedikit markup yang enak dilihat mata. Kalau kita pernah mengedit wiki, format Markdown tidak asing lagi bagi kita.</p>

<p>Cara kerja Jekyll berbeda dengan aplikasi blog atau CMS pada umumnya. Kalau kita menggunakan Wordpress, Joomla, Drupal, dsb, artikel kita akan disimpan di database. Berdasarkan URL atau link yang diklik pengunjung, aplikasi CMS akan mencarikan artikel di database, memproses formattingnya, dan menampilkan ke browser. Aplikasi CMS biasanya kita instal di server kita di internet, sehingga server kita tersebut harus mendukung bahasa pemrograman yang digunakan CMS dan juga harus memiliki database server. Sebagai contoh, untuk menjalankan Wordpress, server kita harus bisa PHP dan memiliki MySQL.</p>

<p>Berbeda dengan Wordpress, Joomla, Drupal, dan CMS pada umumnya, blog yang dibuat dengan Jekyll tidak dynamic. Semua variabel dan logika looping diproses di komputer kita sendiri. Hasil pemrosesan ini menghasilkan file HTML yang sudah jadi. File HTML inilah yang kita upload ke server. Dengan demikian, di dalam server semua file bersifat static.</p>

<p>Ada beberapa konsekuensi dari static website seperti ini.
Sisi positifnya :</p>

<ul>
<li>kebutuhan server menjadi lebih sederhana, tidak perlu lagi PHP dan MySQL</li>
<li>halaman artikel bisa ditampilkan dengan lebih cepat karena tidak perlu query dan pemrosesan</li>
<li>karena tidak ada query dan proses, mau berapapun request per detik tidak terlalu membebani CPU/RAM/Disk</li>
<li>anti dihack, kecuali sistem operasinya yang ditembus. Kalau kita pakai Wordpress dkk, kita harus rajin upgrade untuk menambal bug security yang baru saja difix.</li>
</ul>


<p>Sisi negatifnya :</p>

<ul>
<li>tidak bisa menampung komentar. Ini saya atasi dengan Facebook Comment.</li>
</ul>


<p>Nah, karena positifnya lebih banyak dari negatifnya, maka saya putuskan untuk migrasi.</p>

<p>Saya tidak menggunakan Jekyll yang aslinya, melainkan framework yang dibuat di atas Jekyll. Ada beberapa pilihan, misalnya <a href="http://jekyllbootstrap.com/">Jekyll Bootstrap (JB)</a>, <a href="http://ruhoh.com/">Ruhoh</a>, dan <a href="http://octopress.org">Octopress</a>. Ruhoh rupanya dibuat oleh orang yang sama dengan pembuat JB karena dia sudah bosan dengan JB, dan nampaknya dia juga sedang sibuk sehingga Ruhoh juga tidak dimaintain. Jadilah pilihan jatuh ke Octopress.</p>

<p>Octopress memiliki berbagai fitur, diantaranya:</p>

<ul>
<li>Source code formatting. Ini adalah fitur yang sulit digunakan di Wordpress. Harus instal berbagai plugin dan sering berantakan tampilannya. Ini menyebabkan saya harus menggunakan <a href="http://gist.github.com">Gist</a>.</li>
<li>Deploy script ke Github, Heroku, dan rsync. Dengan fitur ini, saya bisa membuat <a href="http://endymuhardin.github.com">mirror blog saya di Github</a>.</li>
<li>Berbagai plugin yang sudah disertakan secara built in, misalnya tag khusus untuk image dan video.</li>
</ul>


<p>Proses migrasi berjalan sebagai berikut :</p>

<ol>
<li>Setup Octopress</li>
<li>Customize theme</li>
<li>Unduh artikel lama di Wordpress menggunakan <a href="https://github.com/thomasf/exitwp/">exitwp.py</a></li>
<li>Bersihkan beberapa tag yang tidak kompatibel, diantaranya tabel, gist, dan image</li>
<li>Pindahkan artikel ke Octopress</li>
<li>Generate dan deploy</li>
</ol>


<h1>Setup Octopress</h1>

<p>Octopress disiapkan dengan beberapa langkah berikut :</p>

<ol>
<li>Install Ruby dengan RVM</li>
<li>Install Jekyll</li>
<li>Clone repository Octopress</li>
<li>Konfigurasi Octopress</li>
</ol>


<p>Ada beberapa konfigurasi yang saya lakukan, yaitu :</p>

<h2>Informasi Umum</h2>

<p><code>ruby _config.yml
url: http://endy.artivisi.com/blog
title: Living life and make it better
subtitle: life, learn, contribute
author: Endy Muhardin
</code></p>

<h2>Permalink</h2>

<p>Supaya sama dengan URL blog lama, format URL di Octopress juga harus disesuaikan sbb :</p>

<p><code>ruby _config.yml
permalink: /:categories/:title/
</code></p>

<h2>Pagination</h2>

<p>Di halaman pertama cukup tampilkan 3 entri terbaru. Di sidebar, tampilkan 10 link artikel terakhir.</p>

<p><code>ruby _config.yml
paginate: 3
recent_posts: 10
</code></p>

<h1>Customize Theme</h1>

<p>Supaya tidak keliatan seragam, saya mencari theme untuk Octopress. Sejauh ini baru menemukan <a href="https://github.com/amelandri/darkstripes">Darkstripes</a>, jadi langsung saja dipasang.</p>

<h1>Mengolah artikel lama</h1>

<p>Sebetulnya ada beberapa cara untuk memigrasi artikel lama. Saya menggunakan exitwp yang nampaknya lebih mudah. Berikut langkah-langkahnya :</p>

<ol>
<li>Export dulu artikel lama dari Wordpress ke format XML.</li>
<li>Jalankan exitwp.py untuk mengkonversi ke format markdown.</li>
</ol>


<h2>Memproses tag image</h2>

<p>Selanjutnya, saya harus membersihkan tag image dan caption bawaan Wordpress, karena tidak bisa tampil dengan baik. Saya menggunakan perintah sed di linux agar bisa memproses banyak file sekaligus.</p>

<p></p>

<p>Berikut perintah untuk memperbaiki tag image yang tadinya seperti ini <code>![Synergy Screenshot](/images/uploads/2006/05/synergy.gif)</code> menjadi seperti ini <code>{% img /uploads/2006/05/synergy.gif Synergy Screenshot %} </code>, saya gunakan perintah berikut :</p>

<p><code>sh
find . -name "*.markdown" -print | xargs sed -i "s|\[!\[\(.*\)\](\(.*\))\](\(.*\))|{% img \2 \1 %}|g"
</code></p>

<p>Tag caption juga harus dihilangkan, berikut perintahnya:</p>

<p><code>sh
find . -name "*.markdown" -print | xargs sed -i "s|\[caption.*\]\(.*\)\[/caption\]|\1|g"
</code></p>

<p>Secara default, exitwp akan menghasilkan tag image dengan URL lengkap, misalnya <code>http://endy.artivisi.com/blog/wp-content|/images/uploads/2006/05/synergy.gif</code> dan masih mengarah ke Wordpress. Saya ingin mengubah ini menjadi URL relatif, yaitu <code>/images/uploads/2006/05/synergy.gif</code></p>

<p>Berikut perintahnya :</p>

<p><code>sh
find . -name "*.markdown" -print | xargs sed -i "s|http://endy.artivisi.com/blog/wp-content|/images|g"
</code></p>

<h2>Memproses tag gist</h2>

<p>Seperti saya tuliskan di sini, saya menggunakan plugin Wordpress untuk <a href="http://endy.artivisi.com/blog/Aplikasi/menggunakan-gist/">menampilkan Gist</a>. Octopress sudah memiliki dukungan sendiri terhadap Gist, sehingga harus ada proses konversi. Berikut perintahnya :</p>

<p><code>sh
find . -name "*.markdown" -print | xargs sed -i "s|\[gist id=\(.*\) file=\(.*\)\]|{% gist \1 \2 %}|g"
find . -name "*.markdown" -print | xargs sed -i "s| bump=.||g"
</code></p>

<h1>Facebook Comment</h1>

<p>Untuk menggantikan fitur komentar, ada beberapa alternatif yang bisa digunakan, diantaranya :</p>

<ul>
<li>Disqus</li>
<li>Facebook</li>
<li>Tanpa comment</li>
</ul>


<p>Melihat audiens blog yang rata-rata memiliki akun Facebook, maka baiklah kita pilih Facebook saja. Cara mengaktifkannya bisa dibaca <a href="http://blog.grambo.me.uk/blog/2012/02/20/adding-facebook-comments-to-octopress/">di tutorial ini</a>. Ada sedikit bug disana, yaitu pada file <code>post.html</code> dan <code>page.html</code>. Harusnya seperti ini :</p>

<p>``` ruby
{% if site.facebook_appid and page.comments == true %}
  <section></p>

<pre><code>&lt;h1&gt;Comments&lt;/h1&gt;
&lt;div id="facebook_comments" aria-live="polite"&gt;
  {% include post/facebook_comments.html %}
&lt;/div&gt;
</code></pre>

<p>  </section>
{% endif %}
```
</p>

<h1>Penutup</h1>

<p>Sebetulnya sedih juga berpisah dengan Wordpress yang telah setia menemani hampir 7 tahun lamanya, tapi life must go on. Wordpress, terima kasih atas kebersamaan selama 7 tahun ini. Mudah-mudahan engkau akan berevolusi lebih baik lagi sehingga di lain waktu kita bisa bersama lagi.</p>
]]></content>
  </entry>
  
</feed>
