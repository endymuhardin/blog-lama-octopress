<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: aplikasi | Living life and make it better]]></title>
  <link href="http://software.endy.muhardin.com/categories/aplikasi/atom.xml" rel="self"/>
  <link href="http://software.endy.muhardin.com/"/>
  <updated>2015-02-13T23:05:23+07:00</updated>
  <id>http://software.endy.muhardin.com/</id>
  <author>
    <name><![CDATA[Endy Muhardin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Membuat Blog Gratis di Openshift]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/membuat-blog-gratis-di-openshift/"/>
    <updated>2015-02-13T22:28:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/membuat-blog-gratis-di-openshift</id>
    <content type="html"><![CDATA[<blockquote><p>Pengen cepat jadi expert?</p></blockquote>

<p>Caranya sederhana. Cukup bikin blog, kemudian konsisten menulis tentang topik tertentu paling tidak seminggu sekali.</p>

<blockquote><p>Waduh, menulis itu sulit. Apalagi konsisten.</p></blockquote>

<p>Makanya saya bilang sederhana, bukan mudah :)</p>

<p>Sebetulnya membuat blog jaman sekarang sudah semakin mudah dan murah. Tanpa keluar uang sepeserpun kita sudah bisa punya blog bagus. Desain tampilan juga banyak tersedia free. Bahkan desain gratis tersebut sudah <em>responsive</em>, artinya tetap bagus dilihat dari berbagai ukuran layar.</p>

<p>Setelah blog kita jadi, tempat menaruhnya pun gratis. Beberapa yang populer diantaranya: <a href="http://www.wordpress.com/">wordpress</a>, <a href="https://www.tumblr.com/">tumblr</a>, dan lain sebagainya.</p>

<p>Buat kita para programmer, tersedia juga aplikasi blog yang geeky, diantaranya <a href="http://jekyllrb.com/">jekyll</a>, <a href="http://octopress.org/">octopress</a> (dibangun di atas jekyll), <a href="https://middlemanapp.com/basics/blogging/">middleman</a>, <a href="https://ghost.org/">ghost</a>, <a href="https://iwantmyname.com/blog/2011/02/list-static-website-generators.html">dan teman-temannya</a>.</p>

<p>Berbagai aplikasi yang saya sebutkan di atas memiliki kesamaan, semuanya adalah <a href="https://wiki.python.org/moin/StaticSiteGenerator">static content generator</a>. Artinya, dia mengkonversi tulisan kita menjadi HTML. File HTML tersebut tinggal kita upload ke webserver merek apapun. Dia juga tidak butuh database server. Ini akan sangat menyederhanakan kebutuhan di sisi server.</p>

<p>Pada artikel ini, kita akan membahas cara membuat blog menggunakan Jekyll dan kemudian memasangnya di PaaS provider Openshift.</p>

<!--more-->


<p>Sebetulnya ada beberapa provider yang mendukung Jekyll, selain Openshift kita juga bisa pakai Heroku atau Github. Cara deploy ke kedua provider tersebut sudah dijelaskan di dokumentasi Jekyll, sehingga tidak perlu kita bahas lagi.</p>

<p><img src="https://lh5.googleusercontent.com/-0v-aweJAqUQ/VNSNiRPuxbI/AAAAAAAAH38/gzzHemMzJEY/w916-h558-no/07.%2BJekyll%2BHomepage.png" alt="Dokumentasi Deployment" /></p>

<p>Secara garis besar, berikut langkah-langkah yang akan kita kerjakan:</p>

<ol>
<li>Instalasi Jekyll</li>
<li>Mencari theme yang cocok</li>
<li>Mulai menulis artikel</li>
<li>Compile dan Preview di komputer kita</li>
<li>Buat akun Openshift</li>
<li>Buat aplikasi untuk blog kita</li>
<li>Deploy ke Openshift</li>
<li>Periksa hasilnya</li>
</ol>


<h2>Instalasi Jekyll</h2>

<p>Jekyll merupakan aplikasi yang dibuat dengan Ruby. Dengan demikian, kita perlu menginstall Ruby terlebih dulu.</p>

<h3>Instalasi Ruby</h3>

<p>Tambahkan repository PPA brightbox.</p>

<p><code>
sudo apt-add-repository ppa:brightbox/ruby-ng
</code></p>

<p>Update database aplikasi</p>

<p><code>
sudo apt-get update
</code></p>

<p>Install Ruby 1.9</p>

<p><code>
sudo apt-get install ruby1.9.3
</code></p>

<p>Setelah itu, kita bisa langsung menginstall jekyll</p>

<p><code>
sudo gem install jekyll
</code></p>

<h2>Jekyll Theme</h2>

<p>Sebetulnya pada titik ini kita sudah bisa langsung membuat website dengan perintah</p>

<p><code>
jekyll new blogsaya
</code></p>

<p>Tetapi, kita tentu ingin tampilan yang menarik. Untuk itu, kita cari dulu theme yang bagus untuk Jekyll.</p>

<p><img src="https://lh4.googleusercontent.com/--lDlOyCn2Tw/VNSNva-nFTI/AAAAAAAAH4c/uNvFEtLvnBA/w791-h582-no/10.%2BCari%2BTheme.png" alt="Mencari theme Jekyll" /></p>

<p>Ada banyak hasil di sana. Coba satu persatu sampai ketemu yang cocok.</p>

<p>Baca instruksinya, dia bilang langsung saja extract.</p>

<p><img src="https://lh4.googleusercontent.com/-VMnzqkZ07dA/VNSNvmnMcXI/AAAAAAAAH4Y/TQ9en2RctLI/w855-h578-no/11.%2BDownload%2Bdan%2BExtract.png" alt="Extract Theme" /></p>

<p>Berikut isi folder setelah diextract.</p>

<p><img src="https://lh3.googleusercontent.com/-dt0_MXF-F_E/VNSN8_MmXLI/AAAAAAAAH4k/3VLoa6em0mY/w855-h578-no/12.%2BHasil%2BExtract.png" alt="Hasil Extract" /></p>

<p>Coba kita jalankan dengan perintah <code>bundle exec jekyll serve</code></p>

<p><img src="https://lh5.googleusercontent.com/-w7tQ96eZQ8o/VNSOBSAWlDI/AAAAAAAAH4s/QDyxCTb-lKU/w728-h494-no/13.%2BJalankan%2Bdi%2Blocal.png" alt="Run Jekyll" /></p>

<p>Kemudian browse ke <code>http://localhost:4000</code>.</p>

<p><img src="https://lh5.googleusercontent.com/-4E-myZULncY/VNSOJDurMBI/AAAAAAAAH40/jiwixObwMnw/w917-h566-no/14.%2BBrowse%2BLocal.png" alt="Local Deployment" /></p>

<p>Nah, website kita sudah jalan di komputer kita sendiri. Sekarang, tinggal kita pasang di Openshift.</p>

<h2>Pendaftaran Openshift</h2>

<p>Kita perlu membuat akun di Openshift terlebih dulu. Caranya mudah, langsung saja isi form yang disediakan di websitenya.</p>

<p><img src="https://lh3.googleusercontent.com/-RAP1-lNzkkk/VNSNcEHC_oI/AAAAAAAAH3Y/9hRUK_dB3CM/w916-h528-no/01.%2BOpenshift%2BWebsite.png" alt="Website Openshift" /></p>

<h2>Membuat Aplikasi</h2>

<p>Setelah membuat akun dan login, kita bisa langsung klik link untuk membuat aplikasi baru.</p>

<p><img src="https://lh4.googleusercontent.com/-osxSBeceqjc/VNSNbx9oc1I/AAAAAAAAH3U/vTV27OtGsLA/w916-h522-no/02.%2BOpenshift%2BWelcome.png" alt="Welcome Screen" /></p>

<p>Untuk aplikasi Jekyll, Openshift telah menyediakan starter pack khusus (cartridge dalam istilah Openshift). Langsung saja search</p>

<p><img src="https://lh4.googleusercontent.com/-W_H0vkwfxS8/VNSNcNWgLLI/AAAAAAAAH3c/WR0cj05L0QQ/w876-h623-no/03.%2BJenis%2BAplikasi.png" alt="Search Cartridge" /></p>

<p>Kemudian klik</p>

<p><img src="https://lh4.googleusercontent.com/-sHIp8sVVCpY/VNSNfEgoYvI/AAAAAAAAH3s/57pQUsECd5A/w898-h623-no/04.%2BJekyll%2BCartridge.png" alt="Jekyll Cartridge" /></p>

<p>Isikan nama aplikasi</p>

<p><img src="https://lh4.googleusercontent.com/-Gxc-Bkk9USk/VNSNf1PmZCI/AAAAAAAAH3w/uBq-Nux9ceY/w857-h623-no/05.%2BCukup%2Bisi%2Bnama%2Baplikasi.png" alt="Nama Aplikasi" /></p>

<p>Klik OK. Aplikasi sudah dibuat. Kita akan diberikan URL untuk melakukan <code>git clone</code></p>

<p><img src="https://lh3.googleusercontent.com/-siiXJ3o4rwo/VNSNgEMQjwI/AAAAAAAAH30/E9VrPkeHglU/w868-h623-no/06.%2BAplikasi%2Bselesai%2Bdibuat.png" alt="Sukses" /></p>

<p>Sebetulnya ini juga bisa kita lakukan melalui command prompt.</p>

<p>Install dulu aplikasi Openshift di komputer. Aplikasinya dibuat menggunakan Ruby, sehingga kita gunakan <code>gem</code> untuk menginstalnya</p>

<p>Setelah terinstall, kita login dulu</p>

<p><code>
rhc setup
</code></p>

<p>dia akan meminta username dan password Openshift kita. Kemudian menampilkan daftar aplikasi yang sudah kita miliki.</p>

<p>```
OpenShift Client Tools (RHC) Setup Wizard</p>

<p>This wizard will help you upload your SSH keys, set your application namespace,
and check that other programs like Git are properly installed.</p>

<p>If you have your own OpenShift server, you can specify it now. Just hit enter to
use the server for OpenShift Online: openshift.redhat.com.
Enter the server hostname: |openshift.redhat.com|</p>

<p>You can add more servers later using 'rhc server'.</p>

<p>Using an existing token for endy.muhardin@gmail.com to login to
openshift.redhat.com</p>

<p>Saving configuration to /home/endy/.openshift/express.conf ... done</p>

<p>Checking for git ... found git version 2.2.2</p>

<p>Checking common problems .. done</p>

<p>Checking for a domain ... endymuhardin</p>

<p>Checking for applications ... found 1</p>

<p>  blogbisnis http://blogbisnis-endymuhardin.rhcloud.com/</p>

<p>  You are using 1 of 3 total gears
  The following gear sizes are available to you: small</p>

<p>Your client tools are now configured.
```</p>

<p>Setelah berhasil login, kita buat aplikasi dengan menggunakan cartridge Jekyll</p>

<p><code>
rhc app create jekyll https://raw.github.com/openshift-cartridges/openshift-jekyll-cartridge/master/metadata/manifest.yml
</code></p>

<p>Aplikasi siap diisi</p>

<p>Jangan lupa catat URL aplikasi. Inilah URL yang akan menampilkan blog kita nantinya. Berikut adalah URL aplikasi yang kita dapatkan sesuai contoh di atas</p>

<h2>Proses Deployment</h2>

<p>Deployment Openshift dilakukan menggunakan aplikasi version control Git.</p>

<p>Pertama, kita clone dulu repo aplikasi yang sudah dibuatkan Openshift.</p>

<p><code>
git clone ssh://54d478d14382ec586c000058@blogbisnis-endymuhardin.rhcloud.com/~/git/blogbisnis.git blogbisnis
</code></p>

<p>Kemudian, pindahkan blog Jekyll kita tadi ke dalam folder hasil clone dari Openshift</p>

<p>Selanjutnya commit seperti biasa</p>

<p><code>
git add -A .
git commit -m "commit pertama website jekyll"
</code></p>

<p>Lalu lakukan push untuk mendeploy</p>

<p><code>
git push
</code></p>

<p>Berikut output dari perintah di atas</p>

<p><code>
Counting objects: 155, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (149/149), done.
Writing objects: 100% (155/155), 1.24 MiB | 0 bytes/s, done.
Total 155 (delta 8), reused 0 (delta 0)
remote: Stopping jekyll cart
remote: Sending SIGTERM to jekyll:193432 ...
remote: Building git ref 'master', commit 52fa2f6
remote: Preparing build for deployment
remote: Deployment id is 45c5465a
remote: Activating deployment
remote: Starting jekyll cart
remote: Executing bundle install
remote: Fetching gem metadata from https://rubygems.org/.........
remote: Resolving dependencies...
remote: Using blankslate (2.1.2.4)
remote: Using hitimes (1.2.2)
remote: Using timers (4.0.1)
remote: Using celluloid (0.16.0)
remote: Using fast-stemmer (1.0.2)
remote: Using classifier-reborn (2.0.3)
remote: Using coffee-script-source (1.9.0)
remote: Using execjs (2.3.0)
remote: Using coffee-script (2.3.0)
remote: Using colorator (0.1)
remote: Using ffi (1.9.6)
remote: Using jekyll-coffeescript (1.0.1)
remote: Using jekyll-gist (1.1.0)
remote: Using jekyll-paginate (1.1.0)
remote: Using sass (3.4.11)
remote: Using jekyll-sass-converter (1.3.0)
remote: Using rb-fsevent (0.9.4)
remote: Using rb-inotify (0.9.5)
remote: Using listen (2.8.5)
remote: Using jekyll-watch (1.2.1)
remote: Using kramdown (1.5.0)
remote: Using liquid (2.6.2)
remote: Using mercenary (0.3.5)
remote: Using posix-spawn (0.3.9)
remote: Using yajl-ruby (1.2.1)
remote: Using pygments.rb (0.6.2)
remote: Using redcarpet (3.2.2)
remote: Using safe_yaml (1.0.4)
remote: Using parslet (1.5.0)
remote: Using toml (0.1.2)
remote: Using jekyll (2.5.3)
remote: Installing jekyll-sitemap (0.8.0)
remote: Installing octopress-deploy (1.0.5)
remote: Installing octopress-hooks (2.4.1)
remote: Installing octopress-escape-code (2.0.6)
remote: Installing titlecase (0.1.1)
remote: Installing octopress (3.0.0.rc.32)
remote: Using bundler (1.3.5)
remote: Your bundle is complete!
remote: Use `bundle show [gemname]` to see where a bundled gem is installed.
remote: Starting Jekyll server
remote: Found 127.6.249.129:8080 listening port
remote: -------------------------
remote: Git Post-Receive Result: success
remote: Activation status: success
remote: Deployment completed with status: success
To ssh://54d478d14382ec586c000058@blogbisnis-endymuhardin.rhcloud.com/~/git/blogbisnis.git
   722b0dc..52fa2f6  master -&gt; master
</code></p>

<p>Coba browse ke url aplikasi kita di Openshift, yaitu <code>http://blogbisnis-endymuhardin.rhcloud.com</code></p>

<p><img src="https://lh6.googleusercontent.com/-iY15Z743RWw/VNSORWJhavI/AAAAAAAAH5E/YgL7ibpTUOc/w874-h623-no/15.%2BDeploy%2Bke%2BOpenshift.png" alt="Deploy di Openshift" /></p>

<p>Voila, website kita sudah selesai.</p>

<h2>Custom Domain</h2>

<p>Pada titik ini sebetulnya website kita sudah berfungsi dengan sempurna. Walaupun demikian, untuk keperluan personal branding ini belum maksimal, karena namanya masih mengandung nama Redhat dan berbau gratisan. Dengan menambah investasi USD10 per tahun, kita bisa membeli domain atas nama kita sendiri, misalnya <code>endy.muhardin.com</code> untuk kemudian kita arahkan ke website kita tadi.</p>

<p>Proses pembelian domain tidak akan saya ceritakan di sini karena amat sangat terlalu mudahnya. Asumsikan saja kita sudah punya domain dan DNS server untuk mengaturnya.</p>

<p>Cara untuk mengaktifkan custom domain di Openshift bisa dicari dengan mudah di Google</p>

<p><img src="https://lh6.googleusercontent.com/-eWzSXRQo5wI/VNSOSNew31I/AAAAAAAAH5M/1MqLL4CsW3w/w744-h623-no/16.%2BCari%2Bcara%2Buntuk%2Bcustom%2Bdomain.png" alt="Search Custom Domain Deployment" /></p>

<p>Kita akan mendapatkan tutorialnya di website Openshift sendiri</p>

<p><img src="https://lh3.googleusercontent.com/-p8QXyZfZDEA/VNSOSPxhrtI/AAAAAAAAH5I/OT5C0HVx1EY/w891-h552-no/17.%2BCommand%2Balias.png" alt="Cara setting custom domain" /></p>

<h3>Konfigurasi DNS</h3>

<p>Agar nama domain kita tadi mengarah ke website kita, perlu ditambahkan konfigurasi CNAME di DNS. Berikut ilustrasinya dengan menggunakan layanan ClouDNS yang saya gunakan</p>

<p><img src="https://lh5.googleusercontent.com/-YqGp8TjNQsQ/VNSOUI7qP4I/AAAAAAAAH5g/n8U3y1YHxBQ/w917-h376-no/18.%2BDNS%2BConfig.png" alt="Edit CNAME ClouDNS" /></p>

<p>Seperti Anda lihat pada screenshot di atas, saya memiliki beberapa domain lain yang mengarah ke github dan heroku. Yaitu</p>

<ul>
<li><a href="http://software.endy.muhardin.com">software.endy.muhardin.com</a> : mengarah ke servernya Github</li>
<li><a href="http://rana.endy.muhardin.com">rana.endy.muhardin.com</a> : mengarah ke servernya Heroku</li>
</ul>


<p>Tambahkan entri berjenis CNAME untuk nama domain <code>bisnis.endy.muhardin.com</code> dan arahkan ke <code>blogbisnis-endymuhardin.rhcloud.com</code>.</p>

<p><img src="https://lh4.googleusercontent.com/-U0uF8BdRJcE/VNSOUssKWXI/AAAAAAAAH5c/4Y6MoXvWkYY/w917-h418-no/19.%2BCNAME%2BEntry.png" alt="Konfigurasi CNAME" /></p>

<h3>VirtualHost Openshift</h3>

<p>Alamat domain kita sudah mengarah ke server Openshift. Ini bisa dibuktikan kalau kita browse ke <code>http://bisnis.endy.muhardin.com</code> akan diarahkan ke servernya Openshift.</p>

<p><img src="https://lh4.googleusercontent.com/-S8Ul3djmpWA/VNSOU26jUoI/AAAAAAAAH5k/PmtKZJDR2Zo/w917-h401-no/20.%2BBelum%2Bdibikin%2Balias.png" alt="Virtual Host Error" /></p>

<p>Kita bisa lihat pada screenshot di atas, Openshift sudah menerima request. Tapi muncul pesan error karena dia tidak paham bagaimana menangani request tersebut.</p>

<p>Untuk itu, kita perlu membuat konfigurasi virtual host dulu. Gunanya supaya Openshift bisa mengenali request ke <code>bisnis.endy.muhardin.com</code></p>

<p>Ini bisa dilakukan melalui web</p>

<p><img src="https://lh6.googleusercontent.com/-BK2dMIan4VM/VN4XscJhKGI/AAAAAAAAH6U/f83fyASiyK8/w663-h623-no/22.%2BCustom%2BDomain%2BWeb%2BBased.png" alt="Web Based Custom Domain" /></p>

<p>Atau melalui command line</p>

<p><code>
rhc alias add blogbisnis bisnis.endy.muhardin.com
</code></p>

<p>Berikut outputnya</p>

<p><code>
Alias 'bisnis.endy.muhardin.com' has been added.
</code></p>

<p>Setelah selesai, coba kita browse <code>http://bisnis.endy.muhardin.com</code></p>

<p><img src="https://lh6.googleusercontent.com/-8dmIdYTjdyc/VNSOdH0KxqI/AAAAAAAAH5s/nMwJOFxyJe4/w827-h623-no/21.%2BSudah%2Bdibikin%2Balias.png" alt="Custom Domain Success" /></p>

<p>Nah selesailah website kita. Tinggal diisi saja</p>

<h2>Kesimpulan</h2>

<p>Membuat blog atau website pribadi itu mudah dan murah. Sebagai praktisi IT, personal website sudah menjadi hal yang wajib. Ini bukan trend sesaat seperti dinyatakan 'pakar' pornomatika nasional, tapi adalah saluran kita untuk berbagi pengetahuan buat orang lain.</p>

<p>Yuk, mari menulis di blog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips Upgrade Library]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/tips-upgrade-library/"/>
    <updated>2013-11-19T10:13:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/tips-upgrade-library</id>
    <content type="html"><![CDATA[<p>Dalam membuat aplikasi, kita pasti menggunakan library pihak ketiga. Dan library yang bagus tentunya sering diupgrade oleh pembuatnya. Sisi positifnya, library yang kita pakai akan bertambah fiturnya dan berkurang bugnya. Sisi negatifnya, kita harus menyesuaikan kode program kita supaya tidak error karena perubahan di library.</p>

<p>Pada artikel ini, kita akan bahas tips singkat untuk memudahkan kita mengupgrade library pihak ketiga.</p>

<!--more-->


<p>Sebagai contoh, berikut <a href="http://getbootstrap.com/getting-started/#migration">panduan upgrade library CSS Twitter Bootstrap</a>. Di halaman itu dituliskan hal-hal yang berubah.</p>

<p><img src="http://lh6.googleusercontent.com/-Pf2d8nhVky0/UorYq5A-OGI/AAAAAAAACQE/PGb8mXDC890/panduan-upgrade-bootstrap.png"></p>

<p>Di situ dijelaskan bahwa kita harus mengganti class CSS</p>

<ul>
<li><code>.container-fluid</code> menjadi <code>.container</code></li>
<li><code>.row-fluid</code> menjadi <code>.row</code></li>
<li>dan seterusnya</li>
</ul>


<blockquote><p>Waduh, source code HTML saya ada ratusan file, bagaimana menemukan file mana saja yang pakai class tersebut ??</p></blockquote>

<p>Gampang, bila Anda pakai Linux. Cukup buka command prompt, masuk ke folder source code, lalu ketik perintah berikut</p>

<p><code>
grep -nir 'container-fluid'
</code></p>

<p>Outputnya seperti ini</p>

<p><code>html
src/main/webapp/main.html:107:        &lt;div class="container-fluid"&gt;
target/belajar-restful-web-0.1.2-SNAPSHOT/main.html:107:        &lt;div class="container-fluid"&gt;
</code></p>

<p>Di situ bisa kita lihat bahwa class CSS itu ada di file <code>main.html</code> baris 107. File tersebut ada di dua tempat, yaitu folder <code>src/main/webapp</code> dan <code>target/belajar-restful-web-0.1.2-SNAPSHOT</code>.</p>

<p><code>grep</code> adalah perintah standar di Linux. Kita menggunakan tiga opsi yaitu:</p>

<ul>
<li><code>n</code> : menampilkan nomor baris (line number)</li>
<li><code>i</code> : huruf kecil dan besar tidak berpengaruh (case insensitive)</li>
<li><code>r</code> : rekursif, cari sampai ke dalam subfolder</li>
</ul>


<p>Di belakangnya kita juga bisa tambahkan lokasi file dan folder untuk mempersempit pencarian.</p>

<p><code>
grep -nir 'icon-' login.html main.html html-pages
</code></p>

<p>Perintah di atas hanya akan mencari ke file <code>login.html</code>, <code>main.html</code>, dan folder <code>html-pages</code>. Opsi ini berguna supaya dia tidak ikut mencari di file javascript dan css sehingga membingungkan kita menyortir hasilnya.</p>

<p>Outputnya</p>

<p><code>
main.html:42:                        &lt;span class="icon-bar"&gt;&lt;/span&gt;
pages/system/role.html:23:            &lt;i class="icon-plus-sign"&gt;&lt;/i&gt;Tambah Data
pages/system/role.html:39:                        &lt;a ng-click="edit(x)"&gt;&lt;i class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;
pages/system/role.html:40:                        &lt;a ng-click="remove(x)"&gt;&lt;i class="icon-remove"&gt;&lt;/i&gt;&lt;/a&gt;
pages/system/role.html:73:            &lt;i class="icon-plus-sign"&gt;&lt;/i&gt;Tambah Menu
pages/system/role.html:94:                        &lt;a ng-click="removeSelectedMenu(m)"&gt;&lt;i class="icon-remove"&gt;&lt;/i&gt;&lt;/a&gt;
pages/system/role.html:104:            &lt;i class="icon-plus-sign"&gt;&lt;/i&gt;Tambah Permission
pages/system/role.html:125:                        &lt;a ng-click="removeSelectedPermission(p)"&gt;&lt;i class="icon-remove"&gt;&lt;/i&gt;&lt;/a&gt;
pages/system/permission.html:22:        &lt;i class="icon-plus-sign"&gt;&lt;/i&gt;Tambah Data
pages/system/permission.html:38:                    &lt;a ng-click="edit(x)"&gt;&lt;i class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;
pages/system/permission.html:39:                    &lt;a ng-click="remove(x)"&gt;&lt;i class="icon-remove"&gt;&lt;/i&gt;&lt;/a&gt;
pages/system/sessions.html:28:                &lt;th&gt;&lt;a ng-click="refresh()" class="btn"&gt;&lt;i class="icon-refresh"&gt;&lt;/i&gt; refresh&lt;/a&gt;&lt;/th&gt;
pages/system/sessions.html:38:                    &lt;a ng-click="kick(u)" class="btn"&gt;&lt;i class="icon-eject"&gt;&lt;/i&gt; kick&lt;/a&gt;
pages/system/user.html:70:            &lt;i class="icon-plus-sign"&gt;&lt;/i&gt;Tambah Data
pages/system/user.html:94:                        &lt;a ng-click="edit(x)"&gt;&lt;i class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;
pages/system/user.html:95:                        &lt;a ng-click="remove(x)"&gt;&lt;i class="icon-remove"&gt;&lt;/i&gt;&lt;/a&gt;
pages/system/config.html:22:        &lt;i class="icon-plus-sign"&gt;&lt;/i&gt;Tambah Data
pages/system/config.html:40:                    &lt;a ng-click="edit(c)"&gt;&lt;i class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;
pages/system/config.html:41:                    &lt;a ng-click="remove(c)"&gt;&lt;i class="icon-remove"&gt;&lt;/i&gt;&lt;/a&gt;
pages/system/menu.html:61:            &lt;i class="icon-plus-sign"&gt;&lt;/i&gt;Tambah Data
pages/system/menu.html:85:                        &lt;a ng-click="edit(c)"&gt;&lt;i class="icon-edit"&gt;&lt;/i&gt;&lt;/a&gt;
pages/system/menu.html:86:                        &lt;a ng-click="remove(c)"&gt;&lt;i class="icon-remove"&gt;&lt;/i&gt;&lt;/a&gt;
</code></p>

<blockquote><p>Wah canggih sekali, tapi saya pakai Windows. Bagaimana dong?</p></blockquote>

<p>Gampang, <a href="http://software.endy.muhardin.com/linux/upgrade-ubuntu/">instal saja Ubuntu</a> :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Aggregator]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/octopress-aggregator/"/>
    <updated>2013-11-14T10:40:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/octopress-aggregator</id>
    <content type="html"><![CDATA[<p>Website Aggregator adalah suatu website yang isinya adalah kumpulan link ke posting di website lain. Beberapa skenario penggunaan website aggregator:</p>

<ul>
<li>website perusahaan, ingin mencantumkan posting blog dari anggota timnya</li>
<li>website komunitas, ingin mencantumkan posting blog dari anggota komunitas tersebut</li>
</ul>


<p>Pada artikel ini kita akan membahas cara pemasangan website aggregator di aplikasi blogging Octopress.</p>

<!--more-->


<h2>Instalasi Dependensi</h2>

<p>Kita akan menggunakan <a href="https://github.com/pote/planet.rb">aplikasi yang namanya planet.rb</a>. Sebelum mengikuti langkah-langkah di websitenya, terlebih dulu kita siapkan Ubuntu supaya <code>planet.rb</code> bisa diinstal.</p>

<p>Instalasi dependensi dilakukan dengan perintah berikut</p>

<p><code>
sudo apt-get install libcurl3 libcurl3-gnutls libcurl4-openssl-dev
</code></p>

<p>Setelah itu, kita install <code>planet.rb</code> dengan perintah berikut</p>

<p><code>
gem install planet
</code></p>

<p>Kalau menemui error seperti ini</p>

<p><code>
ERROR:  Could not find a valid gem 'planet' (&gt;= 0), here is why:
Unable to download data from https://rubygems.org/ - no such name (https://rubygems.org/latest_specs.4.8.gz)
</code></p>

<p>atau ini</p>

<p><code>
ERROR:  While executing gem ... (Gem::RemoteFetcher::UnknownHostError)
no such name (https://rubygems.org/gems/planet-0.5.1.gem)
</code></p>

<p>artinya koneksi internet Anda bermasalah. Coba lagi dengan koneksi internet yang lain. Mungkin bisa nebeng dulu di tetangga ;)</p>

<h2>Konfigurasi</h2>

<p>Kita generate dulu konfigurasi <code>planet.rb</code>. Jalankan perintah ini di dalam folder Octopress kita.</p>

<p><code>
planet init
</code></p>

<p>Perintah di atas akan membuatkan file konfigurasi <code>planet.yml</code>. Edit sesuai kebutuhan. Berikut adalah contoh konfigurasi yang saya gunakan</p>

<p>```ruby
planet:</p>

<pre><code>posts_directory: source/_posts/
templates_directory: source/_layouts/
whitelisted_tags: []
</code></pre>

<p>blogs:
  - author: "Endy is Programmer"</p>

<pre><code>feed:   "http://software.endy.muhardin.com/atom.xml"
image:  "http://www.gravatar.com/avatar/31694bbf42349c6b6adfe893bb1e19d8.png"
twitter: "endymuhardin"
</code></pre>

<ul>
<li>author: "Endy is Photographer"
feed:   "http://rana.endy.muhardin.com/atom.xml"
image:  "http://www.gravatar.com/avatar/a3c8a6a973fc0c0fa3d89cb69c103ad0.png"
```</li>
</ul>


<h2>Eksekusi</h2>

<p>Selanjutnya, kita jalankan generatornya. <code>planet.rb</code> akan menjelajahi semua blog yang kita daftarkan dan akan membuatkan posting dalam folder <code>source/_posts</code>.</p>

<p>Terakhir, kita bisa publish dan deploy seperti biasa.</p>

<h2>Kekurangan</h2>

<p>Sayangnya <code>planet.rb</code> menaruh semua isi posting dari blog asal ke website tujuan. Nah, ini bisa <a href="https://support.google.com/webmasters/answer/66359?hl=en">bikin google cemberut</a>. Idealnya, saya ingin memasang potongan isi artikel saja, dengan disertai link ke artikel aslinya. Ini dikenal dengan <a href="http://daringfireball.net/linked/">istilah linked list</a>.</p>

<p>Octopress sudah memiliki <a href="http://octopress.org/docs/blogging/linklog/">dokumentasi untuk fitur ini</a>, tapi entah kenapa ternyata belum bisa dipakai.</p>

<p>Mungkin harus coba bikin sendiri seperti dijelaskan <a href="http://www.candlerblog.com/2012/01/30/octopress-linked-list/">di sini</a></p>

<h2>Solusi</h2>

<p>Kebetulan semua website yang ingin saya aggregasi adalah website saya sendiri, dan semuanya Octopress. Oleh karena itu, saya modifikasi saja <code>Atom Feed</code>nya supaya menghasilkan <em>summary</em> artikel kalau ada. Kalau tidak ada <em>summary</em>, barulah tampilkan content penuhnya.</p>

<p>Caranya mudah, edit file <code>source/atom.xml</code>, yang tadinya seperti ini</p>

<p>
<code>xml
&lt;content type="html"&gt;&lt;![CDATA[{{ post.content | expand_urls: site.url | cdata_escape }}]]&gt;&lt;/content&gt;
</code>
</p>

<p>menjadi seperti ini</p>

<p>
```xml
{% capture excerpted %}{{ post.content | has_excerpt }}{% endcapture %}
{% if excerpted == 'true' %}</p>

<pre><code>&lt;summary type="html"&gt;&lt;![CDATA[{{ post.content | split: '&lt;!--more--&gt;' | first | expand_urls: site.url | cdata_escape }}]]&gt;&lt;/summary&gt;
</code></pre>

<p>{% else %}
<content type="html">&lt;![CDATA[{{ post.content | expand_urls: site.url | cdata_escape }}]]&gt;</content>
{% endif %}
```
</p>

<p>Setelah itu, generate ulang dan deploy masing-masing website. Hasilnya, pada waktu di-aggregasi hanya akan tampil <em>summary</em> saja. Sehingga yang tampil di website aggregator tidak seluruh isi artikel. Paman Google pun tidak kesal dibuatnya ;)</p>

<p>Selamat mencoba</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Teknik Menggunakan Google]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/teknik-menggunakan-google/"/>
    <updated>2013-10-04T22:59:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/teknik-menggunakan-google</id>
    <content type="html"><![CDATA[<p>Pada <a href="http://software.endy.muhardin.com/life/otodidak/">artikel terdahulu</a>, sudah dibahas bahwa kemampuan terpenting yang harus dimiliki profesional IT (khususnya programmer) adalah kemampuan otodidak.</p>

<p>Kali ini, kita akan bahas kemampuan terpenting kedua yang harus dimiliki, yaitu teknik mendayagunakan saudara jauh kita yaitu Paman Google.</p>

<p>Seringkali kita temui sergahan para senior di berbagai forum ketika ada <em>newbie</em> yang bertanya</p>

<blockquote><p>Google dulu dong sebelum tanya !!!</p></blockquote>

<p>Tapi namanya juga <em>newbie</em>, pastinya gak tau cara googling yang efektif. Kalau dia mahir pakai Google, pasti sudah bukan <em>newbie</em> lagi namanya kan? ;)</p>

<p>Nah, begini caranya menggunakan Google.</p>

<!--more-->


<h2>Kasus Sederhana</h2>

<p>Seringkali terjadi, kita mengikuti diskusi di berbagai forum dan kemudian menemui istilah-istilah aneh yang baru kita dengar. Ini lazim terjadi kalau kita mengikuti komunitas yang baru, misalnya programmer ikut komunitas fotografi.</p>

<p><img src="/images/uploads/2013/10/teknik-menggunakan-google/php-wtf-2.png" title="PHP??? WTF!!!" ></p>

<p>Karena penasaran buru-buru pengen tau, secara refleks kita akan klik kotak komentar, lalu mengetik disana</p>

<blockquote><p>PHP apaan sih ??</p></blockquote>

<p><strong>STOP !!! Jangan lakukan !!!</strong></p>

<p>Itu hanya akan menunjukkan identitas kita sebagai manusia jadul yang <em>kamseupay</em>. Ada cara lain yang lebih berpendidikan, yaitu buka tab baru, lalu kita ketik disana.</p>

<p>Untuk kasus sederhana seperti ini, jawabannya bisa langsung ditemukan. Berikut contoh screenshot yang saya buat ketika ada orang yang menanyakan</p>

<blockquote><p>Apa itu OO Calc ?</p></blockquote>

<p>di sebuah <a href="https://www.facebook.com/groups/ForumJavaIndonesia/10151680460748017/?comment_id=10151680514093017">forum di Facebook</a>.</p>

<p><img src="/images/uploads/2013/10/teknik-menggunakan-google/tanya-paman-google.png" title="Apa itu OO Calc?" ></p>

<p>Semua jawaban ada di halaman tersebut, tanpa kita klik ke halaman berikutnya semua sudah tersaji di sana.</p>

<h2>Kasus Kompleks</h2>

<p>Nah sebagai programmer, tentu masalah yang kita hadapi jauh lebih rumit daripada sekedar <code>Apa itu OO Calc ?</code>. Kita ambil contoh lain di forum yang sama.</p>

<p><img src="/images/uploads/2013/10/teknik-menggunakan-google/arccot-java-00.png" title="Bagaimana menghitung arccot di Java?" ></p>

<p>TS menanyakan tentang suatu perhitungan matematika yang namanya <code>ARCCOT</code>. Melihat posting di atasnya, saya mendapatkan petunjuk bahwa beliau sedang membicarakan tentang <em>trigonometri</em>. Waduh, terakhir saya dengar istilah ini, teknologi <code>pager</code> belum lagi ditemukan orang. Nah, saya yakin banyak pembaca blog ini yang bahkan tidak tahu apa itu <code>pager</code>. Untuk itu, baiklah saya tunjukkan fotonya. Nih dia barangnya.</p>

<p><img src="/images/uploads/2013/10/teknik-menggunakan-google/pager.JPG" title="Pager" >
<img src="/images/uploads/2013/10/teknik-menggunakan-google/pager_in_hand.jpg" title="Pager dipegang" ></p>

<p>Gambar diambil dari <a href="http://www.pagers.co.uk/shop/">sini</a> dan <a href="http://www.ebay.com/itm/MOTOROLA-ADVISOR-II-VHF-PAGER-143-152-9875-MHz-EMS-FIRE-PAGER-with-ZOOM-/190645429104">sana</a></p>

<p>Masih gak tau juga benda apakah itu? Nah, cukuplah menjadi ilustrasi seberapa jadulnya urusan trigonometri ini buat saya. Pada masa itu, bahkan Bill Gates belum lagi menciptakan Windows.</p>

<p>Lalu, apa yang harus dilakukan? Ya tentu saja buka tab baru, ketikkan <code>arccot java</code> di address bar. Ini hasilnya</p>

<p><img src="/images/uploads/2013/10/teknik-menggunakan-google/arccot-java-01.png" title="Google arccot java" ></p>

<p>Baris ketiga nampaknya menarik, buka di tab baru. Bisa klik kanan lalu <code>Open in new tab</code>, atau klik dengan tombol tengah mouse. Klik tengah ini merupakan fitur andalan pada waktu kita googling. Buka link baris ketiga</p>

<p>Scroll ke bawah, sampai kita menemukan hal yang menarik. Saya menemukan dua, ini yang pertama</p>

<p><img src="/images/uploads/2013/10/teknik-menggunakan-google/arccot-java-02.png" title="Hasil search halaman pertama jawaban pertama" ></p>

<p>dan scroll lagi ke bawah, dapat jawaban di bawahnya</p>

<p><img src="/images/uploads/2013/10/teknik-menggunakan-google/arccot-java-03.png" title="Hasil search halaman pertama jawaban kedua" ></p>

<p>Waduh, dia menjelaskan tentang apa itu <code>arccot</code>, dan cara menghitungnya. Bahkan ada link ke Wikipedia segala. Nah, sebetulnya ini bukan urusan saya, tapi urusan <code>Irfan Rockability</code> yang bertanya di Facebook. Jadi saya tidak tertarik untuk belajar lagi trigonometri dari Wikipedia. Mari kita buka link di jawaban sebelumnya.</p>

<blockquote><p>This is it !! Inilah nasi selada ala chef Farah Quinn !!! It's so yummy</p></blockquote>

<p><img src="/images/uploads/2013/10/teknik-menggunakan-google/farah-quinn.jpg" title="This is it !!" ></p>

<p>Foto diambil <a href="http://sidomi.com/68276/ala-chef-nya-farah-quinn-kena-tegur-kpi/">dari sini</a>. Kurang jelas mana yang yummy, nasi selada atau orangnya ;)</p>

<p>Lho kok trigonometri yummy begitu? Nah, maksud saya, jawabannya sudah tersaji dengan lengkap di halaman yang kita buka tadi.</p>

<p><img src="/images/uploads/2013/10/teknik-menggunakan-google/arccot-java-04.png" title="Jawaban akhir" ></p>

<h2>Kesimpulan</h2>

<p>Sekarang ini jaman mudah. Mulai dari hal sederhana seperti <code>Apa itu OO Calc</code> sampai <code>Bagaimana cara menghitung arc cotangent dengan Java</code> sudah tersedia jawabannya di internet. Kadangkala langsung ketemu di halaman pertama. Kali lain harus melalui membuka 3 tab dan melalui 8 langkah. 3 tab itu bukan angka yang besar.</p>

<p>Jadi jangan malas, rajin-rajin Google.</p>

<blockquote><p>Ingatlah bahwa skill memilih keyword pencarian di Google akan berdampak signifikan terhadap perkembangan karir Anda. Skill ini hanya bisa didapatkan melalui <a href="http://software.endy.muhardin.com/life/lan-na-zha/">GongFu</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memasang Sertifikat SSL]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/memasang-sertifikat-ssl/"/>
    <updated>2013-07-12T14:14:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/memasang-sertifikat-ssl</id>
    <content type="html"><![CDATA[<p>Setelah kita menjalankan semua prosedur untuk mendapatkan digital certificate, tiba saatnya kita memasangnya di webserver supaya bisa melayani request https. Pada artikel ini, kita akan membahas konfigurasi https pada webserver yang sering digunakan. Karena banyaknya merek webserver yang beredar di pasaran, kita akan ambil dua sebagai perwakilan, yaitu Tomcat mewakili webserver Java, dan Nginx mewakili non-Java. Webserver Java merek lain seperti JBoss, Jetty, Glassfish, dan rekan-rekannya memiliki cara konfigurasi yang mirip dengan Tomcat. Demikian juga Apache HTTPD, Lighttpd, Mongrel, dan sejawatnya memiliki cara konfigurasi yang mirip dengan Nginx.</p>

<p>Artikel ini adalah bagian terakhir dari 4 artikel, yaitu:</p>

<ol>
<li><a href="http://software.endy.muhardin.com/aplikasi/apa-itu-ssl/">Apa itu SSL</a></li>
<li><a href="http://software.endy.muhardin.com/aplikasi/membuat-self-signed-certificate/">Membuat self-signed certificate</a></li>
<li><a href="http://software.endy.muhardin.com/aplikasi/membeli-sertifikat-ssl/">Membeli sertifikat SSL</a></li>
<li><a href="http://software.endy.muhardin.com/aplikasi/memasang-sertifikat-ssl/">Memasang sertifikat SSL</a></li>
</ol>


<!--more-->


<p>Untuk mengaktifkan fitur https pada webserver, pada prinsipnya kita membutuhkan tiga jenis file:</p>

<ol>
<li>Private Key</li>
<li>Certificate yang sudah diberikan signature oleh Certificate Authority (CA)</li>
<li>Certificate CA yang memberikan signature. File jenis ini bisa terdiri dari banyak file, tergantung apakah CA tersebut memiliki intermediate certificate atau tidak</li>
</ol>


<p>Sebagai contoh, kita akan gunakan file-file berikut yang didapatkan dari <a href="https://www.startssl.com/?app=1">penyedia SSL gratis StartSSL</a>. File self-signed yang kita buat di artikel bagian kedua juga bisa digunakan, malah lebih mudah karena sertifikat CA hanya satu, sedangkan yang dari StartSSL ada 2 file, satu Root CA dan satu Intermediate CA. Berikut adalah file-file tersebut:</p>

<ol>
<li>Private Key : <code>demo.muhardin.com.key</code></li>
<li>Sertifikat yang sudah ditandatangani CA : <code>demo.muhardin.com.crt</code></li>
<li>Sertifikat Root CA : <code>ca.pem</code></li>
<li>Sertifikat Intermediate CA : <code>sub.class1.server.ca.pem</code></li>
</ol>


<p>Ekstensi file <code>crt</code> dan <code>pem</code> sama saja. Sama-sama file text yang bisa dibuka dengan Gedit atau Notepad.</p>

<h2>SSL dengan Nginx</h2>

<h3>Pengecekan Awal</h3>

<p>Sebelum mulai, pastikan dulu virtual host kita sudah berjalan. Berikut konfigurasi virtual host saya</p>

<p>```
server{</p>

<pre><code>server_name demo.muhardin.com;
root /var/www/demo.muhardin.com/public_html;
index index.html;
</code></pre>

<p>}
```</p>

<p>Bila kita jalankan di laptop sendiri (localhost), tambahkan baris berikut di <code>/etc/hosts</code> supaya pada waktu kita mengakses alamat <code>http://demo.muhardin.com</code> akan diarahkan ke Nginx di laptop sendiri.</p>

<p><code>
127.0.0.1   demo.muhardin.com
</code></p>

<p>Coba browse ke <code>http://demo.muhardin.com</code>, pastikan bisa diakses dengan baik.</p>

<h3>Private Key</h3>

<p>Private key kita normalnya disimpan dalam bentuk terenkripsi dengan passphrase. Kita bisa menggunakan file ini apa adanya, tapi setiap kali Nginx dijalankan, kita harus mengentri passphrasenya. Ini tentu lebih aman, karena private key kita selalu berada dalam bentuk yang terlindungi.</p>

<p>Tapi untuk keperluan development, pada saat private key juga bikinan sendiri, kita bisa membuka file ini menjadi bentuk plain text dengan perintah berikut</p>

<p><code>
openssl rsa -in demo.muhardin.com.key -out demo.muhardin.com.key.txt
</code></p>

<p>Tentu kita akan ditanyai passphrase. Setelah itu file private key yang tidak terenkripsi (plain text) akan dibuat di <code>demo.muhardin.key.txt</code></p>

<p><code>
Enter pass phrase for demo.muhardin.com.key:
writing RSA key
</code></p>

<h3>CA Certificate</h3>

<p>Bila CA kita memiliki rantai sertifikat, kita harus gabungkan semua menjadi satu file. Ini bisa dilakukan dengan membuka semuanya di text editor, kemudian select all, copy, paste isinya ke file baru. Dimulai dari Root CA sampai ke Intermediate paling bawah.</p>

<p>CA yang memiliki rantai sertifikat contohnya Comodo. Kita bisa lihat informasi rantainya <a href="https://support.comodo.com/index.php?_m=knowledgebase&amp;_a=viewarticle&amp;kbarticleid=1182">di sini</a>. Sebagai contoh, bila kita mendapatkan Free Certificate dari Comodo, maka rantainya adalah:</p>

<ol>
<li>Root : AddTrustExternalCARoot.crt</li>
<li>Intermediate 1 : UTNAddTrustSGCCA.crt</li>
<li>Intermediate 2 : ComodoUTNSGCCA.crt</li>
<li>Intermediate 3 : EssentialSSLCA_2.crt</li>
</ol>


<p>Setelah itu terakhir barulah sertifikat kita sendiri yang ditandatangani oleh Intermediate 3.</p>

<p>Kita bisa juga menggabungkan semuanya menggunakan perintah linux. Contohnya, seandainya <code>demo.muhardin.com.crt</code> ditandatangani oleh Comodo, maka perintahnya adalah sebagai berikut:</p>

<p><code>
cat demo.muhardin.com.crt EssentialSSLCA_2.crt ComodoUTNSGCCA.crt UTNAddTrustSGCCA.crt AddTrustExternalCARoot.crt &gt; sertifikat-gabungan.crt
</code></p>

<blockquote><p>Awas jangan salah urutannya. Mulai dari sertifikat kita sendiri, kemudian intermediate 3 yang menandatangani sertifikat kita sendiri, intermediate 2, begitu seterusnya sampai sertifikat Root di paling akhir.</p></blockquote>

<h3>Konfigurasi Nginx</h3>

<p>Berikut adalah konfigurasi Nginx yang harus ditambahkan.</p>

<p><code>
listen 443 default_server ssl;
ssl_certificate     /etc/nginx/sertifikat-gabungan.crt;
ssl_certificate_key /etc/nginx/demo.muhardin.com.key.txt;
</code></p>

<p>Isi konfigurasi virtual host <code>demo.muhardin.com</code> selengkapnya</p>

<p>```
server{</p>

<pre><code>server_name demo.muhardin.com;
root /var/www/demo.muhardin.com/public_html;
index index.html;

listen 443 default_server ssl;
ssl_certificate     /etc/nginx/sertifikat-gabungan.crt;
ssl_certificate_key /etc/nginx/demo.muhardin.com.key.txt;
</code></pre>

<p>}
```</p>

<h2>SSL dengan Tomcat</h2>

<p>Tomcat dan juga webserver Java lainnya membutuhkan file keystore yang berisi semua sertifikat dan private key yang dibutuhkan. Untuk itu, kita akan memasukkan private key, sertifikat yang sudah ditandatangani CA, dan sertifikat milik CA (beserta semua intermediate) ke dalam keystore. Prosedurnya sebagai berikut:</p>

<ol>
<li>Buat database berisi private key dan sertifikat domain yang sudah ditandatangani CA dalam format PKCS#12. Ini dilakukan menggunakan <code>openssl</code></li>
<li>Konversi format PKCS#12 menjadi JKS menggunakan keytool</li>
<li>Import sertifikat CA dan sertifikat intermediate satu persatu</li>
<li>Pasang di Tomcat</li>
</ol>


<h3>Membuat database PKCS12</h3>

<p>Gabungkan dulu semua sertifikat CA menjadi satu file. Ini penting dilakukan, kalau tidak rantai sertifikasinya tidak akan tersambung dan browser kita tetap akan menampilkan peringatan seperti SSL self-signed. Sama seperti penggabungan pada waktu konfigurasi Nginx, mulai dari intermediate CA yang menandatangani sertifikat kita, terus berurutan sampai Root CA di posisi terakhir.</p>

<p><code>
cat EssentialSSLCA_2.crt ComodoUTNSGCCA.crt UTNAddTrustSGCCA.crt AddTrustExternalCARoot.crt &gt; ca-chain.crt
</code></p>

<p>Verifikasi apakah sertifikat kita sudah lengkap rantainya sampai ke Root CA</p>

<p><code>
openssl verify -CAfile ca-chain.crt demo.muhardin.com.crt
</code></p>

<p>Kalau tidak tersambung sampai Root CA, pesan errornya seperti ini</p>

<p><code>
demo.muhardin.com.crt: OU = Domain Control Validated, OU = EssentialSSL, CN = demo.muhardin.com
error 20 at 0 depth lookup:unable to get local issuer certificate
</code></p>

<p>Kalau sukses, outputnya seperti ini</p>

<p><code>
demo.muhardin.com.crt: OK
</code></p>

<p>Jalankan perintah berikut untuk membuat database PKCS12 berisi private key, sertifikat domain, dan rantai sertifikat CA</p>

<p><code>
openssl pkcs12 -export -chain \
-inkey myserver.key \
-in demo.muhardin.com.crt \
-name "demo.muhardin.com" \
-CAfile ca-chain.crt \
-caname "Intermediate 3" \
-caname "Intermediate 2" \
-caname "Intermediate 1" \
-caname "Root CA" \
-out demo.muhardin.com.p12
</code></p>

<p>Opsi <code>caname</code> gunanya untuk memberi nama untuk sertifikat CA agar lebih mudah dipahami sertifikat mana mengacu ke CA mana. Urutannya harus sesuai dengan urutan file yang kita gabungkan pada langkah sebelumnya.</p>

<p>Kita akan ditanyai passphrase tiga kali. Pertama untuk membuka private key, kedua dan ketiga untuk password database PKCS12.</p>

<p><code>
Enter pass phrase for demo.muhardin.com.key:
Enter Export Password:
Verifying - Enter Export Password:
</code></p>

<p>Kita akan mendapatkan file <code>demo.muhardin.com.p12</code>.</p>

<h3>Konversi PKCS12 menjadi JKS</h3>

<p>JKS adalah format database key dalam Java, atau dikenal dengan istilah keystore. Kita bisa membuatnya dengan cara import dari database berformat PKCS12. Berikut perintahnya:</p>

<p><code>
keytool -importkeystore \
-srcstoretype PKCS12 \
-srckeystore demo.muhardin.com.p12 \
-destkeystore demo.muhardin.com.jks
</code></p>

<p>Kita akan ditanyai password sebanyak tiga kali. Pertama dan kedua adalah password keystore JKS yang baru, sedangkan password ketiga adalah password database PKCS12 yang kita buat di langkah sebelumnya.</p>

<p><code>
Enter destination keystore password:
Re-enter new password:
Enter source keystore password:
Entry for alias 1 successfully imported.
Import command completed:  1 entries successfully imported, 0 entries failed or cancelled
</code></p>

<p>Verifikasi hasilnya menggunakan perintah berikut</p>

<p><code>
keytool -keystore demo.muhardin.com.jks -list
</code></p>

<p>Berikut outputnya, menyatakan bahwa kita sudah punya satu data dalam <code>demo.muhardin.com.jks</code></p>

<p>```
Enter keystore password:</p>

<p>Keystore type: JKS
Keystore provider: SUN</p>

<p>Your keystore contains 1 entry</p>

<p>demo.muhardin.com, Jul 9, 2013, PrivateKeyEntry,
Certificate fingerprint (SHA1): 10:A6:A1:7B:A4:46:10:38:0C:5C:72:77:FA:EB:86:46:91:DA:E7:C0
```</p>

<h3>Konfigurasi Tomcat</h3>

<p>Copy file <code>demo.muhardin.com.jks</code> ke dalam folder konfigurasi Tomcat. Di laptop saya lokasinya ada di <code>/opt/tomcat/conf</code>. Lalu buka file <code>server.xml</code> di folder yang sama menggunakan text editor. Edit baris berikut</p>

<p>```xml
&lt;Connector port="8443" protocol="HTTP/1.1" SSLEnabled="true"</p>

<pre><code>maxThreads="150" scheme="https" secure="true"
clientAuth="false" sslProtocol="TLS" 
keystoreFile="conf/demo.muhardin.com.jks"
keystorePass="test1234"
keyAlias="demo.muhardin.com"
</code></pre>

<p>/>
```</p>

<p>Sesuaikan variabel berikut:</p>

<ul>
<li>keystoreFile : lokasi keystore JKS</li>
<li>keystorePass : password untuk membuka keystore</li>
<li>keyAlias : nama alias untuk sertifikat domain (karena isi keystore ada 3 entri, harus dijelaskan mana yang akan digunakan)</li>
</ul>


<h2>Test</h2>

<p>Setelah semua selesai dikonfigurasi, Nginx bisa dites dengan mengakses <code>https://demo.muhardin.com</code>, sedangkan Tomcat bisa diakses di <code>https://demo.muhardin.com:8443</code>.</p>

<p>Bila kita menggunakan sertifikat dari CA resmi, walaupun gratis kita akan mendapatkan warna hijau di address bar</p>

<p><img src="/images/uploads/2013/07/ssl/04-tomcat-https-green.png" title="Tomcat HTTPS Green" ></p>

<p>Namun bila kita menggunakan CA buatan sendiri (self-signed), maka pada waktu pertama diakses, kita akan diberikan peringatan.</p>

<p><img src="/images/uploads/2013/07/ssl/01-ssl-warning.png" title="Peringatan SSL Self Signed" ></p>

<p>Agar bisa tetap diakses, kita bisa klik Add Exception. Kita akan diperlihatkan informasi tentang sertifikat SSL</p>

<p><img src="/images/uploads/2013/07/ssl/02-add-exception.png" title="Add Exception" ></p>

<p>Kita bisa melihat detail informasi dari sertifikat tersebut, siapa pemilik server dan siapa yang menandatangani sertifikatnya</p>

<p><img src="/images/uploads/2013/07/ssl/03-certificate-info.png" title="Detail Informasi Sertifikat" ></p>

<p>Bila kita klik Confirm Security Exception, barulah halaman web kita ditampilkan. Tapi masih ada warna merah di address bar.</p>

<p><img src="/images/uploads/2013/07/ssl/05-tomcat-https-red.png" title="Tomcat HTTPS Red" ></p>

<h2>Error yang umum terjadi</h2>

<h3>Password private key berbeda dengan password keystore</h3>

<p>Kadangkala pada waktu menjalankan Tomcat, kita menjumpai pesan error berikut</p>

<p><code>
SEVERE: Catalina.start
LifecycleException:  Protocol handler initialization failed: java.io.IOException: Cannot recover key
</code></p>

<p>Ini disebabkan karena password untuk membuka keystore berbeda dengan password untuk membuka private key. Biasanya terjadi bila kita mengganti password keystore setelah melakukan import. Keytool hanya akan mengganti password keystore, tapi tidak mengganti password private key.</p>

<p>Kita harus samakan dulu dengan mengganti salah satunya.</p>

<p>Bila ingin mengganti password private key, berikut perintahnya</p>

<p><code>
keytool -keystore demo.muhardin.com.jks -alias demo.muhardin.com -keypasswd
Enter keystore password: Masukkan password keystore
Enter key password for &lt;loket.asialink.co.id&gt;: Masukkan password private key yang lama
New key password for &lt;loket.asialink.co.id&gt;: Masukkan password private key yang baru, samakan dengan password keystore
Re-enter new key password for &lt;loket.asialink.co.id&gt;: Konfirmasi password private key yang baru
</code></p>

<p>Atau bila ingin mengganti password keystore, berikut perintahnya</p>

<p><code>
keytool -keystore demo.muhardin.com.jks -storepasswd
</code></p>

<h3>Certificate Chain tidak tersambung</h3>

<p>Ada kalanya sertifikat yang sudah kita beli mahal-mahal tetap menimbulkan warning di browser. Ini bisa disebabkan karena dua hal, yaitu:</p>

<ol>
<li><p>CA tidak dikenali oleh browser. Pastikan kita membeli sertifikat dari CA yang dikenali browser. Daftarnya bisa dilihat <a href="http://en.wikipedia.org/wiki/Comparison_of_SSL_certificates_for_web_servers">di Wikipedia</a></p></li>
<li><p>Kita tidak menginstal rantai sertifikat dengan benar.</p></li>
</ol>


<p>Untuk masalah kedua, kita bisa periksa menggunakan perintah <code>openssl</code> di commandline sebagai berikut</p>

<p><code>
openssl s_client -connect demo.muhardin.com:443
</code></p>

<p>Kadangkala kita mendapat pesan error berikut</p>

<p><code>
CONNECTED(00000003)
140315329672896:error:14077438:SSL routines:SSL23_GET_SERVER_HELLO:tlsv1 alert internal error:s23_clnt.c:741:
</code></p>

<p>Hal tersebut disebabkan karena <a href="https://bugs.launchpad.net/ubuntu/+source/openjdk-6/+bug/1006776">bug pada OpenJDK</a>, gunakan opsi <code>-ssl3</code></p>

<p><code>
openssl s_client -connect demo.muhardin.com:443 -ssl3
</code></p>

<p>Bila <a href="http://blog.fnsecurity.org/2013/02/proper-ssl-chaining.html">sertifikat kita tidak tersambung sampai Root CA</a>, maka kita akan mendapat error seperti ini</p>

<p><code>
CONNECTED(00000003)
depth=0 description = KWbw1iy6BUBg3JQ8, C = ID, CN = demo.muhardin.com, emailAddress = endy.muhardin@gmail.com
verify error:num=20:unable to get local issuer certificate
verify return:1
depth=0 description = KWbw1iy6BUBg3JQ8, C = ID, CN = demo.muhardin.com, emailAddress = endy.muhardin@gmail.com
verify error:num=27:certificate not trusted
verify return:1
depth=0 description = KWbw1iy6BUBg3JQ8, C = ID, CN = demo.muhardin.com, emailAddress = endy.muhardin@gmail.com
verify error:num=21:unable to verify the first certificate
verify return:1
</code></p>

<p>Periksa lagi pembuatan sertifikat kita. Pastikan rantai sertifikat CA sudah diimport dengan benar. Biasanya ini terjadi pada waktu pembuatan keystore Java. Coba ikuti lagi langkah-langkah di atas dengan teliti.</p>

<p>Sertifikat yang benar harusnya mengeluarkan output seperti ini</p>

<p>```
CONNECTED(00000003)
depth=2 C = IL, O = StartCom Ltd., OU = Secure Digital Certificate Signing, CN = StartCom Certification Authority
verify error:num=19:self signed certificate in certificate chain</p>

<h2>verify return:0</h2>

<p>Certificate chain
 0 s:/description=KWbw1iy6BUBg3JQ8/C=ID/CN=demo.muhardin.com/emailAddress=endy.muhardin@gmail.com
   i:/C=IL/O=StartCom Ltd./OU=Secure Digital Certificate Signing/CN=StartCom Class 1 Primary Intermediate Server CA
 1 s:/C=IL/O=StartCom Ltd./OU=Secure Digital Certificate Signing/CN=StartCom Class 1 Primary Intermediate Server CA
   i:/C=IL/O=StartCom Ltd./OU=Secure Digital Certificate Signing/CN=StartCom Certification Authority
 2 s:/C=IL/O=StartCom Ltd./OU=Secure Digital Certificate Signing/CN=StartCom Certification Authority
   i:/C=IL/O=StartCom Ltd./OU=Secure Digital Certificate Signing/CN=StartCom Certification Authority
```</p>

<p>Kita bisa lihat pada output di atas bahwa:</p>

<ul>
<li>issuer di sertifikat 0 sama dengan subject di sertifikat 1</li>
<li>issuer di sertifikat 1 sama dengan subject di sertifikat 2</li>
<li>issuer di sertifikat 2 sama dengan subject dirinya sendiri (self-signed)</li>
</ul>


<p>Root CA memang self-signed, karena dia paling atas. Sertifikat self-signed milik Root CA inilah yang ditanam di dalam aplikasi seperti dijelaskan di <a href="http://software.endy.muhardin.com/aplikasi/apa-itu-ssl/">artikel bagian pertama</a>.</p>

<p>Demikianlah langkah-langkah untuk mengaktifkan SSL di Tomcat dan Nginx. Selamat mencoba. Kalau ada error atau hal yang kurang jelas, silahkan ditulis di komentar.</p>
]]></content>
  </entry>
  
</feed>
