<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: aplikasi | Living life and make it better]]></title>
  <link href="http://software.endy.muhardin.com/categories/aplikasi/atom.xml" rel="self"/>
  <link href="http://software.endy.muhardin.com/"/>
  <updated>2013-11-14T16:44:44+07:00</updated>
  <id>http://software.endy.muhardin.com/</id>
  <author>
    <name><![CDATA[Endy Muhardin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress Aggregator]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/octopress-aggregator/"/>
    <updated>2013-11-14T10:40:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/octopress-aggregator</id>
    <content type="html"><![CDATA[<p>Website Aggregator adalah suatu website yang isinya adalah kumpulan link ke posting di website lain. Beberapa skenario penggunaan website aggregator:</p>

<ul>
<li>website perusahaan, ingin mencantumkan posting blog dari anggota timnya</li>
<li>website komunitas, ingin mencantumkan posting blog dari anggota komunitas tersebut</li>
</ul>


<p>Pada artikel ini kita akan membahas cara pemasangan website aggregator di aplikasi blogging Octopress.</p>

<!--more-->


<h2>Instalasi Dependensi</h2>

<p>Kita akan menggunakan <a href="https://github.com/pote/planet.rb">aplikasi yang namanya planet.rb</a>. Sebelum mengikuti langkah-langkah di websitenya, terlebih dulu kita siapkan Ubuntu supaya <code>planet.rb</code> bisa diinstal.</p>

<p>Instalasi dependensi dilakukan dengan perintah berikut</p>

<p><code>
sudo apt-get install libcurl3 libcurl3-gnutls libcurl4-openssl-dev
</code></p>

<p>Setelah itu, kita install <code>planet.rb</code> dengan perintah berikut</p>

<p><code>
gem install planet
</code></p>

<p>Kalau menemui error seperti ini</p>

<p><code>
ERROR:  Could not find a valid gem 'planet' (&gt;= 0), here is why:
Unable to download data from https://rubygems.org/ - no such name (https://rubygems.org/latest_specs.4.8.gz)
</code></p>

<p>atau ini</p>

<p><code>
ERROR:  While executing gem ... (Gem::RemoteFetcher::UnknownHostError)
no such name (https://rubygems.org/gems/planet-0.5.1.gem)
</code></p>

<p>artinya koneksi internet Anda bermasalah. Coba lagi dengan koneksi internet yang lain. Mungkin bisa nebeng dulu di tetangga ;)</p>

<h2>Konfigurasi</h2>

<p>Kita generate dulu konfigurasi <code>planet.rb</code>. Jalankan perintah ini di dalam folder Octopress kita.</p>

<p><code>
planet init
</code></p>

<p>Perintah di atas akan membuatkan file konfigurasi <code>planet.yml</code>. Edit sesuai kebutuhan. Berikut adalah contoh konfigurasi yang saya gunakan</p>

<p>```ruby
planet:</p>

<pre><code>posts_directory: source/_posts/
templates_directory: source/_layouts/
whitelisted_tags: []
</code></pre>

<p>blogs:
  - author: "Endy is Programmer"</p>

<pre><code>feed:   "http://software.endy.muhardin.com/atom.xml"
image:  "http://www.gravatar.com/avatar/31694bbf42349c6b6adfe893bb1e19d8.png"
twitter: "endymuhardin"
</code></pre>

<ul>
<li>author: "Endy is Photographer"
feed:   "http://rana.endy.muhardin.com/atom.xml"
image:  "http://www.gravatar.com/avatar/a3c8a6a973fc0c0fa3d89cb69c103ad0.png"
```</li>
</ul>


<h2>Eksekusi</h2>

<p>Selanjutnya, kita jalankan generatornya. <code>planet.rb</code> akan menjelajahi semua blog yang kita daftarkan dan akan membuatkan posting dalam folder <code>source/_posts</code>.</p>

<p>Terakhir, kita bisa publish dan deploy seperti biasa.</p>

<h2>Kekurangan</h2>

<p>Sayangnya <code>planet.rb</code> menaruh semua isi posting dari blog asal ke website tujuan. Nah, ini bisa <a href="https://support.google.com/webmasters/answer/66359?hl=en">bikin google cemberut</a>. Idealnya, saya ingin memasang potongan isi artikel saja, dengan disertai link ke artikel aslinya. Ini dikenal dengan <a href="http://daringfireball.net/linked/">istilah linked list</a>.</p>

<p>Octopress sudah memiliki <a href="http://octopress.org/docs/blogging/linklog/">dokumentasi untuk fitur ini</a>, tapi entah kenapa ternyata belum bisa dipakai.</p>

<p>Mungkin harus coba bikin sendiri seperti dijelaskan <a href="http://www.candlerblog.com/2012/01/30/octopress-linked-list/">di sini</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Teknik Menggunakan Google]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/teknik-menggunakan-google/"/>
    <updated>2013-10-04T22:59:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/teknik-menggunakan-google</id>
    <content type="html"><![CDATA[<p>Pada <a href="http://software.endy.muhardin.com/life/otodidak/">artikel terdahulu</a>, sudah dibahas bahwa kemampuan terpenting yang harus dimiliki profesional IT (khususnya programmer) adalah kemampuan otodidak.</p>

<p>Kali ini, kita akan bahas kemampuan terpenting kedua yang harus dimiliki, yaitu teknik mendayagunakan saudara jauh kita yaitu Paman Google.</p>

<p>Seringkali kita temui sergahan para senior di berbagai forum ketika ada <em>newbie</em> yang bertanya</p>

<blockquote><p>Google dulu dong sebelum tanya !!!</p></blockquote>

<p>Tapi namanya juga <em>newbie</em>, pastinya gak tau cara googling yang efektif. Kalau dia mahir pakai Google, pasti sudah bukan <em>newbie</em> lagi namanya kan? ;)</p>

<p>Nah, begini caranya menggunakan Google.</p>

<!--more-->


<h2>Kasus Sederhana</h2>

<p>Seringkali terjadi, kita mengikuti diskusi di berbagai forum dan kemudian menemui istilah-istilah aneh yang baru kita dengar. Ini lazim terjadi kalau kita mengikuti komunitas yang baru, misalnya programmer ikut komunitas fotografi.</p>

<p><img src="/images/uploads/2013/10/teknik-menggunakan-google/php-wtf-2.png" title="PHP??? WTF!!!" ></p>

<p>Karena penasaran buru-buru pengen tau, secara refleks kita akan klik kotak komentar, lalu mengetik disana</p>

<blockquote><p>PHP apaan sih ??</p></blockquote>

<p><strong>STOP !!! Jangan lakukan !!!</strong></p>

<p>Itu hanya akan menunjukkan identitas kita sebagai manusia jadul yang <em>kamseupay</em>. Ada cara lain yang lebih berpendidikan, yaitu buka tab baru, lalu kita ketik disana.</p>

<p>Untuk kasus sederhana seperti ini, jawabannya bisa langsung ditemukan. Berikut contoh screenshot yang saya buat ketika ada orang yang menanyakan</p>

<blockquote><p>Apa itu OO Calc ?</p></blockquote>

<p>di sebuah <a href="https://www.facebook.com/groups/ForumJavaIndonesia/10151680460748017/?comment_id=10151680514093017">forum di Facebook</a>.</p>

<p><img src="/images/uploads/2013/10/teknik-menggunakan-google/tanya-paman-google.png" title="Apa itu OO Calc?" ></p>

<p>Semua jawaban ada di halaman tersebut, tanpa kita klik ke halaman berikutnya semua sudah tersaji di sana.</p>

<h2>Kasus Kompleks</h2>

<p>Nah sebagai programmer, tentu masalah yang kita hadapi jauh lebih rumit daripada sekedar <code>Apa itu OO Calc ?</code>. Kita ambil contoh lain di forum yang sama.</p>

<p><img src="/images/uploads/2013/10/teknik-menggunakan-google/arccot-java-00.png" title="Bagaimana menghitung arccot di Java?" ></p>

<p>TS menanyakan tentang suatu perhitungan matematika yang namanya <code>ARCCOT</code>. Melihat posting di atasnya, saya mendapatkan petunjuk bahwa beliau sedang membicarakan tentang <em>trigonometri</em>. Waduh, terakhir saya dengar istilah ini, teknologi <code>pager</code> belum lagi ditemukan orang. Nah, saya yakin banyak pembaca blog ini yang bahkan tidak tahu apa itu <code>pager</code>. Untuk itu, baiklah saya tunjukkan fotonya. Nih dia barangnya.</p>

<p><img src="/images/uploads/2013/10/teknik-menggunakan-google/pager.JPG" title="Pager" >
<img src="/images/uploads/2013/10/teknik-menggunakan-google/pager_in_hand.jpg" title="Pager dipegang" ></p>

<p>Gambar diambil dari <a href="http://www.pagers.co.uk/shop/">sini</a> dan <a href="http://www.ebay.com/itm/MOTOROLA-ADVISOR-II-VHF-PAGER-143-152-9875-MHz-EMS-FIRE-PAGER-with-ZOOM-/190645429104">sana</a></p>

<p>Masih gak tau juga benda apakah itu? Nah, cukuplah menjadi ilustrasi seberapa jadulnya urusan trigonometri ini buat saya. Pada masa itu, bahkan Bill Gates belum lagi menciptakan Windows.</p>

<p>Lalu, apa yang harus dilakukan? Ya tentu saja buka tab baru, ketikkan <code>arccot java</code> di address bar. Ini hasilnya</p>

<p><img src="/images/uploads/2013/10/teknik-menggunakan-google/arccot-java-01.png" title="Google arccot java" ></p>

<p>Baris ketiga nampaknya menarik, buka di tab baru. Bisa klik kanan lalu <code>Open in new tab</code>, atau klik dengan tombol tengah mouse. Klik tengah ini merupakan fitur andalan pada waktu kita googling. Buka link baris ketiga</p>

<p>Scroll ke bawah, sampai kita menemukan hal yang menarik. Saya menemukan dua, ini yang pertama</p>

<p><img src="/images/uploads/2013/10/teknik-menggunakan-google/arccot-java-02.png" title="Hasil search halaman pertama jawaban pertama" ></p>

<p>dan scroll lagi ke bawah, dapat jawaban di bawahnya</p>

<p><img src="/images/uploads/2013/10/teknik-menggunakan-google/arccot-java-03.png" title="Hasil search halaman pertama jawaban kedua" ></p>

<p>Waduh, dia menjelaskan tentang apa itu <code>arccot</code>, dan cara menghitungnya. Bahkan ada link ke Wikipedia segala. Nah, sebetulnya ini bukan urusan saya, tapi urusan <code>Irfan Rockability</code> yang bertanya di Facebook. Jadi saya tidak tertarik untuk belajar lagi trigonometri dari Wikipedia. Mari kita buka link di jawaban sebelumnya.</p>

<blockquote><p>This is it !! Inilah nasi selada ala chef Farah Quinn !!! It's so yummy</p></blockquote>

<p><img src="/images/uploads/2013/10/teknik-menggunakan-google/farah-quinn.jpg" title="This is it !!" ></p>

<p>Foto diambil <a href="http://sidomi.com/68276/ala-chef-nya-farah-quinn-kena-tegur-kpi/">dari sini</a>. Kurang jelas mana yang yummy, nasi selada atau orangnya ;)</p>

<p>Lho kok trigonometri yummy begitu? Nah, maksud saya, jawabannya sudah tersaji dengan lengkap di halaman yang kita buka tadi.</p>

<p><img src="/images/uploads/2013/10/teknik-menggunakan-google/arccot-java-04.png" title="Jawaban akhir" ></p>

<h2>Kesimpulan</h2>

<p>Sekarang ini jaman mudah. Mulai dari hal sederhana seperti <code>Apa itu OO Calc</code> sampai <code>Bagaimana cara menghitung arc cotangent dengan Java</code> sudah tersedia jawabannya di internet. Kadangkala langsung ketemu di halaman pertama. Kali lain harus melalui membuka 3 tab dan melalui 8 langkah. 3 tab itu bukan angka yang besar.</p>

<p>Jadi jangan malas, rajin-rajin Google.</p>

<blockquote><p>Ingatlah bahwa skill memilih keyword pencarian di Google akan berdampak signifikan terhadap perkembangan karir Anda. Skill ini hanya bisa didapatkan melalui <a href="http://software.endy.muhardin.com/life/lan-na-zha/">GongFu</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memasang Sertifikat SSL]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/memasang-sertifikat-ssl/"/>
    <updated>2013-07-12T14:14:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/memasang-sertifikat-ssl</id>
    <content type="html"><![CDATA[<p>Setelah kita menjalankan semua prosedur untuk mendapatkan digital certificate, tiba saatnya kita memasangnya di webserver supaya bisa melayani request https. Pada artikel ini, kita akan membahas konfigurasi https pada webserver yang sering digunakan. Karena banyaknya merek webserver yang beredar di pasaran, kita akan ambil dua sebagai perwakilan, yaitu Tomcat mewakili webserver Java, dan Nginx mewakili non-Java. Webserver Java merek lain seperti JBoss, Jetty, Glassfish, dan rekan-rekannya memiliki cara konfigurasi yang mirip dengan Tomcat. Demikian juga Apache HTTPD, Lighttpd, Mongrel, dan sejawatnya memiliki cara konfigurasi yang mirip dengan Nginx.</p>

<p>Artikel ini adalah bagian terakhir dari 4 artikel, yaitu:</p>

<ol>
<li><a href="http://software.endy.muhardin.com/aplikasi/apa-itu-ssl/">Apa itu SSL</a></li>
<li><a href="http://software.endy.muhardin.com/aplikasi/membuat-self-signed-certificate/">Membuat self-signed certificate</a></li>
<li><a href="http://software.endy.muhardin.com/aplikasi/membeli-sertifikat-ssl/">Membeli sertifikat SSL</a></li>
<li><a href="http://software.endy.muhardin.com/aplikasi/memasang-sertifikat-ssl/">Memasang sertifikat SSL</a></li>
</ol>


<!--more-->


<p>Untuk mengaktifkan fitur https pada webserver, pada prinsipnya kita membutuhkan tiga jenis file:</p>

<ol>
<li>Private Key</li>
<li>Certificate yang sudah diberikan signature oleh Certificate Authority (CA)</li>
<li>Certificate CA yang memberikan signature. File jenis ini bisa terdiri dari banyak file, tergantung apakah CA tersebut memiliki intermediate certificate atau tidak</li>
</ol>


<p>Sebagai contoh, kita akan gunakan file-file berikut yang didapatkan dari <a href="https://www.startssl.com/?app=1">penyedia SSL gratis StartSSL</a>. File self-signed yang kita buat di artikel bagian kedua juga bisa digunakan, malah lebih mudah karena sertifikat CA hanya satu, sedangkan yang dari StartSSL ada 2 file, satu Root CA dan satu Intermediate CA. Berikut adalah file-file tersebut:</p>

<ol>
<li>Private Key : <code>demo.muhardin.com.key</code></li>
<li>Sertifikat yang sudah ditandatangani CA : <code>demo.muhardin.com.crt</code></li>
<li>Sertifikat Root CA : <code>ca.pem</code></li>
<li>Sertifikat Intermediate CA : <code>sub.class1.server.ca.pem</code></li>
</ol>


<p>Ekstensi file <code>crt</code> dan <code>pem</code> sama saja. Sama-sama file text yang bisa dibuka dengan Gedit atau Notepad.</p>

<h2>SSL dengan Nginx</h2>

<h3>Pengecekan Awal</h3>

<p>Sebelum mulai, pastikan dulu virtual host kita sudah berjalan. Berikut konfigurasi virtual host saya</p>

<p>```
server{</p>

<pre><code>server_name demo.muhardin.com;
root /var/www/demo.muhardin.com/public_html;
index index.html;
</code></pre>

<p>}
```</p>

<p>Bila kita jalankan di laptop sendiri (localhost), tambahkan baris berikut di <code>/etc/hosts</code> supaya pada waktu kita mengakses alamat <code>http://demo.muhardin.com</code> akan diarahkan ke Nginx di laptop sendiri.</p>

<p><code>
127.0.0.1   demo.muhardin.com
</code></p>

<p>Coba browse ke <code>http://demo.muhardin.com</code>, pastikan bisa diakses dengan baik.</p>

<h3>Private Key</h3>

<p>Private key kita normalnya disimpan dalam bentuk terenkripsi dengan passphrase. Kita bisa menggunakan file ini apa adanya, tapi setiap kali Nginx dijalankan, kita harus mengentri passphrasenya. Ini tentu lebih aman, karena private key kita selalu berada dalam bentuk yang terlindungi.</p>

<p>Tapi untuk keperluan development, pada saat private key juga bikinan sendiri, kita bisa membuka file ini menjadi bentuk plain text dengan perintah berikut</p>

<p><code>
openssl rsa -in demo.muhardin.com.key -out demo.muhardin.com.key.txt
</code></p>

<p>Tentu kita akan ditanyai passphrase. Setelah itu file private key yang tidak terenkripsi (plain text) akan dibuat di <code>demo.muhardin.key.txt</code></p>

<p><code>
Enter pass phrase for demo.muhardin.com.key:
writing RSA key
</code></p>

<h3>CA Certificate</h3>

<p>Bila CA kita memiliki rantai sertifikat, kita harus gabungkan semua menjadi satu file. Ini bisa dilakukan dengan membuka semuanya di text editor, kemudian select all, copy, paste isinya ke file baru. Dimulai dari Root CA sampai ke Intermediate paling bawah.</p>

<p>CA yang memiliki rantai sertifikat contohnya Comodo. Kita bisa lihat informasi rantainya <a href="https://support.comodo.com/index.php?_m=knowledgebase&amp;_a=viewarticle&amp;kbarticleid=1182">di sini</a>. Sebagai contoh, bila kita mendapatkan Free Certificate dari Comodo, maka rantainya adalah:</p>

<ol>
<li>Root : AddTrustExternalCARoot.crt</li>
<li>Intermediate 1 : UTNAddTrustSGCCA.crt</li>
<li>Intermediate 2 : ComodoUTNSGCCA.crt</li>
<li>Intermediate 3 : EssentialSSLCA_2.crt</li>
</ol>


<p>Setelah itu terakhir barulah sertifikat kita sendiri yang ditandatangani oleh Intermediate 3.</p>

<p>Kita bisa juga menggabungkan semuanya menggunakan perintah linux. Contohnya, seandainya <code>demo.muhardin.com.crt</code> ditandatangani oleh Comodo, maka perintahnya adalah sebagai berikut:</p>

<p><code>
cat demo.muhardin.com.crt EssentialSSLCA_2.crt ComodoUTNSGCCA.crt UTNAddTrustSGCCA.crt AddTrustExternalCARoot.crt &gt; sertifikat-gabungan.crt
</code></p>

<blockquote><p>Awas jangan salah urutannya. Mulai dari sertifikat kita sendiri, kemudian intermediate 3 yang menandatangani sertifikat kita sendiri, intermediate 2, begitu seterusnya sampai sertifikat Root di paling akhir.</p></blockquote>

<h3>Konfigurasi Nginx</h3>

<p>Berikut adalah konfigurasi Nginx yang harus ditambahkan.</p>

<p><code>
listen 443 default_server ssl;
ssl_certificate     /etc/nginx/sertifikat-gabungan.crt;
ssl_certificate_key /etc/nginx/demo.muhardin.com.key.txt;
</code></p>

<p>Isi konfigurasi virtual host <code>demo.muhardin.com</code> selengkapnya</p>

<p>```
server{</p>

<pre><code>server_name demo.muhardin.com;
root /var/www/demo.muhardin.com/public_html;
index index.html;

listen 443 default_server ssl;
ssl_certificate     /etc/nginx/sertifikat-gabungan.crt;
ssl_certificate_key /etc/nginx/demo.muhardin.com.key.txt;
</code></pre>

<p>}
```</p>

<h2>SSL dengan Tomcat</h2>

<p>Tomcat dan juga webserver Java lainnya membutuhkan file keystore yang berisi semua sertifikat dan private key yang dibutuhkan. Untuk itu, kita akan memasukkan private key, sertifikat yang sudah ditandatangani CA, dan sertifikat milik CA (beserta semua intermediate) ke dalam keystore. Prosedurnya sebagai berikut:</p>

<ol>
<li>Buat database berisi private key dan sertifikat domain yang sudah ditandatangani CA dalam format PKCS#12. Ini dilakukan menggunakan <code>openssl</code></li>
<li>Konversi format PKCS#12 menjadi JKS menggunakan keytool</li>
<li>Import sertifikat CA dan sertifikat intermediate satu persatu</li>
<li>Pasang di Tomcat</li>
</ol>


<h3>Membuat database PKCS12</h3>

<p>Gabungkan dulu semua sertifikat CA menjadi satu file. Ini penting dilakukan, kalau tidak rantai sertifikasinya tidak akan tersambung dan browser kita tetap akan menampilkan peringatan seperti SSL self-signed. Sama seperti penggabungan pada waktu konfigurasi Nginx, mulai dari intermediate CA yang menandatangani sertifikat kita, terus berurutan sampai Root CA di posisi terakhir.</p>

<p><code>
cat EssentialSSLCA_2.crt ComodoUTNSGCCA.crt UTNAddTrustSGCCA.crt AddTrustExternalCARoot.crt &gt; ca-chain.crt
</code></p>

<p>Verifikasi apakah sertifikat kita sudah lengkap rantainya sampai ke Root CA</p>

<p><code>
openssl verify -CAfile ca-chain.crt demo.muhardin.com.crt
</code></p>

<p>Kalau tidak tersambung sampai Root CA, pesan errornya seperti ini</p>

<p><code>
demo.muhardin.com.crt: OU = Domain Control Validated, OU = EssentialSSL, CN = demo.muhardin.com
error 20 at 0 depth lookup:unable to get local issuer certificate
</code></p>

<p>Kalau sukses, outputnya seperti ini</p>

<p><code>
demo.muhardin.com.crt: OK
</code></p>

<p>Jalankan perintah berikut untuk membuat database PKCS12 berisi private key, sertifikat domain, dan rantai sertifikat CA</p>

<p><code>
openssl pkcs12 -export -chain \
-inkey myserver.key \
-in demo.muhardin.com.crt \
-name "demo.muhardin.com" \
-CAfile ca-chain.crt \
-caname "Intermediate 3" \
-caname "Intermediate 2" \
-caname "Intermediate 1" \
-caname "Root CA" \
-out demo.muhardin.com.p12
</code></p>

<p>Opsi <code>caname</code> gunanya untuk memberi nama untuk sertifikat CA agar lebih mudah dipahami sertifikat mana mengacu ke CA mana. Urutannya harus sesuai dengan urutan file yang kita gabungkan pada langkah sebelumnya.</p>

<p>Kita akan ditanyai passphrase tiga kali. Pertama untuk membuka private key, kedua dan ketiga untuk password database PKCS12.</p>

<p><code>
Enter pass phrase for demo.muhardin.com.key:
Enter Export Password:
Verifying - Enter Export Password:
</code></p>

<p>Kita akan mendapatkan file <code>demo.muhardin.com.p12</code>.</p>

<h3>Konversi PKCS12 menjadi JKS</h3>

<p>JKS adalah format database key dalam Java, atau dikenal dengan istilah keystore. Kita bisa membuatnya dengan cara import dari database berformat PKCS12. Berikut perintahnya:</p>

<p><code>
keytool -importkeystore \
-srcstoretype PKCS12 \
-srckeystore demo.muhardin.com.p12 \
-destkeystore demo.muhardin.com.jks
</code></p>

<p>Kita akan ditanyai password sebanyak tiga kali. Pertama dan kedua adalah password keystore JKS yang baru, sedangkan password ketiga adalah password database PKCS12 yang kita buat di langkah sebelumnya.</p>

<p><code>
Enter destination keystore password:
Re-enter new password:
Enter source keystore password:
Entry for alias 1 successfully imported.
Import command completed:  1 entries successfully imported, 0 entries failed or cancelled
</code></p>

<p>Verifikasi hasilnya menggunakan perintah berikut</p>

<p><code>
keytool -keystore demo.muhardin.com.jks -list
</code></p>

<p>Berikut outputnya, menyatakan bahwa kita sudah punya satu data dalam <code>demo.muhardin.com.jks</code></p>

<p>```
Enter keystore password:</p>

<p>Keystore type: JKS
Keystore provider: SUN</p>

<p>Your keystore contains 1 entry</p>

<p>demo.muhardin.com, Jul 9, 2013, PrivateKeyEntry,
Certificate fingerprint (SHA1): 10:A6:A1:7B:A4:46:10:38:0C:5C:72:77:FA:EB:86:46:91:DA:E7:C0
```</p>

<h3>Konfigurasi Tomcat</h3>

<p>Copy file <code>demo.muhardin.com.jks</code> ke dalam folder konfigurasi Tomcat. Di laptop saya lokasinya ada di <code>/opt/tomcat/conf</code>. Lalu buka file <code>server.xml</code> di folder yang sama menggunakan text editor. Edit baris berikut</p>

<p>```xml
&lt;Connector port="8443" protocol="HTTP/1.1" SSLEnabled="true"</p>

<pre><code>maxThreads="150" scheme="https" secure="true"
clientAuth="false" sslProtocol="TLS" 
keystoreFile="conf/demo.muhardin.com.jks"
keystorePass="test1234"
keyAlias="demo.muhardin.com"
</code></pre>

<p>/>
```</p>

<p>Sesuaikan variabel berikut:</p>

<ul>
<li>keystoreFile : lokasi keystore JKS</li>
<li>keystorePass : password untuk membuka keystore</li>
<li>keyAlias : nama alias untuk sertifikat domain (karena isi keystore ada 3 entri, harus dijelaskan mana yang akan digunakan)</li>
</ul>


<h2>Test</h2>

<p>Setelah semua selesai dikonfigurasi, Nginx bisa dites dengan mengakses <code>https://demo.muhardin.com</code>, sedangkan Tomcat bisa diakses di <code>https://demo.muhardin.com:8443</code>.</p>

<p>Bila kita menggunakan sertifikat dari CA resmi, walaupun gratis kita akan mendapatkan warna hijau di address bar</p>

<p><img src="/images/uploads/2013/07/ssl/04-tomcat-https-green.png" title="Tomcat HTTPS Green" ></p>

<p>Namun bila kita menggunakan CA buatan sendiri (self-signed), maka pada waktu pertama diakses, kita akan diberikan peringatan.</p>

<p><img src="/images/uploads/2013/07/ssl/01-ssl-warning.png" title="Peringatan SSL Self Signed" ></p>

<p>Agar bisa tetap diakses, kita bisa klik Add Exception. Kita akan diperlihatkan informasi tentang sertifikat SSL</p>

<p><img src="/images/uploads/2013/07/ssl/02-add-exception.png" title="Add Exception" ></p>

<p>Kita bisa melihat detail informasi dari sertifikat tersebut, siapa pemilik server dan siapa yang menandatangani sertifikatnya</p>

<p><img src="/images/uploads/2013/07/ssl/03-certificate-info.png" title="Detail Informasi Sertifikat" ></p>

<p>Bila kita klik Confirm Security Exception, barulah halaman web kita ditampilkan. Tapi masih ada warna merah di address bar.</p>

<p><img src="/images/uploads/2013/07/ssl/05-tomcat-https-red.png" title="Tomcat HTTPS Red" ></p>

<h2>Error yang umum terjadi</h2>

<h3>Password private key berbeda dengan password keystore</h3>

<p>Kadangkala pada waktu menjalankan Tomcat, kita menjumpai pesan error berikut</p>

<p><code>
SEVERE: Catalina.start
LifecycleException:  Protocol handler initialization failed: java.io.IOException: Cannot recover key
</code></p>

<p>Ini disebabkan karena password untuk membuka keystore berbeda dengan password untuk membuka private key. Biasanya terjadi bila kita mengganti password keystore setelah melakukan import. Keytool hanya akan mengganti password keystore, tapi tidak mengganti password private key.</p>

<p>Kita harus samakan dulu dengan mengganti salah satunya.</p>

<p>Bila ingin mengganti password private key, berikut perintahnya</p>

<p><code>
keytool -keystore demo.muhardin.com.jks -alias demo.muhardin.com -keypasswd
Enter keystore password: Masukkan password keystore
Enter key password for &lt;loket.asialink.co.id&gt;: Masukkan password private key yang lama
New key password for &lt;loket.asialink.co.id&gt;: Masukkan password private key yang baru, samakan dengan password keystore
Re-enter new key password for &lt;loket.asialink.co.id&gt;: Konfirmasi password private key yang baru
</code></p>

<p>Atau bila ingin mengganti password keystore, berikut perintahnya</p>

<p><code>
keytool -keystore demo.muhardin.com.jks -storepasswd
</code></p>

<h3>Certificate Chain tidak tersambung</h3>

<p>Ada kalanya sertifikat yang sudah kita beli mahal-mahal tetap menimbulkan warning di browser. Ini bisa disebabkan karena dua hal, yaitu:</p>

<ol>
<li><p>CA tidak dikenali oleh browser. Pastikan kita membeli sertifikat dari CA yang dikenali browser. Daftarnya bisa dilihat <a href="http://en.wikipedia.org/wiki/Comparison_of_SSL_certificates_for_web_servers">di Wikipedia</a></p></li>
<li><p>Kita tidak menginstal rantai sertifikat dengan benar.</p></li>
</ol>


<p>Untuk masalah kedua, kita bisa periksa menggunakan perintah <code>openssl</code> di commandline sebagai berikut</p>

<p><code>
openssl s_client -connect demo.muhardin.com:443
</code></p>

<p>Kadangkala kita mendapat pesan error berikut</p>

<p><code>
CONNECTED(00000003)
140315329672896:error:14077438:SSL routines:SSL23_GET_SERVER_HELLO:tlsv1 alert internal error:s23_clnt.c:741:
</code></p>

<p>Hal tersebut disebabkan karena <a href="https://bugs.launchpad.net/ubuntu/+source/openjdk-6/+bug/1006776">bug pada OpenJDK</a>, gunakan opsi <code>-ssl3</code></p>

<p><code>
openssl s_client -connect demo.muhardin.com:443 -ssl3
</code></p>

<p>Bila <a href="http://blog.fnsecurity.org/2013/02/proper-ssl-chaining.html">sertifikat kita tidak tersambung sampai Root CA</a>, maka kita akan mendapat error seperti ini</p>

<p><code>
CONNECTED(00000003)
depth=0 description = KWbw1iy6BUBg3JQ8, C = ID, CN = demo.muhardin.com, emailAddress = endy.muhardin@gmail.com
verify error:num=20:unable to get local issuer certificate
verify return:1
depth=0 description = KWbw1iy6BUBg3JQ8, C = ID, CN = demo.muhardin.com, emailAddress = endy.muhardin@gmail.com
verify error:num=27:certificate not trusted
verify return:1
depth=0 description = KWbw1iy6BUBg3JQ8, C = ID, CN = demo.muhardin.com, emailAddress = endy.muhardin@gmail.com
verify error:num=21:unable to verify the first certificate
verify return:1
</code></p>

<p>Periksa lagi pembuatan sertifikat kita. Pastikan rantai sertifikat CA sudah diimport dengan benar. Biasanya ini terjadi pada waktu pembuatan keystore Java. Coba ikuti lagi langkah-langkah di atas dengan teliti.</p>

<p>Sertifikat yang benar harusnya mengeluarkan output seperti ini</p>

<p>```
CONNECTED(00000003)
depth=2 C = IL, O = StartCom Ltd., OU = Secure Digital Certificate Signing, CN = StartCom Certification Authority
verify error:num=19:self signed certificate in certificate chain</p>

<h2>verify return:0</h2>

<p>Certificate chain
 0 s:/description=KWbw1iy6BUBg3JQ8/C=ID/CN=demo.muhardin.com/emailAddress=endy.muhardin@gmail.com
   i:/C=IL/O=StartCom Ltd./OU=Secure Digital Certificate Signing/CN=StartCom Class 1 Primary Intermediate Server CA
 1 s:/C=IL/O=StartCom Ltd./OU=Secure Digital Certificate Signing/CN=StartCom Class 1 Primary Intermediate Server CA
   i:/C=IL/O=StartCom Ltd./OU=Secure Digital Certificate Signing/CN=StartCom Certification Authority
 2 s:/C=IL/O=StartCom Ltd./OU=Secure Digital Certificate Signing/CN=StartCom Certification Authority
   i:/C=IL/O=StartCom Ltd./OU=Secure Digital Certificate Signing/CN=StartCom Certification Authority
```</p>

<p>Kita bisa lihat pada output di atas bahwa:</p>

<ul>
<li>issuer di sertifikat 0 sama dengan subject di sertifikat 1</li>
<li>issuer di sertifikat 1 sama dengan subject di sertifikat 2</li>
<li>issuer di sertifikat 2 sama dengan subject dirinya sendiri (self-signed)</li>
</ul>


<p>Root CA memang self-signed, karena dia paling atas. Sertifikat self-signed milik Root CA inilah yang ditanam di dalam aplikasi seperti dijelaskan di <a href="http://software.endy.muhardin.com/aplikasi/apa-itu-ssl/">artikel bagian pertama</a>.</p>

<p>Demikianlah langkah-langkah untuk mengaktifkan SSL di Tomcat dan Nginx. Selamat mencoba. Kalau ada error atau hal yang kurang jelas, silahkan ditulis di komentar.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membeli Sertifikat SSL]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/membeli-sertifikat-ssl/"/>
    <updated>2013-07-11T19:55:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/membeli-sertifikat-ssl</id>
    <content type="html"><![CDATA[<p>Pada waktu saya pertama kali ingin membeli sertifikat SSL, saya dihadapkan pada berbagai jenis sertifikat yang bisa dibeli. Butuh waktu dan usaha yang relatif besar untuk mengetahui maksud dari macam-macam jenis sertifikat tersebut. Pada artikel ini, kita akan membahas berbagai jenis sertifikat tersebut dengan bahasa yang mudah dipahami.</p>

<p>Artikel ini adalah bagian ketiga dari 4 artikel, yaitu:</p>

<ol>
<li><a href="http://software.endy.muhardin.com/aplikasi/apa-itu-ssl/">Apa itu SSL</a></li>
<li><a href="http://software.endy.muhardin.com/aplikasi/membuat-self-signed-certificate/">Membuat self-signed certificate</a></li>
<li><a href="http://software.endy.muhardin.com/aplikasi/membeli-sertifikat-ssl/">Membeli sertifikat SSL</a></li>
<li><a href="http://software.endy.muhardin.com/aplikasi/memasang-sertifikat-ssl/">Memasang sertifikat SSL</a></li>
</ol>


<!--more-->


<h2>Vendor SSL</h2>

<p>Ada banyak sekali vendor SSL yang tersedia. Beberapa yang populer antara lain:</p>

<ul>
<li><a href="http://www.comodo.com/">Comodo</a></li>
<li><a href="http://www.verisign.com/">Verisign</a></li>
<li><a href="http://www.verizonenterprise.com/products/security/identity/ssl/">Cybertrust/Verizon</a></li>
<li><a href="http://www.startssl.com/">StartSSL</a></li>
<li>dan masih banyak yang lain lagi</li>
</ul>


<p>Masing-masing vendor menyediakan berbagai paket dan kategori, masing-masing diberi nama yang terdengar canggih dan hi-tech. Ini semua membuat kita yang baru pertama kali membeli sertifikat menjadi bingung. Berdasarkan hasil tanya-tanya dan googling, akhirnya saya mendapatkan metode pengelompokan yang lebih mudah dipahami end-user.</p>

<p>Kita bisa membedakan sertifikat SSL berdasarkan dua hal:</p>

<ul>
<li>cakupan penggunaan</li>
<li>prosedur validasi</li>
</ul>


<h2>Penggunaan Sertifikat</h2>

<p>Sertifikat SSL biasanya digunakan untuk webserver dan mailserver. Kedua layanan ini bekerja berdasarkan nama domain. Misalnya saya punya domain <code>artivisi.com</code>. Dari domain ini, saya bisa memiliki banyak server misalnya:</p>

<ul>
<li>www.artivisi.com : website perusahaan</li>
<li>demo.artivisi.com : situs untuk demo produk dan layanan</li>
<li>mail.artivisi.com : mail server, untuk mengirim dan menerima email</li>
</ul>


<p>Kita bisa membedakan jenis sertifikat SSL berdasarkan penggunaannya pada domain di atas menjadi:</p>

<ul>
<li>single domain</li>
<li>wildcard domain</li>
<li>multi domain</li>
</ul>


<h3>Single Domain</h3>

<p>Sertifikat single domain hanya bisa digunakan di satu domain saja. Misalnya kita membeli sertifikat untuk <code>www.artivisi.com</code> sehingga website ArtiVisi bisa diakses melalui <code>https://www.artivisi.com</code>. Sertifikat yang kita beli ini hanya bisa digunakan untuk domain <code>www.artivisi.com</code>. Dia tidak bisa kita pasang di mail server yang memiliki nama <code>mail.artivisi.com</code>.</p>

<p>Bila kita membutuhkan SSL untuk <code>mail.artivisi.com</code>, kita harus membeli sertifikat sekali lagi. Demikian seterusnya, masing-masing domain/subdomain harus memiliki sertifikat sendiri.</p>

<blockquote><p>Wah, apa tidak merepotkan? Belum lagi harganya pasti akan jadi mahal kalau setiap subdomain harus beli lagi.</p></blockquote>

<p>Nah, pada saat kita merasa kerepotan dan kemahalan, tiba saatnya kita membeli sertifikat <code>wildcard domain</code></p>

<h3>Wildcard Domain</h3>

<p>Sertifikat ini disebut wildcard karena satu sertifikat bisa digunakan untuk seluruh subdomain. CA akan membuatkan sertifikat dengan CN <code>*.artivisi.com</code>, sehingga bisa digunakan untuk <code>www.artivisi.com</code>, <code>mail.artivisi.com</code>, dan seluruh subdomain <code>artivisi.com</code>.</p>

<p>Harganya tentu lebih mahal daripada single domain. Sebagai gambaran kita lihat <a href="http://www.symantec.com/page.jsp?id=compare-ssl-certificates">harga dari Verisign</a>. Single domain harganya $400 dan wildcard harganya $1200. Kita baru balik modal kalau punya 3 subdomain.</p>

<h3>Multi Domain / SAN Extended</h3>

<p>Sertifikat dengan extended validation (akan dibahas di bawah) tidak bisa menggunakan mekanisme wildcard. Untuk itu, diakali dengan menaruh banyak nama domain di field <code>subject alternative name</code> (SAN), sehingga satu sertifikat bisa digunakan di banyak nama domain.</p>

<p>Dengan klasifikasi penggunaan ini, kita bisa memilih mana yang akan kita gunakan. Umumnya kita cuma memilih antara single dan wildcard. Pada kasus tertentu dimana kita menggunakan Extended Validation, barulah kita mempertimbangkan antara single domain dan multi domain.</p>

<h2>Prosedur Validasi</h2>

<p>Berdasarkan prosedur validasi, sertifikat SSL dibagi menjadi tiga jenis:</p>

<ul>
<li>Domain Validation (DV)</li>
<li>Organization Validation (OV)</li>
<li>Extended Validation (EV)</li>
</ul>


<h3>Domain Validation</h3>

<p>Metode validasi yang paling mudah dan cepat adalah domain validation. Saking mudahnya, biasanya proses ini dilakukan dengan aplikasi dan tidak melibatkan campur tangan manusia, sehingga lebih murah.</p>

<p>Domain validation memastikan bahwa pemohon benar-benar punya akses terhadap domain. Berikut cara kerjanya:</p>

<ol>
<li><p>Pemohon mengirim CSR pada CA berisi domain yang akan disertifikasi. Misalnya <code>demo.muhardin.com</code>.</p></li>
<li><p>CA akan mencari tahu siapa pemilik domain tersebut menggunakan fasilitas whois. Disana nantinya ada informasi email pemilik domain. Contoh output whois seperti ini:</p>

<p> <img src="/images/uploads/2013/07/ssl/output-whois.png" title="Output Whois" ></p></li>
<li><p>Adakalanya orang yang membeli domain berbeda dengan orang teknis yang mengurus domain, sehingga alamat email di whois tidak bisa digunakan. Bila terjadi seperti ini, pemohon bisa minta CA menggunakan email lain, biasanya <code>postmaster@muhardin.com</code> atau <code>webmaster@muhardin.com</code>. Ini adalah alamat email standar untuk administrasi mailserver dan webserver. Jadi pastikan kedua alamat email ini dilindungi dengan baik dan hanya diberikan aksesnya pada orang yang berhak.</p></li>
<li><p>CA mengirim email ke alamat yang ditentukan di langkah sebelumnya. Di email tersebut ada kode verifikasi untuk memastikan bahwa pemohon benar-benar punya akses ke alamat email tersebut.</p></li>
<li><p>Pemohon membuktikan bahwa dia telah menerima email verifikasi. Cara yang umum dilakukan antara lain memasukkan kode verifikasi ke website CA, atau mengklik link verifikasi yang ada dalam email.</p></li>
<li><p>Setelah verifikasi dilakukan, CA akan mengirim sertifikat domain yang telah ditandatangani. Atau pemohon juga bisa mengunduhnya di website CA.</p></li>
</ol>


<p>Pada level validasi ini, CA memastikan identitas pemohon berupa:</p>

<ul>
<li>akses/kontrol terhadap domain</li>
</ul>


<h3>Organization Validation</h3>

<p>Selangkah lebih jauh, ada yang namanya Organization Validation. Pada validasi level ini, CA melakukan validasi tambahan terhadap organisasi yang meminta sertifikat SSL. Biasanya pemohon harus mengirim akta perusahaan atau bukti legalitas lainnya.</p>

<p>Pada level validasi ini, CA memastikan identitas pemohon berupa:</p>

<ul>
<li>akses/kontrol terhadap domain</li>
<li>legalitas organisasi pemilik domain</li>
</ul>


<h3>Extended Validation</h3>

<p>Pada metode validasi sebelumnya, CA sama sekali tidak melakukan validasi terhadap orang/contact person.</p>

<p><a href="http://en.wikipedia.org/wiki/Extended_Validation_Certificate">Metode Extended Validation</a> adalah metode validasi yang paling lengkap.</p>

<p>Di sini CA juga akan menghubungi langsung contact person dari organisasi pemohon sertifikat. Detail teknisnya saya kurang paham karena belum pernah membeli sertifikat EV. Konon katanya, EV ini melibatkan pemeriksaan fisik berupa kunjungan atau pertemuan dengan perwakilan organisasi.</p>

<p>Mengingat tingkat ketelitian dalam validasinya, maka sertifikat level EV tidak boleh diterbitkan dalam bentuk <em>wildcard</em>. Ini disebabkan karena sertifikat wildcard memungkinkan kita membuat domain tanpa harus divalidasi CA. Bila kita ingin satu sertifikat untuk banyak domain, maka kita harus menggunakan Subject Alternative Name (SAN), dimana masing-masing nama domain akan divalidasi satu-persatu.</p>

<p>Sertifikat yang memiliki validasi EV akan terlihat berbeda di browser, ditandai dengan adanya <em>green bar</em> seperti di Internet Banking Mandiri</p>

<p><img src="/images/uploads/2013/07/ssl/green-bar-mandiri.png" title="Green Bar Mandiri" ></p>

<p>atau di KlikBCA</p>

<p><img src="/images/uploads/2013/07/ssl/01-green-bar.png" title="Green Bar BCA" ></p>

<p>Kita bisa melihat informasi detail tentang sertifikat SSL dengan cara klik green bar tersebut</p>

<p><img src="/images/uploads/2013/07/ssl/02-green-bar-info.png" title="Informasi Green Bar" ></p>

<p>Pada level validasi EV, CA memastikan identitas pemohon berupa:</p>

<ul>
<li>akses/kontrol terhadap domain</li>
<li>legalitas organisasi pemilik domain</li>
<li>keberadaan fisik organisasi dan contact person yang ditugaskan mewakilinya</li>
</ul>


<h3>Memilih metode validasi</h3>

<blockquote><p>Dari ketiga metode ini, pilih mana?</p></blockquote>

<p>Pertimbangan pertama tentu masalah harga. Makin teliti validasinya, biaya akan semakin tinggi.</p>

<p>Pertimbangan kedua adalah masalah kerepotannya. Makin tinggi level validasi, makin banyak dokumen yang harus kita siapkan.</p>

<p>Satu hal yang perlu diperhatikan, <a href="http://unmitigatedrisk.com/?p=203">pengunjung awam tidak akan bisa membedakan antara Domain Validation dan Organization Validation</a> . Jadi kalau ingin memilih, cukup dua yang dipertimbangkan, Extended Validation (EV) atau non-EV.</p>

<p>Perlu diperhatikan juga bahwa validasi tidak menjamin keamanan 100%. Pernah ada kasus website palsu di Amerika Serikat yang memiliki sertifikat asli. Ceritanya bisa dibaca <a href="http://voices.washingtonpost.com/securityfix/2006/02/the_new_face_of_phishing_1.html">di sini</a>.</p>

<h3>Memilih CA</h3>

<p>CA yang menjajakan sertifikat di internet sangat banyak. Mulai dari yang gratis sampai yang mahal. Sepintas terlihat ada CA yang kredibilitasnya tinggi seperti Cybertrust atau VeriSign yang banyak dipakai bank di Indonesia, dan juga ada yang jarang terdengar seperti StartSSL atau Cacert. Kredibilitas CA ini mempengaruhi harga. Untuk produk yang setingkat, misalnya produk termurah single domain dengan domain validation, harganya bisa berbeda beberapa kali lipat. Coba bandingkan harga <a href="http://www.mangkukmerah.com/ssl">Comodo</a> dengan <a href="http://www.symantec.com/en/aa/theme.jsp?themeid=compare-ssl-certificates">Verisign</a>. Harga Comodo 240 ribu rupiah, sedangkan VeriSign 4 juta rupiah.</p>

<p>Walaupun demikian, menurut pandangan saya pribadi, masalah kredibilitas ini tidak terlalu signifikan pengaruhnya terhadap pengunjung. Sebagai ilustrasi, kita yang sering menggunakan internet banking apa pernah tahu siapa CA yang digunakan oleh bank kita? Atau apakah kita tahu siapa itu Cybertrust atau VeriSign?</p>

<p>Untuk menambah added value, beberapa CA mengeluarkan stempel (seal) yang bisa dipasang di website. Contohnya bisa dilihat di KlikBCA berikut</p>

<p><img src="/images/uploads/2013/07/ssl/01-green-bar.png" title="Green Bar BCA" ></p>

<p>atau Internet Banking Mandiri berikut</p>

<p><img src="/images/uploads/2013/07/ssl/stempel-ca-mandiri.png" title="Green Bar Mandiri" ></p>

<p>Tapi menurut saya, stempel inipun juga tidak menambah keyakinan pengunjung, karena siapapun bisa memasang logo tersebut dengan mudah.</p>

<p>Ada faktor lain yang lebih penting dipertimbangkan menurut saya, yaitu kompatibilitasnya di berbagai browser. CA mahal biasanya kompatibel di semua browser, sedangkan CA murah kadang-kadang tidak diakui browser, sehingga menimbulkan warning seperti halnya self-signed certificate. Kalau memang tetap mengeluarkan warning, ya buat apa kita beli. Lebih baik pakai yang gratisan saja.</p>

<p>Demikianlah penjelasan tentang bermacam-macam sertifikat SSL yang tersedia di pasaran. Silahkan pilih yang sesuai dengan kebutuhan. Setelah sertifikat didapatkan, baik self-signed atau dari CA resmi, kita akan membahas <a href="http://software.endy.muhardin.com/aplikasi/memasang-sertifikat-ssl/">cara instalasinya di artikel selanjutnya</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membuat Self Signed Certificate]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/membuat-self-signed-certificate/"/>
    <updated>2013-07-09T13:41:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/membuat-self-signed-certificate</id>
    <content type="html"><![CDATA[<p>Idealnya, sertifikat SSL disetujui (signed) oleh Certificate Authority (CA).
Proses persetujuan ini biasanya dikenakan biaya, walaupun ada juga yang <a href="http://www.startssl.com/?app=1">gratisan</a>.
Sertifikat yang disetujui CA memiliki batas waktu pemakaian. Setelah waktu tersebut habis, maka sertifikat tidak bisa digunakan dan kita harus mengurus perpanjangannya.</p>

<p>Kondisi ini tentu kurang menyenangkan pada waktu kita ada di fase development. Untuk itu kita ingin membuat sertifikat sendiri, dan kemudian menyetujuinya sendiri juga. Ini disebut dengan istilah <code>self-signed certificate</code>. Bila diakses di browser, <code>self-signed certificate</code> ini akan menimbulkan peringatan seperti screenshot dibawah.</p>

<p><img src="/images/uploads/2013/07/ssl/01-ssl-warning.png" title="Halaman Warning" ></p>

<p>Agar bisa mengakses halaman tersebut, kita perlu menambahkan exception. Kita akan dikonfirmasi seperti pada layar berikut</p>

<p><img src="/images/uploads/2013/07/ssl/02-add-exception.png" title="Add Exception" ></p>

<p>Tapi tidak masalah, karena pada fase development yang pakai aplikasi/website ini hanya kita sendiri, bukan end-user. Nantinya sebelum dipublish untuk umum, belilah sertifikat yang benar.</p>

<p>Artikel ini adalah bagian kedua dari 4 artikel, yaitu:</p>

<ol>
<li><a href="http://software.endy.muhardin.com/aplikasi/apa-itu-ssl/">Apa itu SSL</a></li>
<li><a href="http://software.endy.muhardin.com/aplikasi/membuat-self-signed-certificate/">Membuat self-signed certificate</a></li>
<li><a href="http://software.endy.muhardin.com/aplikasi/membeli-sertifikat-ssl/">Membeli sertifikat SSL</a></li>
<li><a href="http://software.endy.muhardin.com/aplikasi/memasang-sertifikat-ssl/">Memasang sertifikat SSL</a></li>
</ol>


<!--more-->


<h2>Garis Besar Prosedur</h2>

<p>Ada beberapa langkah yang perlu kita lakukan untuk membuat self-signed certificate. Berikut adalah hasil akhir yang kita harapkan setelah semua prosedur dilalui:</p>

<ul>
<li>File private key yang dienkripsi dengan password</li>
<li>File certificate yang sudah disetujui CA</li>
<li>File certificate milik CA. Untuk self-signed filenya cuma satu. Tapi ketika kita membeli sertifikat berbayar, file dari CA ini bisa banyak tergantung dari rantai approval dari CA tersebut.</li>
<li>Khusus untuk aplikasi Java, ketiga file tersebut harus dimasukkan ke dalam database yang disebut dengan istilah <code>keystore</code></li>
</ul>


<p>Berikut adalah langkah-langkah untuk membuat self-signed certificate:</p>

<ol>
<li>Buat private key</li>
<li>Buat permohonan persetujuan sertifikat, dalam bahasa Inggris disebut Certificate Signing Request (CSR)</li>
<li>Buat dulu CA yang akan menandatangani sertifikat. Langkah ini tidak diperlukan bila kita membeli sertifikat dari CA.</li>
<li>Setujui CSR oleh CA yang dibuat sendiri. Langkah ini juga harusnya dilakukan oleh CA yang benar.</li>
<li>Khusus aplikasi Java, masukkan semua file yang dibutuhkan ke dalam <code>keystore</code></li>
</ol>


<h2>Aplikasi yang dibutuhkan</h2>

<p>Ada dua aplikasi yang umum digunakan untuk melakukan prosedur di atas, yaitu <code>openssl</code> dan <code>keytool</code>. Aplikasi <code>openssl</code> biasanya sudah terinstal di distro Linux populer sehingga kita tinggal pakai saja. Aplikasi <code>keytool</code> merupakan bawaan dari Java SDK. Kita harus menginstal dulu Java SDK untuk bisa menggunakan aplikasi ini.</p>

<p>Kedua aplikasi bisa melakukan semua prosedur di atas. Pertanyaan penting yang kita hadapi adalah</p>

<blockquote><p>Mana yang lebih baik pakai openssl atau keytool ?</p></blockquote>

<p>Setelah mencoba kedua aplikasi, saran saya adalah: gunakan OpenSSL untuk semua proses, kecuali memasukkan file ke dalam keystore. OpenSSL tidak bisa mengelola keystore, sehingga kita harus pakai keytool.</p>

<blockquote><p>Kenapa begitu?</p></blockquote>

<p>Untuk aplikasi web, sertifikat SSL biasanya digunakan oleh webserver. Bila aplikasi kita Java, maka webservernya adalah Tomcat atau Jetty. Apabila non Java, biasanya Apache HTTPD, Nginx, Lighttpd, atau lainnya.</p>

<p>Webserver untuk aplikasi Java membutuhkan file sertifikat dalam bentuk keystore, sedangkan webserver untuk aplikasi non Java membutuhkan sertifikat dalam bentuk file text.</p>

<p>Dari bentuk file text kita bisa membuat bentuk keystore dengan mudah. Cukup berbekal <code>openssl</code> dan <code>keytool</code> pekerjaan sudah bisa diselesaikan. Tapi sebaliknya, mengeluarkan private key dari keystore menjadi file text <a href="http://conshell.net/wiki/index.php/Keytool_to_OpenSSL_Conversion_tips">relatif sulit dan membutuhkan aplikasi tambahan</a>.</p>

<p>Oleh karena itu, pada artikel ini, semua langkah akan dilakukan dengan OpenSSL. Keytool akan digunakan di bagian terakhir pada waktu kita ingin memasang sertifikat di Tomcat.</p>

<h2>Struktur Folder</h2>

<p>Sebagai studi kasus, kita akan membuat aplikasi web yang dihosting dengan nama domain <code>demo.muhardin.com</code>. Seluruh file yang terlibat dalam rangkaian artikel ini bisa diambil di <a href="https://github.com/endymuhardin/belajar-ssl">repository Github</a>. Perhatikan juga <a href="https://github.com/endymuhardin/belajar-ssl/commits/master">history commit</a> untuk mengetahui urutan langkah-langkah yang dilakukan.</p>

<p>Siapkan dua folder, <code>ca</code> dan <code>demo.muhardin.com</code>. Folder <code>ca</code> akan digunakan untuk operasional CA yaitu menyetujui CSR yang masuk. Sedangkan folder <code>demo.muhardin.com</code> berisi semua file yang dibutuhkan webserver kita supaya bisa menjalankan HTTPS.</p>

<p>Nantinya bila kita membeli sertifikat berbayar, kita tidak perlu membuat folder <code>ca</code> ini.</p>

<h2>Membuat Private Key</h2>

<p>Kita ingin membuat private key dengan konfigurasi sebagai berikut:</p>

<ul>
<li>ukuran key : 2048 bit</li>
<li>algoritma : RSA</li>
<li>enkripsi : AES 256 bit</li>
</ul>


<p>Berikut adalah perintahnya, lakukan di dalam folder <code>demo.muhardin.com</code> :</p>

<p><code>
openssl genrsa -aes256 2048 &gt; demo.muhardin.com.key
</code></p>

<p>Berikut adalah outputnya</p>

<p><code>
Generating RSA private key, 2048 bit long modulus
......+++
.................................+++
e is 65537 (0x10001)
Enter pass phrase:
Verifying - Enter pass phrase:
</code></p>

<p>Kita diminta passphrase untuk mengenkripsi private key tersebut. Saya masukkan <code>test1234</code> sebagai password. Setelah selesai, kita akan mendapatkan satu file bernama <code>demo.muhardin.com.key</code>. Isinya adalah private key yang dienkripsi dengan algoritma AES berkekuatan 256 bit.</p>

<p>```
-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: AES-256-CBC,425E8DDEEC7FD63F9E67608F7B25BAC5</p>

<p>USIjQCyFsSfj/gbhXC0gT43qM9/4D9qGaEOAX2Ks7lxhs256LJImgeBywbnkzC67
l8ZJQlivxSlIaC658RUcVNNbWwN4EgsczCTSsGjxUxUQ46ay1XUaAbO82oLeZWx7
It0hQ/plno/kkpodtVwOvSks66ZdOIyTZ/IEA4BTMrmdsYi0PHfkbvlHfql9pdSO
8d4cbgQU9nSuGOzXIX1UEMXluTIYBP0aj151bvPeocjeK5WhioldTm+LemfutiMd
2N672BgMkhDeuYBauglChS0Q/fLmcRFM98ys+LcvEMlKtkT7L+vL4Wb7ulwhrOdG
g2ecMvAjcl9RBrSszOWZ6L2xMqvjFo6xS0bras1BVetYbvdC9PEQW0RXycbwzwGL
L9PJuQtKssI3MGTAydeKwrpT0Di27TiLqqb/QNBgJ/954JGLJJmpqVG3bt9YhCe5
DwGASsFysuRxNPCW1C3aQ3qhydA3xgYJZrpdaRAIk/KRwxx+CFrk4oV0dom0kVTx
w6jwjE0BS3q8e+nI42kXAilK84Qd4x6ZMAxM20DNQcucWGMRtJbrvvhJuLgMUNTI
MjOHAqojk9vAu5m4XXCUtXALhMZrepFXjaVTblfyPZ1hhFutiDhZaGzzj5SL1uoY
yLavTih3dQMpNBcOXY0TU/E4nKa0OhdGsNHs3gK9l77nO7IvZABviG2Qq50NuATj
AjvQVNeEiJKdq5FaiHgX+/g7PLNbXUtNWhLZ6jXLc6flQLOuBwiMCR0Ug/46IlTC
DOhsO36MDrMIxRjPgpcH00k9iXOvbuEILWGPjQ/WPNw7UoGEBepQSuIw2zzyD6ai
DHVx2pD60U2anRzvvXzVR7Tf42Tm1fxR4epTdrJIY3LJQtTr2PMCNbcn8+kGfTg1
M+1MCr+WN2pJhpYYr7ACFXFBJc1QLc/wF6/e47bkH3BLxWLZG1KQsLKzLim4teX+
zFvBkOz7SSgDlH0xyogiihjlgZxjRNkk/P5OvtbdKWpOrJh649mw+zwvuN3TmrA0
C/m70olU9QgjLCK3wlgkIr6bj1dS4sDPHghmEtpmp6OC8Ao1R9zDsIhIM1K9+ro7
rE/TzvADeZPg7tzwzRJeTiYq2gN/xxeqlW7YdxGZVPizcfPtqhLnBqzxKeb/uKjT
xuDMlQwZdlTV1QAGB1HKlb3qZdBtyEfUDEkwDL2z66r6roR750DtMnCwTsv9RIAJ
9J2BBIvWjBQiS61p+m5vQ+9ImfqIs6KnZmvbvX5qZvrXRlqyQKdcio87AbqlPNl8
IwrNP5ZePS5fBOJXcqtrecOKB3un+HmqiHqKWl8+O8TaMlgJNwdyw+4etzDWSH11
7AYJJ2SXqIVf0UqZPeYHS7oBsISvP2ekRLAx0XSvxnukBSGolRzyhs8oaRhB3MBr
uJRlKnQAfcFCk1zMNa75CC2vPP2WFMPixaR4HbBQ0pnMQp3KQHCuwmU7miS56EQm
hZVa0yzlKJ/Tiv7Vy+1v0FSiVqWhO5K1p/TG0jcj2tsQ76P2gwXvUZLFnm7bdom2
o8OfPVrr1Btje9+InVqiw2N3pgBBhRmE8ug/IYmz3tU3dxjXvjoJLpklah7ag4s2
-----END RSA PRIVATE KEY-----
```</p>

<h2>Membuat CSR</h2>

<p>Dengan bermodalkan private key tersebut, kita akan membuat CSR. Berikut perintahnya:</p>

<p><code>
openssl req -new -key demo.muhardin.com.key -out demo.muhardin.com.csr
</code></p>

<p>Kita akan ditanyai beberapa pertanyaan yang akan kita bahas dibawah. Berikut adalah outputnya.</p>

<p>```
Enter pass phrase for demo.muhardin.com.key:
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,</p>

<h2>If you enter '.', the field will be left blank.</h2>

<p>Country Name (2 letter code) [AU]:ID
State or Province Name (full name) [Some-State]:DKI Jakarta
Locality Name (eg, city) []:Jakarta Timur
Organization Name (eg, company) [Internet Widgits Pty Ltd]:PT. Endy Muhardin
Organizational Unit Name (eg, section) []:Divisi Teknologi Informasi
Common Name (e.g. server FQDN or YOUR name) []:demo.muhardin.com
Email Address []:endy@muhardin.com</p>

<p>Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:
```</p>

<ol>
<li>Kita diminta passphrase untuk membuka private key. Masukkan <code>test1234</code> seperti yang kita buat pada langkah pertama.</li>
<li>Kita akan ditanyai informasi tentang identitas kita. Masukkan sesuai kebutuhan.</li>
<li>Kita harus mengisi <code>Common Name</code>. Ini penting, terutama kalau kita membeli sertifikat berbayar!! Pastikan kita isi sesuai nama domain yang ingin kita pasangi https. Bila namanya tidak cocok, sertifikatnya akan menimbulkan warning. Saya isi sesuai nama domain yaitu <code>demo.muhardin.com</code>.</li>
<li>Email address juga harus diisi dengan benar. Ini biasanya digunakan CA untuk melakukan verifikasi.</li>
<li>Challenge password dan optional company name tidak saya isi</li>
</ol>


<p>Hasilnya adalah file CSR bernama <code>demo.muhardin.com.csr</code> yang isinya sebagai berikut.</p>

<p><code>
-----BEGIN CERTIFICATE REQUEST-----
MIIDADCCAegCAQAwgboxCzAJBgNVBAYTAklEMRQwEgYDVQQIDAtES0kgSmFrYXJ0
YTEWMBQGA1UEBwwNSmFrYXJ0YSBUaW11cjEaMBgGA1UECgwRUFQuIEVuZHkgTXVo
YXJkaW4xIzAhBgNVBAsMGkRpdmlzaSBUZWtub2xvZ2kgSW5mb3JtYXNpMRowGAYD
VQQDDBFkZW1vLm11aGFyZGluLmNvbTEgMB4GCSqGSIb3DQEJARYRZW5keUBtdWhh
cmRpbi5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC/CYCB6xU9
j6k0JwB4TwF2hI+H41fH1fG1J/ZZPO3tXaJuibrXOnJNMAXD+GkSv/fOA45uIcX4
6vvULXNz/fS8z3+RkVdrQ/BH2MBMeHjlU3duPYhv6c3yUVmZr7IsViBhTswT1VG9
ZAq57lmjc/DTI/8PjGFvA64pzeWce3yTAmu30zwnDQ22m5gGOfPMfsf2TTW3B1eS
Nv5WmlAIr6DtB4KxeCMXoKnIzBTDpqkeEf+MuIsqCw4/eXnWgBHZH66VIAy/9ygk
hvX2dQNaMAZoExOfAEWVYtzgW84t0j+CwSgxQuk/nvjknE5TGXOrhjZg8mn0eXZK
mmReIsYwjc09AgMBAAGgADANBgkqhkiG9w0BAQUFAAOCAQEAlbGTK4M2/wCHjg9p
aveomNfU/9qvcK7YTBNNET/ryZGcDCWmG8td01BeSeJUHhqjdxFWHBFsdg+aK5L1
xNd/eKG6NT7obviVHZGPVU2xMAIEOjx1xBP3FNbpIkuvapXcUxGBFlKy5aEmX2oo
/XYyu582J69t9HeDxVBKpdHoLEfwnvTGytka4GRwDZBwiDHTWYlKeBONUUCqO1/L
cd6GqFek37YPoP8ZfMIwTMDGrnCpcK0Z/nhkOZKAgfLtbHgHxvDG1ZUiul1hCLiY
U+us6wgir1kbWXN9Jg6IFlN3ZeLQ4ahDSkIvmLO34ujtFwlq870qJArcW57Po5Pl
3/bddQ==
-----END CERTIFICATE REQUEST-----
</code></p>

<p>File CSR ini akan dikirim pemilik domain ke CA, biasanya melalui email.</p>

<p>Selesailah bagian pemilik domain. Selanjutnya kita akan berpura-pura menjadi CA.</p>

<h2>CA menyetujui CSR dari pemilik domain</h2>

<h3>Kelengkapan CA</h3>

<p>Sebelum bisa menyetujui, kita sediakan dulu kelengkapan CA, yaitu:</p>

<ul>
<li>private key CA</li>
<li>sertifikat CA</li>
</ul>


<h3>Private Key CA</h3>

<p>Private key CA dibuat dengan perintah yang sama seperti pembuatan private key domain di atas.</p>

<p><code>
openssl genrsa -aes256 2048 &gt; ca.key
</code></p>

<p>Seperti sebelumnya, kita juga akan dimintai passphrase.</p>

<p><code>
Generating RSA private key, 2048 bit long modulus
..+++
.............................................................+++
e is 65537 (0x10001)
Enter pass phrase:
Verifying - Enter pass phrase:
</code></p>

<p>Saya gunakan <code>testca1234</code> sebagai passphrasenya. Hasilnya adalah file <code>ca.key</code> berisi text sebagai berikut</p>

<p>```
-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: AES-256-CBC,B7E9F6A263310662657F6B7052CE5CA0</p>

<p>7JX037X9M4Eqsr+BdM/27pj6ADtJIGAYQpHAFoZawhrmArW0PScnjbh/B1R06z3K
ej4HewKQB+SqCznHhmFpJmAuBpb0+snMZuoI3lm1zcRFUs8OSsLLd1B1w4USJlYN
K9mzLqQMlZrl56W9c4QthOegjkqE7RHleierWW3X2VqtWD29GISE8yi9mSb/hSaN
iATuMUaO8etM21F1MZownxKeetfBHJF2Y0XNt9AamrL8+gvb/dE2pPn8Zi2tlR3O
eoUX/FKaa0aV+f6e3X8IRivFp01mnT5UFm1OyDhDrQ1OL0tNzIlLMLqlk8o9njJ0
bBTlDAp5yZFbxtb/GZ94S8x9Nqql5ymVGFTC3BfE0TAfWMIH8YRYEVqMK8YLbGyg
M0vkDpV6impYgaTzJdICVdvOzb7rU9TnvkWsMrp3SRpSqoCtst6yDD59kXBgbPBq
Mj9QeCSXh8jf3LkKq2evSpJ6GlbCzR5EXeWCFcevsHY2xN//jA8v5UPtBOtojYu2
/uyAipnwctj+FEXki1BJwNrPuygzxibImJF3K4u83BkA2bBwIionufr71fNyUNai
2ToKPmxEgOFWGqypSsAw/GUw0LVseg4OlD+Ci2PCYPSwzcvkwulCklXOv8oIuXPb
hsoTVin67c5diok6ayqgyZuMLVIJKr2CAK+Gm77EO652SaIGJtdx5+DBs4BP/XF/
flgwG6DFpft2q93qaYqLPv2LqXAzsP6ACXBRjbPLUMkjv8Sg4iijy1siCxI9i9+N
harFVLRSagFy0dXDw/Wur42xsypcTCMY9kujszx0P4+1BO+vkdNCpSWWofgcIFhI
nZwLpHm9YZ5Sb7GxigBXh7dXc4Q+y2X8xvTg3Xdf+Cew4LpFktAByunUDjw4hjv4
iy56Rvx7lcxlmpwxXw3ZQTZinkSM7f7wqZjvH4E+wt5ShlPrFUGl3d2hmJ2thOTl
hWJ9CYZDDV02UtfYRVqpyY2BCKG3d4YfkUprfGs38/eJMA5zCUi8Uy6eJNu8t4gI
d55PEBltgyMOw8I4M3anbdYwphjhdlQPkbpbsA+AkV+m5dRIjSLxNSG1wXXyVuhI
vMLfrZ3uIKEkn9YXkb59lDx2E8NCmBU7hcV+w7hLu12q8CRCPZZNjnsbNa3Zg4X3
sBN78ak5OOp4thLRSeykpHdPn8sWyyk9RPGaAHv2Y3n4zv5P9JqZe4hA14sAjxj1
Ur+0gLfWoWQwu68F6fsOvngQnMjQneJaSHjhFdGr+HXdzOFqP9u6nxb9LpeFMTX9
i6Ut2IVvTL55LN5TT/U0mcvQo0C/k+31ABNTrsWhv3mkoj92RzWBGoj+1bM1NbeA
foSmmX674LnSUQvqlmsSOtDG5PCVBz+J5C+cmcGp98QFX5ViC2hVi3R+ItPbIirS
7NjJzXZ/f3yz8TOr5MU+I4aYtYNDMvzU8dArTHE8fU++dBTCj2F0KvpIGZlRpHf8
D6AA0a/9VNpwUyILeWD8rjdDiIvx3xPIODMZaN5SJFFAtbDKy9AhU1JCsNAjYdLz
crBRgAwXpcGHOTeDZr+nevcSo8sm7gsqyXcJ6c8r8urnOAKWhvptxGzy6LG8XqPQ
-----END RSA PRIVATE KEY-----
```</p>

<h3>Sertifikat CA</h3>

<p>Selanjutnya kita buat sertifikat berisi informasi tentang CA palsu kita ini. Sertifikat ini yang akan kita gunakan untuk menyetujui CSR dari pemilik domain. Berikut perintahnya</p>

<p><code>
openssl req -new -x509 -days 3650 -key ca.key &gt; ca.crt
</code></p>

<p>Perintah di atas akan membuat sertifikat dengan <a href="http://en.wikipedia.org/wiki/X.509#Structure_of_a_certificate">format X-509</a>, berlaku selama 10 tahun (3650 hari), menggunakan private key dalam file <code>ca.key</code>. Sertifikat ini akan ditulis ke file <code>ca.crt</code>. Kita juga akan ditanyai beberapa informasi tentang CA palsu yang kita buat ini. Berikut output dari perintah di atas</p>

<p>```
Enter pass phrase for ca.key:
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,</p>

<h2>If you enter '.', the field will be left blank.</h2>

<p>Country Name (2 letter code) [AU]:ID
State or Province Name (full name) [Some-State]:DKI Jakarta
Locality Name (eg, city) []:Jakarta Timur
Organization Name (eg, company) [Internet Widgits Pty Ltd]:CA Palsu
Organizational Unit Name (eg, section) []:Divisi Sertifikasi
Common Name (e.g. server FQDN or YOUR name) []:ROOT CA Palsu
Email Address []:
```</p>

<p>Berikut adalah isi file <code>ca.crt</code></p>

<p><code>
-----BEGIN CERTIFICATE-----
MIIEKzCCAxOgAwIBAgIJAKHgEOaDGy3mMA0GCSqGSIb3DQEBBQUAMIGrMQswCQYD
VQQGEwJJRDEUMBIGA1UECAwLREtJIEpha2FydGExFjAUBgNVBAcMDUpha2FydGEg
VGltdXIxETAPBgNVBAoMCENBIFBhbHN1MRswGQYDVQQLDBJEaXZpc2kgU2VydGlm
aWthc2kxFjAUBgNVBAMMDVJPT1QgQ0EgUGFsc3UxJjAkBgkqhkiG9w0BCQEWF2Vu
ZHkubXVoYXJkaW5AZ21haWwuY29tMB4XDTEzMDcwOTA0MDg1MloXDTIzMDcwNzA0
MDg1MlowgasxCzAJBgNVBAYTAklEMRQwEgYDVQQIDAtES0kgSmFrYXJ0YTEWMBQG
A1UEBwwNSmFrYXJ0YSBUaW11cjERMA8GA1UECgwIQ0EgUGFsc3UxGzAZBgNVBAsM
EkRpdmlzaSBTZXJ0aWZpa2FzaTEWMBQGA1UEAwwNUk9PVCBDQSBQYWxzdTEmMCQG
CSqGSIb3DQEJARYXZW5keS5tdWhhcmRpbkBnbWFpbC5jb20wggEiMA0GCSqGSIb3
DQEBAQUAA4IBDwAwggEKAoIBAQDda7cS/4qag6APajdqT7krxQOZZkYaCwzafZZN
P9ANwIfUvwB2DOMVLFDFf8DM/Y/hcm8lQAamTNnQ+b58X8oOqOwKX2Y6uPUau+n3
fCY4oTFhdYsbJHOW/hmTZXk+Exg3DHP+aFG7frUn39f8IuIGqujHIuWZfdokQFg8
AaheYdvigtIv3FBqxSCbNIYhmhkhZnrQvJbfbD92n1cHB91eYT9Mj2Z7tFt0ykVV
iQrOQ1n+CmMFUGheSD8Rnsi2ApsnBAsAj6ZruH1S+ZJJW+irZnbQE5LAsgUqjJYf
IFYMoVphTTEMVfoizj2JvspzinufX11V6lylPl0P7EhQvkNJAgMBAAGjUDBOMB0G
A1UdDgQWBBQ0c0rLkgOxJHxuBYyd3xeUVMHzxzAfBgNVHSMEGDAWgBQ0c0rLkgOx
JHxuBYyd3xeUVMHzxzAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUAA4IBAQBQ
W4t7WMj0FrVcxi/+W/jlAJ2BKGYev68bJiEeLVzbDHN3CQhfQwMWD0L0v6icP3c8
SLeGR+PEcq7FwGHb6gpIySVlnl8bxzRFK2lqfo+672djwtP0F/mrDKTDSzoIkPOq
G53otMXIAoplWDU7SRZE489AWfwOCCSmUJke9sEh1YYQwRVU7ceWSZLbRgfmzLeY
xjIfF/KBZrs8CMbYCEqHHHX5XAtIEP+3KSAbzfoxv/a07+FE+5/r5E6aXEBSbVme
y79zpM9VIV8FLlZr/+TITXqLKOBMmCmTVM1h1LJ8IjmWx9L6v631DX3/tc67HMoa
fauYxPo71IRYfIAN4RQ5
-----END CERTIFICATE-----
</code></p>

<p>Informasi di dalam sertifikat tersebut bisa kita lihat dengan perintah berikut</p>

<p><code>
openssl x509 -noout -text -in ca.crt
</code></p>

<p>Ini adalah hasilnya</p>

<p>```
Certificate:</p>

<pre><code>Data:
    Version: 3 (0x2)
    Serial Number: 11664341617117703654 (0xa1e010e6831b2de6)
Signature Algorithm: sha1WithRSAEncryption
    Issuer: C=ID, ST=DKI Jakarta, L=Jakarta Timur, O=CA Palsu, 
            OU=Divisi Sertifikasi, 
            CN=ROOT CA Palsu
    Validity
        Not Before: Jul  9 04:08:52 2013 GMT
        Not After : Jul  7 04:08:52 2023 GMT
    Subject: C=ID, ST=DKI Jakarta, L=Jakarta Timur, O=CA Palsu, 
             OU=Divisi Sertifikasi, 
             CN=ROOT CA Palsu
    Subject Public Key Info:
        Public Key Algorithm: rsaEncryption
            Public-Key: (2048 bit)
            Modulus:
                00:dd:6b:b7:12:ff:8a:9a:83:a0:0f:6a:37:6a:4f:
                b9:2b:c5:03:99:66:46:1a:0b:0c:da:7d:96:4d:3f:
                d0:0d:c0:87:d4:bf:00:76:0c:e3:15:2c:50:c5:7f:
                c0:cc:fd:8f:e1:72:6f:25:40:06:a6:4c:d9:d0:f9:
                be:7c:5f:ca:0e:a8:ec:0a:5f:66:3a:b8:f5:1a:bb:
                e9:f7:7c:26:38:a1:31:61:75:8b:1b:24:73:96:fe:
                19:93:65:79:3e:13:18:37:0c:73:fe:68:51:bb:7e:
                b5:27:df:d7:fc:22:e2:06:aa:e8:c7:22:e5:99:7d:
                da:24:40:58:3c:01:a8:5e:61:db:e2:82:d2:2f:dc:
                50:6a:c5:20:9b:34:86:21:9a:19:21:66:7a:d0:bc:
                96:df:6c:3f:76:9f:57:07:07:dd:5e:61:3f:4c:8f:
                66:7b:b4:5b:74:ca:45:55:89:0a:ce:43:59:fe:0a:
                63:05:50:68:5e:48:3f:11:9e:c8:b6:02:9b:27:04:
                0b:00:8f:a6:6b:b8:7d:52:f9:92:49:5b:e8:ab:66:
                76:d0:13:92:c0:b2:05:2a:8c:96:1f:20:56:0c:a1:
                5a:61:4d:31:0c:55:fa:22:ce:3d:89:be:ca:73:8a:
                7b:9f:5f:5d:55:ea:5c:a5:3e:5d:0f:ec:48:50:be:
                43:49
            Exponent: 65537 (0x10001)
    X509v3 extensions:
        X509v3 Subject Key Identifier: 
            34:73:4A:CB:92:03:B1:24:7C:6E:05:8C:9D:DF:17:94:54:C1:F3:C7
        X509v3 Authority Key Identifier: 
            keyid:34:73:4A:CB:92:03:B1:24:7C:6E:05:8C:9D:DF:17:94:54:C1:F3:C7

        X509v3 Basic Constraints: 
            CA:TRUE
Signature Algorithm: sha1WithRSAEncryption
     50:5b:8b:7b:58:c8:f4:16:b5:5c:c6:2f:fe:5b:f8:e5:00:9d:
     81:28:66:1e:bf:af:1b:26:21:1e:2d:5c:db:0c:73:77:09:08:
     5f:43:03:16:0f:42:f4:bf:a8:9c:3f:77:3c:48:b7:86:47:e3:
     c4:72:ae:c5:c0:61:db:ea:0a:48:c9:25:65:9e:5f:1b:c7:34:
     45:2b:69:6a:7e:8f:ba:ef:67:63:c2:d3:f4:17:f9:ab:0c:a4:
     c3:4b:3a:08:90:f3:aa:1b:9d:e8:b4:c5:c8:02:8a:65:58:35:
     3b:49:16:44:e3:cf:40:59:fc:0e:08:24:a6:50:99:1e:f6:c1:
     21:d5:86:10:c1:15:54:ed:c7:96:49:92:db:46:07:e6:cc:b7:
     98:c6:32:1f:17:f2:81:66:bb:3c:08:c6:d8:08:4a:87:1c:75:
     f9:5c:0b:48:10:ff:b7:29:20:1b:cd:fa:31:bf:f6:b4:ef:e1:
     44:fb:9f:eb:e4:4e:9a:5c:40:52:6d:59:9e:cb:bf:73:a4:cf:
     55:21:5f:05:2e:56:6b:ff:e4:c8:4d:7a:8b:28:e0:4c:98:29:
     93:54:cd:61:d4:b2:7c:22:39:96:c7:d2:fa:bf:ad:f5:0d:7d:
     ff:b5:ce:bb:1c:ca:1a:7d:ab:98:c4:fa:3b:d4:84:58:7c:80:
     0d:e1:14:39
</code></pre>

<p>```</p>

<h3>Konfigurasi CA</h3>

<p>CA yang asli biasanya memiliki banyak private key dan certificate turunan.
Dari private key dan certificate yang utama (Root), dia akan membuat beberapa private key dan certificate lain.
Ini karena CA yang besar biasanya memiliki banyak reseller untuk menjualkan sertifikat SSL.
Untuk membatasi resiko dan juga memudahkan pendataan, request dari pelanggan masing-masing reseller disetujui dengan certificate turunan yang diperuntukkan khusus untuk reseller tersebut. Dengan demikian, bila terjadi masalah dengan reseller tersebut,
cukup certificate turunan yang khusus untuk reseller tersebut yang dibatalkan. Certificate turunan ini disebut dengan istilah <code>intermediate CA certificate</code>.</p>

<p>Pada waktu pembuatan signature terhadap CSR, ada banyak informasi yang dibutuhkan. Apalagi kalau suatu CA memiliki banyak intermediate certificate, masing-masing intermediate certificate tersebut berbeda informasi <code>issuer</code> nya. Contohnya, suatu CA memiliki lini produk seperti ini:</p>

<ul>
<li>Gratis : hanya berlaku 30 hari</li>
<li>Standar : berlaku 1 tahun, untuk satu domain</li>
<li>Enterprise : berlaku 1 tahun, multi domain</li>
<li>dan sebagainya</li>
</ul>


<p>Agar berbagai kategori di atas mudah dikelola, kita akan membuat file konfigurasi. Kita beri nama <code>openssl-config.txt</code> dan berisi seperti ini</p>

<p>```
[ca]
default_ca         = ca-palsu</p>

<p>[ca-palsu]
dir                = ca-palsu</p>

<h1>sertifikat dan private key CA</h1>

<p>certificate        = $dir/ca.crt
private_key        = $dir/ca.key</p>

<h1>Folder penyimpanan</h1>

<p>cert               = $dir/sertifikat-customer
new_certs_dir      = $dir/sertifikat-customer
crl                = $dir/sertifikat-batal</p>

<h1>Database sertifikat yang sudah dikeluarkan</h1>

<p>database           = $dir/database.txt
serial             = $dir/serial.txt</p>

<h1>Nilai default untuk sertifikat baru</h1>

<p>default_days       = 365               # masa berlaku sertifikat customer
default_crl_days   = 30                # masa berlaku daftar pembatalan sertifikat
default_md         = sha1
x509_extensions    = usr_cert</p>

<h1>Konfigurasi tambahan</h1>

<p>policy = policy-saya
x509_extensions = certificate_extensions</p>

<p>[ policy-saya ]</p>

<h1>Gunakan informasi dalam CSR</h1>

<p>commonName = supplied
stateOrProvinceName = supplied
countryName = supplied
emailAddress = supplied
organizationName = supplied
organizationalUnitName = optional</p>

<p>[ certificate_extensions ]</p>

<h1>Sertifikat customer tidak boleh jadi CA</h1>

<p>basicConstraints = CA:false</p>

<p>[ req ]</p>

<h1>private key yang digunakan untuk menyetujui CSR</h1>

<p>default_keyfile = ca-palsu/ca.key
```</p>

<p>Konfigurasi di atas berisi satu CA (tanpa intermediate certificate). Bila nantinya kita mau membuat beberapa CA, baik sebagai Root CA maupun Intermediate CA, kita tinggal copy-paste konfigurasi untuk <code>ca-palsu</code>.</p>

<p>Root CA kita <code>ca-palsu</code> kita buatkan folder tersendiri untuk menyimpan file-filenya. Kita masukkan private key dan certificate dirinya sendiri. Kemudian, kita juga membutuhkan file database dan serial. File database gunanya untuk menyimpan data semua sertifikat yang pernah diterbitkan oleh CA <code>ca-palsu</code>. Karena database ini merupakan file text biasa, bukan database server seperti MySQL atau Oracle, maka kita perlu bantu <code>openssl</code> untuk membuatkan serial number dengan cara menyediakan file text lain bernama <code>serial.txt</code>. Di sini <code>openssl</code> bisa mencatat nomer terakhir yang sudah terpakai. Untuk data awal, kita isi saja nilai <code>1000</code> dengan perintah berikut</p>

<p><code>
echo 1000 &gt; ca-palsu/serial.txt
</code></p>

<p>Kita buatkan juga file <code>database.txt</code>, karena <code>openssl</code> tidak bisa membuat sendiri. Cukup gunakan perintah <code>touch</code> di Linux.</p>

<p><code>
touch ca-palsu/database.txt
touch ca-palsu/database.txt.attr
</code></p>

<p>Bila sulit dibayangkan, langsung saja lihat <a href="https://github.com/endymuhardin/belajar-ssl/tree/10c1f7302226b07ac31505dc24e8fdf6091dfee9/ca">struktur foldernya di Github</a>. Di Github kita juga bisa lihat versi awal dari <a href="https://github.com/endymuhardin/belajar-ssl/blob/10c1f7302226b07ac31505dc24e8fdf6091dfee9/ca/ca-palsu/serial.txt">serial.txt</a>, <a href="https://github.com/endymuhardin/belajar-ssl/blob/10c1f7302226b07ac31505dc24e8fdf6091dfee9/ca/ca-palsu/database.txt">database.txt</a>, dan <a href="https://github.com/endymuhardin/belajar-ssl/blob/10c1f7302226b07ac31505dc24e8fdf6091dfee9/ca/ca-palsu/database.txt.attr">database.txt.attr</a>.</p>

<p>Jangan heran bila <code>database.txt</code> dan <code>database.txt.attr</code> tidak ada isinya. Memang harusnya seperti itu.</p>

<p>Sekarang kita siap membuatkan signature untuk CSR dari <code>demo.muhardin.com</code></p>

<h3>Membuat signature CSR dengan Sertifikat CA</h3>

<p>CA menerima CSR dari pemilik domain. Untuk simulasinya, kita copy saja file CSR ke folder <code>ca-palsu/sertifikat-request</code>.
Setelah diterima, seharusnya CA melakukan verifikasi terhadap pemilik domain <code>demo.muhardin.com</code>. Prosedur verifikasi yang asli akan kita bahas di artikel berikutnya. Kita asumsikan saja verifikasi berjalan sukses, sehingga kita bisa langsung membuatkan signaturenya.</p>

<p>Berikut adalah perintah untuk membuatkan signature dengan menggunakan CA <code>ca-palsu</code>.</p>

<p><code>
openssl ca -config openssl-config.txt -in ca-palsu/sertifikat-request/demo.muhardin.com.csr
</code></p>

<p>OpenSSL akan menanyakan password untuk private key <code>ca-palsu</code>, kemudian membuatkan sertifikat baru sesuai konfigurasi <code>new_certs_dir</code> dalam <code>openssl-config.txt</code>. Berikut output perintah di atas.</p>

<p>```
Using configuration from openssl-config.txt
Enter pass phrase for ca-palsu/ca.key:
Check that the request matches the signature
Signature ok
The Subject's Distinguished Name is as follows
countryName           :PRINTABLE:'ID'
stateOrProvinceName   :ASN.1 12:'DKI Jakarta'
localityName          :ASN.1 12:'Jakarta Timur'
organizationName      :ASN.1 12:'PT. Endy Muhardin'
organizationalUnitName:ASN.1 12:'Divisi Teknologi Informasi'
commonName            :ASN.1 12:'demo.muhardin.com'
emailAddress          :IA5STRING:'endy@muhardin.com'
Certificate is to be certified until Jul  9 05:48:04 2014 GMT (365 days)
Sign the certificate? [y/n]:y</p>

<p>1 out of 1 certificate requests certified, commit? [y/n]y
Write out database with 1 new entries
Certificate:</p>

<pre><code>Data:
    Version: 3 (0x2)
    Serial Number: 4096 (0x1000)
Signature Algorithm: sha1WithRSAEncryption
    Issuer: C=ID, ST=DKI Jakarta, L=Jakarta Timur, 
            O=CA Palsu, OU=Divisi Sertifikasi, CN=ROOT CA Palsu
    Validity
        Not Before: Jul  9 05:48:04 2013 GMT
        Not After : Jul  9 05:48:04 2014 GMT
    Subject: CN=demo.muhardin.com, ST=DKI Jakarta, 
             C=ID/emailAddress=endy@muhardin.com, 
             O=PT. Endy Muhardin, OU=Divisi Teknologi Informasi
    Subject Public Key Info:
        Public Key Algorithm: rsaEncryption
            Public-Key: (2048 bit)
            Modulus:
                00:bf:09:80:81:eb:15:3d:8f:a9:34:27:00:78:4f:
                01:76:84:8f:87:e3:57:c7:d5:f1:b5:27:f6:59:3c:
                ed:ed:5d:a2:6e:89:ba:d7:3a:72:4d:30:05:c3:f8:
                69:12:bf:f7:ce:03:8e:6e:21:c5:f8:ea:fb:d4:2d:
                73:73:fd:f4:bc:cf:7f:91:91:57:6b:43:f0:47:d8:
                c0:4c:78:78:e5:53:77:6e:3d:88:6f:e9:cd:f2:51:
                59:99:af:b2:2c:56:20:61:4e:cc:13:d5:51:bd:64:
                0a:b9:ee:59:a3:73:f0:d3:23:ff:0f:8c:61:6f:03:
                ae:29:cd:e5:9c:7b:7c:93:02:6b:b7:d3:3c:27:0d:
                0d:b6:9b:98:06:39:f3:cc:7e:c7:f6:4d:35:b7:07:
                57:92:36:fe:56:9a:50:08:af:a0:ed:07:82:b1:78:
                23:17:a0:a9:c8:cc:14:c3:a6:a9:1e:11:ff:8c:b8:
                8b:2a:0b:0e:3f:79:79:d6:80:11:d9:1f:ae:95:20:
                0c:bf:f7:28:24:86:f5:f6:75:03:5a:30:06:68:13:
                13:9f:00:45:95:62:dc:e0:5b:ce:2d:d2:3f:82:c1:
                28:31:42:e9:3f:9e:f8:e4:9c:4e:53:19:73:ab:86:
                36:60:f2:69:f4:79:76:4a:9a:64:5e:22:c6:30:8d:
                cd:3d
            Exponent: 65537 (0x10001)
    X509v3 extensions:
        X509v3 Basic Constraints: 
            CA:FALSE
Signature Algorithm: sha1WithRSAEncryption
     2e:1e:b9:4b:e4:ad:74:34:1c:7c:46:9c:d5:d8:83:db:da:b7:
     b9:a0:ad:c5:54:f7:f2:51:c1:8f:77:70:ae:b4:a1:f6:9d:40:
     ec:d5:55:76:0d:d0:d3:1b:36:ca:8b:bb:64:52:a8:ca:95:18:
     5d:d1:28:47:e9:46:89:72:16:8e:57:b9:97:ac:93:c3:5d:6e:
     17:ac:b3:91:87:61:26:a7:c6:6e:35:d9:03:92:cb:06:08:e5:
     93:83:89:fb:44:6b:b9:78:b5:b7:e5:d4:84:47:3e:0e:26:40:
     ec:4e:7a:6f:c1:76:75:b6:6c:f2:ef:c5:97:46:8e:d5:1b:1a:
     67:95:1e:3e:d7:56:91:43:6d:a2:7a:e7:a4:bd:29:f0:1a:67:
     62:d0:83:35:45:96:19:1f:c8:ee:cf:27:3e:f7:9b:11:cc:b3:
     a8:dd:e6:b4:8a:85:c2:69:36:4f:0c:c3:50:f4:3a:30:e0:3a:
     f6:6a:2b:72:4e:a3:44:0f:af:73:06:8e:fd:20:d3:4b:99:f5:
     8b:72:f8:f6:21:3c:f4:03:ce:4d:bc:b2:e1:11:29:0d:3d:80:
     23:41:72:d1:fb:28:f0:32:cf:49:56:5d:cc:e3:a7:dc:88:5c:
     61:8f:36:9b:bc:28:df:81:89:4a:e6:7f:06:7e:45:9f:19:f8:
     83:ca:1b:df
</code></pre>

<p>-----BEGIN CERTIFICATE-----
MIIDsDCCApigAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwgYMxCzAJBgNVBAYTAklE
MRQwEgYDVQQIDAtES0kgSmFrYXJ0YTEWMBQGA1UEBwwNSmFrYXJ0YSBUaW11cjER
MA8GA1UECgwIQ0EgUGFsc3UxGzAZBgNVBAsMEkRpdmlzaSBTZXJ0aWZpa2FzaTEW
MBQGA1UEAwwNUk9PVCBDQSBQYWxzdTAeFw0xMzA3MDkwNTQ4MDRaFw0xNDA3MDkw
NTQ4MDRaMIGiMRowGAYDVQQDDBFkZW1vLm11aGFyZGluLmNvbTEUMBIGA1UECAwL
REtJIEpha2FydGExCzAJBgNVBAYTAklEMSAwHgYJKoZIhvcNAQkBFhFlbmR5QG11
aGFyZGluLmNvbTEaMBgGA1UECgwRUFQuIEVuZHkgTXVoYXJkaW4xIzAhBgNVBAsM
GkRpdmlzaSBUZWtub2xvZ2kgSW5mb3JtYXNpMIIBIjANBgkqhkiG9w0BAQEFAAOC
AQ8AMIIBCgKCAQEAvwmAgesVPY+pNCcAeE8BdoSPh+NXx9XxtSf2WTzt7V2ibom6
1zpyTTAFw/hpEr/3zgOObiHF+Or71C1zc/30vM9/kZFXa0PwR9jATHh45VN3bj2I
b+nN8lFZma+yLFYgYU7ME9VRvWQKue5Zo3Pw0yP/D4xhbwOuKc3lnHt8kwJrt9M8
Jw0NtpuYBjnzzH7H9k01twdXkjb+VppQCK+g7QeCsXgjF6CpyMwUw6apHhH/jLiL
KgsOP3l51oAR2R+ulSAMv/coJIb19nUDWjAGaBMTnwBFlWLc4FvOLdI/gsEoMULp
P5745JxOUxlzq4Y2YPJp9Hl2SppkXiLGMI3NPQIDAQABow0wCzAJBgNVHRMEAjAA
MA0GCSqGSIb3DQEBBQUAA4IBAQAuHrlL5K10NBx8RpzV2IPb2re5oK3FVPfyUcGP
d3CutKH2nUDs1VV2DdDTGzbKi7tkUqjKlRhd0ShH6UaJchaOV7mXrJPDXW4XrLOR
h2Emp8ZuNdkDkssGCOWTg4n7RGu5eLW35dSERz4OJkDsTnpvwXZ1tmzy78WXRo7V
GxpnlR4+11aRQ22ieuekvSnwGmdi0IM1RZYZH8juzyc+95sRzLOo3ea0ioXCaTZP
DMNQ9Dow4Dr2aityTqNED69zBo79INNLmfWLcvj2ITz0A85NvLLhESkNPYAjQXLR
+yjwMs9JVl3M46fciFxhjzabvCjfgYlK5n8GfkWfGfiDyhvf
-----END CERTIFICATE-----
Data Base Updated
```</p>

<p>Setelah sukses, <code>openssl</code> akan membuatkan sertifikat yang sudah ditandatangani menggunakan private key <code>ca-palsu</code>. Berikut daftar file/folder yang terdampak selama proses ini:</p>

<ul>
<li>serial.txt : tadinya berisi 1000, sekarang berisi 1001</li>
<li>database.txt : tadinya kosong, sekarang ada satu baris berisi informasi sertifikat yang baru saja dibuat</li>
<li>folder sertifikat-customer : tadinya kosong, sekarang berisi satu file sertifikat untuk <code>demo.muhardin.com</code> dengan nama file <code>1000.pem</code></li>
</ul>


<p>Daftar perubahan ini bisa <a href="https://github.com/endymuhardin/belajar-ssl/commit/f950bdfb866be9da7a80e613b7d95bf282454b05">dilihat di Github</a>.</p>

<p>Selanjutnya, CA akan mengirimkan file <code>1000.pem</code> tersebut ke pemilik domain <code>demo.muhardin.com</code>.</p>

<h2>Kelengkapan File Pemilik Domain</h2>

<p>Setelah menerima file <code>100.pem</code> dari CA, pemilik domain <code>demo.muhardin.com</code> akan memiliki file berikut:</p>

<ul>
<li>File private key : <code>demo.muhardin.com.key</code></li>
<li>File CSR : <code>demo.muhardin.com.csr</code>. File ini <a href="http://security.stackexchange.com/questions/32857/could-i-delete-csr-files-when-the-key-is-signed-by-ca">boleh dihapus setelah kita menerima sertifikat yang telah disahkan oleh CA</a>.</li>
<li>File sertifikat dari CA : <code>1000.pem</code>. Agar lebih jelas, kita rename saja menjadi <code>demo.muhardin.com.crt</code>.</li>
</ul>


<p>Demikianlah langkah-langkah membuat self-signed certificate. Pada artikel berikutnya, kita akan membahas bagaimana <a href="http://software.endy.muhardin.com/aplikasi/membeli-sertifikat-ssl/">cara membeli sertifikat</a>. Kemudian memasang sertifikat (baik yang self-signed maupun yang berbayar) ke webserver kita.</p>
]]></content>
  </entry>
  
</feed>
