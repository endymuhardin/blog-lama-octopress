<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: aplikasi | Living life and make it better]]></title>
  <link href="http://software.endy.muhardin.com/categories/aplikasi/atom.xml" rel="self"/>
  <link href="http://software.endy.muhardin.com/"/>
  <updated>2013-06-14T08:14:58+07:00</updated>
  <id>http://software.endy.muhardin.com/</id>
  <author>
    <name><![CDATA[Endy Muhardin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mematikan Location Service di Facebook Android]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/mematikan-location-service-di-facebook-android/"/>
    <updated>2013-02-04T11:23:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/mematikan-location-service-di-facebook-android</id>
    <content type="html"><![CDATA[<p>Jaman sekarang, berbagai layanan internet semakin ingin tahu saja
di mana kita sedang berada. Memang ada layanan yang dikhususkan untuk
mempublikasikan lokasi kita, seperti misalnya <a href="https://foursquare.com/">Foursquare</a> atau
<a href="https://latitude.google.com">Google Latitude</a>.
Tapi untuk kedua layanan tersebut, kita sendiri yang secara sukarela mempublikasikan lokasi kita.</p>

<p>Banyak aplikasi social lain yang sering kita gunakan, dan berusaha untuk mengetahui posisi kita setiap saat.
Tidak terkecuali aplikasi sejuta umat, yaitu <a href="http://facebook.com">Facebook</a>.
Setiap kali kita chat atau posting sesuatu, Facebook langsung memasang lokasi kita di posting atau pesan
yang kita taruh di Facebook.</p>

<p>Nah, pada artikel ini, kita akan membahas cara mematikan fitur tersebut
pada <a href="https://play.google.com/store/apps/details?id=com.facebook.katana">aplikasi Facebook yang berjalan di Android</a>.</p>

<!--more-->


<p>Ada dua tempat yang mempublikasikan lokasi kita, yaitu:</p>

<ul>
<li>Chat (Facebook Messenger)</li>
<li>Posting Status</li>
</ul>


<h1>Facebook Chat</h1>

<p>Bila kita sedang chat dengan teman di Facebook, maka di aplikasi akan tampil informasi lokasi kita
berikut dengan tombol panah untuk mematikan/menyalakan informasi lokasi tersebut.
Pada menu chat ini, tidak sulit untuk mematikannya, cukup sentuh saja icon tersebut hingga berganti warna
menjadi abu-abu. Biru artinya aktif, abu-abu artinya tidak aktif.</p>

<p>Lebih jelasnya bisa dilihat pada gambar berikut:</p>

<p><img src="/images/uploads/2013/02/04/messenger-location.png" title="messenger-location" ></p>

<p>Biasanya, sekali dimatikan akan tetap mati sampai kita nyalakan lagi.
Tapi untuk amannya, jangan lupa dicek sebelum kirim tombol <code>Send</code>.</p>

<h1>Posting Status</h1>

<p>Nah untuk menu posting status, Facebook lebih rewel. Pertama, kita lihat dulu screenshot aplikasi
pada saat kita ingin memposting sesuatu.</p>

<p><img src="/images/uploads/2013/02/04/posting-location.png" title="posting-location" ></p>

<p>Kita bisa lihat bahwa lokasi kita tercantum di sana. Untuk mematikannya, kita tekan icon bola dunia.
Aplikasi akan menampilkan menu pemilihan lokasi. Kita klik tanda silang di pojok kanan bawah seperti pada screenshot berikut.</p>

<p><img src="/images/uploads/2013/02/04/location-menu.png" title="location-menu" ></p>

<p>Selanjutnya, layar akan kembali ke menu posting. Kita bisa lihat bahwa informasi lokasi sudah tidak ada.</p>

<p><img src="/images/uploads/2013/02/04/after-disable.png" title="after-disable" ></p>

<p>Yang menyebalkan, informasi lokasi ini akan kembali aktif pada waktu kita mau posting lagi.
Sehingga kita harus mematikannya tiap kali mau posting.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Buku Panduan Markdown dan Pandoc]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/buku-panduan-markdown-dan-pandoc/"/>
    <updated>2012-09-26T12:26:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/buku-panduan-markdown-dan-pandoc</id>
    <content type="html"><![CDATA[<p>Menyusul <a href="http://software.endy.muhardin.com/aplikasi/membuat-dokumen-dengan-markdown-dan-pandoc/">postingan sebelumnya</a>, saya telah menulis buku panduan cara menggunakan Markdown dan Pandoc.</p>

<p>Buku ini tentu saja ditulis menggunakan Markdown dan dikonversi ke PDF menggunakan Pandoc. Silahkan digunakan:</p>

<ul>
<li>Source code ada di <a href="https://github.com/endymuhardin/buku-pandoc">Github</a></li>
<li>Hasil PDF yang sudah jadi bisa diunduh <a href="https://raw.github.com/endymuhardin/buku-pandoc/master/buku/markdown-dan-pandoc.pdf">di sini</a>.</li>
</ul>


<p>Semoga bermanfaat.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membuat dokumen dengan Markdown dan Pandoc]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/membuat-dokumen-dengan-markdown-dan-pandoc/"/>
    <updated>2012-09-05T11:53:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/membuat-dokumen-dengan-markdown-dan-pandoc</id>
    <content type="html"><![CDATA[<p>Sudah lama saya mencari format yang tepat untuk membuat dokumentasi. Baik untuk menulis ebook, user manual, modul pelatihan, dan berbagai keperluan penulisan lainnya. Beberapa fitur yang saya inginkan antara lain:</p>

<ol>
<li>berbentuk text file biasa. Dengan menggunakan format text file biasa, ada beberapa keuntungan yang bisa diambil:

<ul>
<li>Bisa dikelola di version control seperti Git atau Subversion</li>
<li>Bisa diedit di komputer, handphone, ataupun tablet</li>
<li>Ukurannya kecil, sehingga memudahkan penyimpanan di cloud storage seperti Dropbox</li>
</ul>
</li>
<li>Bisa dikonversi ke format lain, terutama pdf</li>
<li>Mudah dipahami</li>
<li>Bisa diwarnai dengan syntax highlighting</li>
<li>Bisa autocomplete</li>
</ol>


<p>Dari empat fitur di atas, yang wajib cuma yang pertama dan kedua saja. Fitur lainnya bersifat <em>nice to have</em>, ada syukur, gak ada juga tidak terlalu masalah.</p>

<!--more-->


<p>Setelah google kesana-kemari, ada dua format yang kira-kira memenuhi syarat di atas, yaitu <a href="http://en.wikipedia.org/wiki/Markdown">Markdown</a> dan <a href="http://en.wikipedia.org/wiki/DocBook">Docbook</a>. Dua-duanya mudah dipahami. Walaupun demikian, format Markdown lebih mudah diedit, karena menggunakan markup yang enak dilihat mata. Sedangkan Docbook menggunakan format XML, selain kurang WYSYWIG, juga bikin capek kelingking karena harus mengetik kurung siku terus menerus. Kurung siku ini juga menyulitkan kalau kita mengetik di handphone atau tablet.</p>

<p>Jadi, disimpulkan kita akan menggunakan format Markdown saja. Ini juga sejalan dengan aplikasi yang saya gunakan untuk menulis blog, yaitu <a href="http://octopress.org/">Octopress</a>. Untuk melihat bagaimana tampilan file markdown, silahkan unduh <a href="https://raw.github.com/endymuhardin/belajar-pandoc/master/01-akses-database-spring-25.md">file contoh yang saya gunakan di bawah</a>, kemudian buka dengan text editor primitif seperti Notepad atau Gedit.</p>

<p>Setelah dokumen ditulis, kita bisa melakukan konversi dengan menggunakan aplikasi bernama <a href="http://johnmacfarlane.net/pandoc/index.html">Pandoc</a>. Pandoc ini adalah aplikasi yang dibuat oleh <a href="http://johnmacfarlane.net/">John MacFarlane</a>, seorang profesor filosofi di University of California, Berkeley. Pandoc dibuat dengan bahasa pemrograman <a href="http://en.wikipedia.org/wiki/Haskell_(programming_language">Haskell</a>).</p>

<h1>Instalasi Pandoc</h1>

<p>Di Ubuntu, instalasinya tidak sulit, cukup jalankan perintah berikut:</p>

<p><code>sudo apt-get install pandoc texlive-latex-base texlive-xetex latex-beamer</code></p>

<p>Instalasi untuk Windows saya tidak tahu dan juga tidak berminat untuk cari tahu. Silahkan baca <a href="http://johnmacfarlane.net/pandoc/installing.html">petunjuk instalasi</a>.</p>

<h1>Cara Pemakaian</h1>

<p>Cara pakainya tidak sulit, cukup dengan perintah sederhana seperti ini:</p>

<p><code>pandoc -o hasil.pdf input.md</code></p>

<p>File <code>input.md</code> adalah tulisan kita dalam format markdown, sedangkan opsi <code>-o hasil.pdf</code> menunjukkan file output yang ingin dihasilkan. Pandoc cukup cerdas untuk mengetahui format output yang diinginkan dengan melihat ekstensi di nama file. Jadi, kalau kita berikan opsi <code>-o hasil.html</code>, dia akan mengkonversi tulisan kita menjadi file HTML.</p>

<p>Lebih jauh tentang cara pemakaian Pandoc bisa dilihat di <a href="http://johnmacfarlane.net/pandoc/README.html">user manualnya</a>. Selain itu, kita juga bisa melihat <a href="http://johnmacfarlane.net/pandoc/demos.html">berbagai contoh pemakaian Pandoc</a> di websitenya. Beberapa contoh yang menarik diantaranya adalah cara menghasilkan slide presentasi dengan format HTML, yaitu di contoh nomer 16.</p>

<h1>Customization</h1>

<p>Untuk kebutuhan modul pelatihan ArtiVisi, tentu kita membutuhkan sedikit penyesuaian, yaitu:</p>

<ul>
<li>font serif diganti menjadi Droid Serif. Font serif ini biasa digunakan untuk paragraf.</li>
<li>font sans diganti menjadi Droid Sans. Font sans biasa digunakan untuk judul.</li>
<li>font monospace diganti menjadi Inconsolata. Font monospace biasa digunakan untuk contoh kode program.</li>
<li>cover depan. Pandoc secara default tidak membuatkan cover depan. Kita perlu membuat template cover sendiri.</li>
</ul>


<p>Penyesuaian di atas dilakukan dengan cara membuat template dokumen. Template ini berbeda-beda tergantung jenis output yang akan dihasilkan.</p>

<h2>Template Open Office</h2>

<p>Untuk membuat template dokumen Open Office, berikut langkah-langkahnya:</p>

<ol>
<li>Generate dulu dokumen Open Office dengan perintah <code>pandoc -o hasil.odt input.md</code></li>
<li>Buka <code>hasil.odt</code> dengan Open Office.</li>
<li>Edit masing-masing style yang digunakan, misalnya TextBody, PreformattedText, dsb.</li>
<li>Simpan dokumen tersebut, dan rename menjadi <code>template.odt</code></li>
<li>Generate lagi dokumen Open Office menggunakan template tersebut dengan perintah <code>pandoc --reference-odt=template.odt -o hasil.odt input.md</code></li>
</ol>


<p>Cara ini saya dapatkan dari <a href="http://maketecheasier.com/use-pandoc-convert-text-to-ebook/2012/09/01">tutorial ini</a>.</p>

<h2>Template PDF</h2>

<p>Pandoc menghasilkan dokumen PDF secara dua tahap. Tahap pertama adalah konversi dari <code>Markdown</code> menjadi <code>LaTeX</code>. Kemudian dari format <code>LaTeX</code> akan dikonversi lagi menjadi <code>PDF</code>. Perlu diperhatikan, yang dimaksud <code>LaTeX</code> di sini adalah format penulisan dokumen, bukan bahan baku pembuatan alat kontrasepsi.</p>

<p>Dengan demikian, untuk menyesuaikan output PDF, kita perlu membuat template <code>LaTeX</code>. Prof John sudah memberi tahu cara pakai template di contoh nomer 14. Di situ kita bisa mengunduh <a href="http://johnmacfarlane.net/pandoc/demo/mytemplate.tex">contoh template</a> yang dia gunakan. Contoh template ini akan menjadi titik awal kita untuk melakukan penyesuaian.</p>

<p>Di contoh template tersebut, beliau sudah memasang font yang bisa dicustomize melalui opsi <code>--variable</code>. Yang kurang adalah halaman sampul (cover page). Saya menemukan <a href="http://www.latextemplates.com/">daftar template cover yang siap pakai</a>, dan juga <a href="http://en.wikibooks.org/wiki/LaTeX/Title_Creation">tutorial cara mendesain cover sendiri</a>. Untuk penyesuaian lebih lanjut, kita bisa berpedoman pada <a href="http://en.wikibooks.org/wiki/LaTeX/Command_Glossary">dokumentasi perintah Latex</a>.</p>

<p>Setelah template selesai dibuat, kita bisa langsung gunakan dengan perintah sebagai berikut:</p>

<p><code>sh
pandoc --template artivisi-template.tex  --variable mainfont="Droid Serif" --variable sansfont="Droid Sans" --variable fontsize=12pt --variable version=1.0 --variable subtitle="Mengakses database menggunakan Spring-JDBC" --latex-engine=xelatex --toc -N -o hasil.pdf *md
</code></p>

<p>Anda bisa melihat <a href="https://raw.github.com/endymuhardin/belajar-pandoc/master/output/coba.pdf">file PDF yang dihasilkan</a>, <a href="https://raw.github.com/endymuhardin/belajar-pandoc/master/00-cover.md">file markdown untuk cover</a>, <a href="https://raw.github.com/endymuhardin/belajar-pandoc/master/01-akses-database-spring-25.md">file markdown isi artikel</a>, dan <a href="https://raw.github.com/endymuhardin/belajar-pandoc/master/artivisi-template.tex">template LaTeX yang digunakan</a>. Atau bisa juga unduh <a href="https://nodeload.github.com/endymuhardin/belajar-pandoc/zipball/master">file zip</a> yang berisi semua file yang dibutuhkan untuk menjalankan perintah di atas.</p>

<h1>Kesimpulan</h1>

<p>Dengan menggunakan format berbasis text, kita bisa memperoleh keuntungan sebagai berikut:</p>

<ul>
<li>bisa diedit menggunakan aplikasi apa saja, termasuk Notepad</li>
<li>bisa dikelola menggunakan aplikasi version control</li>
<li>bisa diedit kapan saja dan di mana saja (menggunakan Dropbox) dengan device apa saja (handphone, tablet, komputer)</li>
<li>penulis bisa lebih fokus pada isi artikel, tidak memusingkan urusan formatting seperti besar kecil huruf, jenis font, penomoran bab, dan hal-hal lain yang bersifat tampilan</li>
</ul>


<p>Aplikasi pandoc bisa digunakan untuk mengkonversi berbagai format file seperti Markdown, Docbook, LaTeX, dan sebagainya menjadi berbagai format seperti PDF, HTML, Open Office, Microsoft Word, dan sebagainya.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Terima kasih Wordpress]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/terima-kasih-wordpress/"/>
    <updated>2012-08-09T13:54:00+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/terima-kasih-wordpress</id>
    <content type="html"><![CDATA[<p>Sejak pertama saya membuat blog, aplikasi yang saya gunakan adalah <a href="http://www.wordpress.org">Wordpress</a>. Aplikasi Wordpress sangat mudah digunakan dan banyak fiturnya. Selain itu, themes gratisan di internet juga berlimpah ruah, sehingga kita bisa ganti tampilan setiap hari kalau mau.</p>

<p>Walaupun demikian, zaman berganti, dan cara kita bekerja juga berubah. Saya saat ini lebih banyak berkutat di pemrograman dengan workflow sebagai berikut :</p>

<ol>
<li>Buka text editor</li>
<li>Edit source code</li>
<li>Jalankan di local dan test</li>
<li>Kalau sudah ok, simpan di version control (commit)</li>
<li>Ulangi ke langkah 2 sampai selesai</li>
<li>Begitu sudah siap untuk sharing hasil pekerjaan, upload (push) perubahan ke version control pusat.</li>
</ol>


<p>Workflow ini sayangnya tidak dapat dilakukan untuk menulis blog. Workflow saya dalam menulis blog biasanya seperti ini:</p>

<ol>
<li>Buka text editor</li>
<li>Ketik dalam format text file biasa, dengan menggunakan HTML tag bila perlu</li>
<li>Simpan di folder Dropbox selama masih draft</li>
<li>Setelah siap dipublish, buka Wordpress di browser</li>
<li>Login ke Wordpress</li>
<li>Create New Post</li>
<li>Copy - Paste dari text editor</li>
<li>Preview dan rapikan lagi</li>
<li>Publish</li>
</ol>


<p>Seperti bisa kita lihat, dengan workflow di atas, praktis fitur-fitur Wordpress yang serba canggih tidak termanfaatkan. Oleh karena itu, sudah tiba saatnya untuk mencari aplikasi blogging yang <strong>lebih sedikit</strong> fiturnya. Biasanya orang mengganti aplikasi dengan yang lebih banyak fiturnya, tapi kali ini saya melakukan hal yang sebaliknya.</p>

<!--more-->


<p>Setelah mencari berbagai alternatif, pilihan jatuh ke <a href="https://github.com/mojombo/jekyll/">Jekyll</a>. Jekyll adalah static content generator. Kita menulis artikel dalam format <a href="http://daringfireball.net/projects/markdown/">Markdown</a>, yaitu text file biasa dengan sedikit markup yang enak dilihat mata. Kalau kita pernah mengedit wiki, format Markdown tidak asing lagi bagi kita.</p>

<p>Cara kerja Jekyll berbeda dengan aplikasi blog atau CMS pada umumnya. Kalau kita menggunakan Wordpress, Joomla, Drupal, dsb, artikel kita akan disimpan di database. Berdasarkan URL atau link yang diklik pengunjung, aplikasi CMS akan mencarikan artikel di database, memproses formattingnya, dan menampilkan ke browser. Aplikasi CMS biasanya kita instal di server kita di internet, sehingga server kita tersebut harus mendukung bahasa pemrograman yang digunakan CMS dan juga harus memiliki database server. Sebagai contoh, untuk menjalankan Wordpress, server kita harus bisa PHP dan memiliki MySQL.</p>

<p>Berbeda dengan Wordpress, Joomla, Drupal, dan CMS pada umumnya, blog yang dibuat dengan Jekyll tidak dynamic. Semua variabel dan logika looping diproses di komputer kita sendiri. Hasil pemrosesan ini menghasilkan file HTML yang sudah jadi. File HTML inilah yang kita upload ke server. Dengan demikian, di dalam server semua file bersifat static.</p>

<p>Ada beberapa konsekuensi dari static website seperti ini.
Sisi positifnya :</p>

<ul>
<li>kebutuhan server menjadi lebih sederhana, tidak perlu lagi PHP dan MySQL</li>
<li>halaman artikel bisa ditampilkan dengan lebih cepat karena tidak perlu query dan pemrosesan</li>
<li>karena tidak ada query dan proses, mau berapapun request per detik tidak terlalu membebani CPU/RAM/Disk</li>
<li>anti dihack, kecuali sistem operasinya yang ditembus. Kalau kita pakai Wordpress dkk, kita harus rajin upgrade untuk menambal bug security yang baru saja difix.</li>
</ul>


<p>Sisi negatifnya :</p>

<ul>
<li>tidak bisa menampung komentar. Ini saya atasi dengan Facebook Comment.</li>
</ul>


<p>Nah, karena positifnya lebih banyak dari negatifnya, maka saya putuskan untuk migrasi.</p>

<p>Saya tidak menggunakan Jekyll yang aslinya, melainkan framework yang dibuat di atas Jekyll. Ada beberapa pilihan, misalnya <a href="http://jekyllbootstrap.com/">Jekyll Bootstrap (JB)</a>, <a href="http://ruhoh.com/">Ruhoh</a>, dan <a href="http://octopress.org">Octopress</a>. Ruhoh rupanya dibuat oleh orang yang sama dengan pembuat JB karena dia sudah bosan dengan JB, dan nampaknya dia juga sedang sibuk sehingga Ruhoh juga tidak dimaintain. Jadilah pilihan jatuh ke Octopress.</p>

<p>Octopress memiliki berbagai fitur, diantaranya:</p>

<ul>
<li>Source code formatting. Ini adalah fitur yang sulit digunakan di Wordpress. Harus instal berbagai plugin dan sering berantakan tampilannya. Ini menyebabkan saya harus menggunakan <a href="http://gist.github.com">Gist</a>.</li>
<li>Deploy script ke Github, Heroku, dan rsync. Dengan fitur ini, saya bisa membuat <a href="http://endymuhardin.github.com">mirror blog saya di Github</a>.</li>
<li>Berbagai plugin yang sudah disertakan secara built in, misalnya tag khusus untuk image dan video.</li>
</ul>


<p>Proses migrasi berjalan sebagai berikut :</p>

<ol>
<li>Setup Octopress</li>
<li>Customize theme</li>
<li>Unduh artikel lama di Wordpress menggunakan <a href="https://github.com/thomasf/exitwp/">exitwp.py</a></li>
<li>Bersihkan beberapa tag yang tidak kompatibel, diantaranya tabel, gist, dan image</li>
<li>Pindahkan artikel ke Octopress</li>
<li>Generate dan deploy</li>
</ol>


<h1>Setup Octopress</h1>

<p>Octopress disiapkan dengan beberapa langkah berikut :</p>

<ol>
<li>Install Ruby dengan RVM</li>
<li>Install Jekyll</li>
<li>Clone repository Octopress</li>
<li>Konfigurasi Octopress</li>
</ol>


<p>Ada beberapa konfigurasi yang saya lakukan, yaitu :</p>

<h2>Informasi Umum</h2>

<p><code>ruby _config.yml
url: http://endy.artivisi.com/blog
title: Living life and make it better
subtitle: life, learn, contribute
author: Endy Muhardin
</code></p>

<h2>Permalink</h2>

<p>Supaya sama dengan URL blog lama, format URL di Octopress juga harus disesuaikan sbb :</p>

<p><code>ruby _config.yml
permalink: /:categories/:title/
</code></p>

<h2>Pagination</h2>

<p>Di halaman pertama cukup tampilkan 3 entri terbaru. Di sidebar, tampilkan 10 link artikel terakhir.</p>

<p><code>ruby _config.yml
paginate: 3
recent_posts: 10
</code></p>

<h1>Customize Theme</h1>

<p>Supaya tidak keliatan seragam, saya mencari theme untuk Octopress. Sejauh ini baru menemukan <a href="https://github.com/amelandri/darkstripes">Darkstripes</a>, jadi langsung saja dipasang.</p>

<h1>Mengolah artikel lama</h1>

<p>Sebetulnya ada beberapa cara untuk memigrasi artikel lama. Saya menggunakan exitwp yang nampaknya lebih mudah. Berikut langkah-langkahnya :</p>

<ol>
<li>Export dulu artikel lama dari Wordpress ke format XML.</li>
<li>Jalankan exitwp.py untuk mengkonversi ke format markdown.</li>
</ol>


<h2>Memproses tag image</h2>

<p>Selanjutnya, saya harus membersihkan tag image dan caption bawaan Wordpress, karena tidak bisa tampil dengan baik. Saya menggunakan perintah sed di linux agar bisa memproses banyak file sekaligus.</p>

<p></p>

<p>Berikut perintah untuk memperbaiki tag image yang tadinya seperti ini <code>![Synergy Screenshot](/images/uploads/2006/05/synergy.gif)</code> menjadi seperti ini <code>{% img /uploads/2006/05/synergy.gif Synergy Screenshot %} </code>, saya gunakan perintah berikut :</p>

<p><code>sh
find . -name "*.markdown" -print | xargs sed -i "s|\[!\[\(.*\)\](\(.*\))\](\(.*\))|{% img \2 \1 %}|g"
</code></p>

<p>Tag caption juga harus dihilangkan, berikut perintahnya:</p>

<p><code>sh
find . -name "*.markdown" -print | xargs sed -i "s|\[caption.*\]\(.*\)\[/caption\]|\1|g"
</code></p>

<p>Secara default, exitwp akan menghasilkan tag image dengan URL lengkap, misalnya <code>http://endy.artivisi.com/blog/wp-content|/images/uploads/2006/05/synergy.gif</code> dan masih mengarah ke Wordpress. Saya ingin mengubah ini menjadi URL relatif, yaitu <code>/images/uploads/2006/05/synergy.gif</code></p>

<p>Berikut perintahnya :</p>

<p><code>sh
find . -name "*.markdown" -print | xargs sed -i "s|http://endy.artivisi.com/blog/wp-content|/images|g"
</code></p>

<h2>Memproses tag gist</h2>

<p>Seperti saya tuliskan di sini, saya menggunakan plugin Wordpress untuk <a href="http://endy.artivisi.com/blog/Aplikasi/menggunakan-gist/">menampilkan Gist</a>. Octopress sudah memiliki dukungan sendiri terhadap Gist, sehingga harus ada proses konversi. Berikut perintahnya :</p>

<p><code>sh
find . -name "*.markdown" -print | xargs sed -i "s|\[gist id=\(.*\) file=\(.*\)\]|{% gist \1 \2 %}|g"
find . -name "*.markdown" -print | xargs sed -i "s| bump=.||g"
</code></p>

<h1>Facebook Comment</h1>

<p>Untuk menggantikan fitur komentar, ada beberapa alternatif yang bisa digunakan, diantaranya :</p>

<ul>
<li>Disqus</li>
<li>Facebook</li>
<li>Tanpa comment</li>
</ul>


<p>Melihat audiens blog yang rata-rata memiliki akun Facebook, maka baiklah kita pilih Facebook saja. Cara mengaktifkannya bisa dibaca <a href="http://blog.grambo.me.uk/blog/2012/02/20/adding-facebook-comments-to-octopress/">di tutorial ini</a>. Ada sedikit bug disana, yaitu pada file <code>post.html</code> dan <code>page.html</code>. Harusnya seperti ini :</p>

<p>``` ruby
{% if site.facebook_appid and page.comments == true %}
  <section></p>

<pre><code>&lt;h1&gt;Comments&lt;/h1&gt;
&lt;div id="facebook_comments" aria-live="polite"&gt;
  {% include post/facebook_comments.html %}
&lt;/div&gt;
</code></pre>

<p>  </section>
{% endif %}
```
</p>

<h1>Penutup</h1>

<p>Sebetulnya sedih juga berpisah dengan Wordpress yang telah setia menemani hampir 7 tahun lamanya, tapi life must go on. Wordpress, terima kasih atas kebersamaan selama 7 tahun ini. Mudah-mudahan engkau akan berevolusi lebih baik lagi sehingga di lain waktu kita bisa bersama lagi.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Instalasi Redmine di Tomcat]]></title>
    <link href="http://software.endy.muhardin.com/aplikasi/redmine-jruby-tomca/"/>
    <updated>2011-08-07T04:06:01+07:00</updated>
    <id>http://software.endy.muhardin.com/aplikasi/redmine-jruby-tomca</id>
    <content type="html"><![CDATA[<p>Ada berbagai cara instalasi Redmine, diantaranya:</p>

<ul>
<li><p>Dijalankan langsung dari command prompt dengan Webrick</p></li>
<li><p>Dijalankan menggunakan Mongrel dan FastCGI</p></li>
<li><p>Dijalankan menggunakan Ruby Enterprise Edition dan Passenger</p></li>
<li><p>Dibuat menjadi war dan dideploy ke application server Java seperti Tomcat, Glassfish, dsb</p></li>
</ul>


<p>Pada artikel ini, kita akan mencoba cara terakhir, yaitu menggunakan Tomcat untuk menghosting Redmine.
Ini saya lakukan supaya semua tools manajemen proyek ArtiVisi bisa disatukan di satu Tomcat, sehingga memudahkan kegiatan maintenance.
Sebelum Redmine, Tomcat ArtiVisi juga menghosting :</p>

<ul>
<li><p><a href="http://nexus.sonatype.org/">Nexus</a></p></li>
<li><p><a href="http://jenkins-ci.org/">Jenkins</a></p></li>
</ul>


<p>Dan nantinya, kalau sudah ada waktu dan kesempatan, juga akan menghosting <a href="http://code.google.com/p/gerrit/">Gerrit</a></p>

<p>Mari kita mulai.</p>

<h2>Instalasi JRuby</h2>

<p>Pertama, kita <a href="http://jruby.org/">Download JRuby</a>. Setelah itu, extract di folder yang diinginkan (contohnya /opt)</p>

<p><div><script src='https://gist.github.com/1129237.js?file=install-jruby.sh'></script>
<noscript><pre><code>cd /opt
tar xzf ~/Downloads/jruby-bin-1.6.3.tar.gz
chown -R endy.endy /opt/jruby-1.6.3
ln -s jruby-1.6.3 jruby</code></pre></noscript></div>
</p>

<p>Daftarkan jruby ke variabel PATH, supaya bisa diakses langsung dari command line.
Tulis baris berikut ini di dalam file ~/.bashrc</p>

<p><div><script src='https://gist.github.com/1129237.js?file=bashrc'></script>
<noscript><pre><code>export JRUBY_HOME=/opt/jruby
export PATH=$PATH:$JRUBY_HOME/bin</code></pre></noscript></div>
</p>

<p>Terakhir, test instalasi JRuby</p>

<p><div><script src='https://gist.github.com/1129237.js?file=test-jruby.sh'></script>
<noscript><pre><code>jruby -v
jruby 1.6.3 (ruby-1.8.7-p330) (2011-07-07 965162f) (Java HotSpot(TM) Client VM 1.6.0_26) [linux-i386-java]</code></pre></noscript></div>
</p>

<h2>Instalasi Paket Gem</h2>

<p>Redmine membutuhkan beberapa library Ruby yang dipaket dalam format gem, yaitu :</p>

<ul>
<li><p>rack versi 1.1.1 : ini adalah library untuk web server</p></li>
<li><p>rails versi 2.3.11 (dibutuhkan karena kita akan menginstal Redmine dari Subversion, bukan dari distribusi)</p></li>
<li><p>jruby-openssl : supaya bisa melayani https</p></li>
<li><p>activerecord-jdbcmysql-adapter : library untuk koneksi database</p></li>
<li><p>warbler : packager supaya Redmine bisa dibuat jadi war dan dideploy ke Tomcat</p></li>
</ul>


<p>Mari kita install</p>

<p><div><script src='https://gist.github.com/1129237.js?file=install-gem.sh'></script>
<noscript><pre><code>gem install rack -v=1.1.1
gem install rails -v=2.3.11
gem install jruby-openssl activerecord-jdbcmysql-adapter warbler</code></pre></noscript></div>
</p>

<p>Semua paket sudah lengkap, mari kita lanjutkan ke</p>

<h2>Mengambil Redmine dari Subversion Repository</h2>

<p>Sebetulnya ada dua pilihan untuk mendapatkan Redmine, download versi rilis atau checkout langsung dari Subversion.
Saya lebih suka checkout langsung supaya nanti lebih gampang upgrade manakala rilis baru sudah terbit.</p>

<p><div><script src='https://gist.github.com/1129237.js?file=checkout-redmine.sh'></script>
<noscript><pre><code>cd ~/Downloads
svn co http://redmine.rubyforge.org/svn/branches/1.2-stable redmine-1.2</code></pre></noscript></div>
</p>

<p>Tunggu sejenak sampai proses checkout selesai. Setelah selesai, kita bisa langsung ke langkah selanjutnya.</p>

<h2>Konfigurasi Database</h2>

<p>Masuk ke folder Redmine, lalu copy file config/database.yml.example ke database.yml, kemudian edit.
Saya menggunakan konfigurasi development sebagai berikut :</p>

<p><div><script src='https://gist.github.com/1129237.js?file=database.yml'></script>
<noscript><pre><code>development:
  adapter: jdbcmysql
  database: redmine
  host: localhost
  username: redmine
  password: redmine
  encoding: utf8</code></pre></noscript></div>
</p>

<p>Tentunya kita harus sediakan database dengan konfigurasi tersebut di MySQL. Login ke MySQL, kemudian buatlah database dan usernya.</p>

<p><div><script src='https://gist.github.com/1129237.js?file=create-database.sh'></script>
<noscript><pre><code>mysql -u root -p

create database redmine character set utf8;
create user 'redmine'@'localhost' identified by 'redmine';
grant all privileges on redmine.* to 'redmine'@'localhost';</code></pre></noscript></div>
</p>

<p>Setelah databasenya selesai dibuat, selanjutnya kita akan melakukan inisialisasi.</p>

<h2>Inisialisasi Redmine</h2>

<p>Pertama, kita inisialisasi dulu session store. Ini digunakan untuk menyimpan cookie dan session variabel.</p>

<p><div><script src='https://gist.github.com/1129237.js?file=inisialisasi-session.sh'></script>
<noscript><pre><code>cd ~/Downloads/redmine-1.2
rake generate_session_store</code></pre></noscript></div>
</p>

<p>Setelah itu, inisialisasi skema database.</p>

<p><div><script src='https://gist.github.com/1129237.js?file=inisialisasi-skema-db.sh'></script>
<noscript><pre><code>RAILS_ENV=development rake db:migrate</code></pre></noscript></div>
</p>

<p>Isi data awal.</p>

<p><div><script src='https://gist.github.com/1129237.js?file=inisialisasi-data-awal.sh'></script>
<noscript><pre><code>RAILS_ENV=development rake redmine:load_default_data</code></pre></noscript></div>
</p>

<p>Setelah terisi, selanjutnya kita bisa test jalankan Redmine.</p>

<p><div><script src='https://gist.github.com/1129237.js?file=start-webrick.sh'></script>
<noscript><pre><code>jruby script/server webrick -e development</code></pre></noscript></div>
</p>

<p>Hasilnya bisa kita browse di http://localhost:3000
Kemudian kita bisa login dengan username admin dan password admin.</p>

<h2>Konfigurasi Email</h2>

<p>Issue tracker yang baik harus bisa mengirim email, supaya dia bisa memberikan notifikasi pada saat ada issue baru ataupun perubahan terhadap issue yang ada.
Redmine versi 1.2 membutuhkan file konfigurasi yang bernama configuration.yml, berada di folder config. Berikut isi file configuration.yml untuk mengirim email ke Gmail.</p>

<p><div><script src='https://gist.github.com/1129237.js?file=configuration.yml'></script>
<noscript><pre><code># = Outgoing email settings
development:
    email_delivery:
        delivery_method: :smtp
        smtp_settings:
            tls: true
            address: &quot;smtp.gmail.com&quot;
            port: 587
            authentication: :plain
            user_name: &quot;nama.kita@gmail.com&quot;
            password: &quot;passwordgmailkita&quot;</code></pre></noscript></div>
</p>

<p>Selain itu, kita juga harus menginstal plugin action_mailer_optional_tls, seperti dijelaskan <a href="http://redmineblog.com/articles/setup-redmine-to-send-email-using-gmail/">di sini</a>.</p>

<p><div><script src='https://gist.github.com/1129237.js?file=install-action-mailer-tls.sh'></script>
<noscript><pre><code>jruby script/plugin install git://github.com/collectiveidea/action_mailer_optional_tls.git
</code></pre></noscript></div>
</p>

<p>Coba restart Redmine, sesuaikan alamat email kita dengan cara klik link My Account di pojok kanan atas.
Di dalamnya ada informasi tentang email. Ganti dengan alamat email kita.
Kemudian pergi ke menu Administration > Settings > Email Notifications,
kemudian klik link Send a test email di pojok kanan bawah.
Tidak lama kemudian, seharusnya test email dari Redmine sudah masuk di mailbox kita.</p>

<p>Dengan demikian, Redmine sudah berhasil kita instal dan konfigurasi dengan baik.
Selanjutnya, kita akan paketkan supaya bisa dideploy di Tomcat.</p>

<h2>Generate WAR</h2>

<p>Pertama, kita harus inisialisasi dulu konfigurasi warble.</p>

<p><div><script src='https://gist.github.com/1129237.js?file=warble-config.sh'></script>
<noscript><pre><code>warble config
</code></pre></noscript></div>
</p>

<p>Dia akan menghasilkan file config/warble.rb. Mari kita edit sehingga menjadi seperti ini.</p>

<p><div><script src='https://gist.github.com/1129237.js?file=warble.rb'></script>
<noscript><pre><code>Warbler::Config.new do |config|
  config.dirs = %w(app config lib log vendor tmp extra files lang)
  config.gems += [&quot;activerecord-jdbcmysql-adapter&quot;, &quot;jruby-openssl&quot;, &quot;i18n&quot;, &quot;rack&quot;]
  config.webxml.rails.env = ENV['RAILS_ENV'] || 'development'
end</code></pre></noscript></div>
</p>

<p>Selanjutnya, kita tinggal menjalankan perintah warble untuk menghasilkan file war.</p>

<p><div><script src='https://gist.github.com/1129237.js?file=warble-generate.sh'></script>
<noscript><pre><code>warble
warning: application directory `lang' does not exist or is not a directory; skipping
rm -f redmine-1.2.war
Creating redmine-1.2.war</code></pre></noscript></div>
</p>

<p>File war yang dihasilkan tinggal kita deploy ke Tomcat</p>

<p><div><script src='https://gist.github.com/1129237.js?file=redmine-war-deploy.sh'></script>
<noscript><pre><code>cp redmine-1.2.war /opt/apache-tomcat-7.0.12/webapps/redmine.war
</code></pre></noscript></div>
</p>

<p>Jalankan Tomcat, dan Redmine bisa diakses di http://localhost:8080/redmine</p>
]]></content>
  </entry>
  
</feed>
