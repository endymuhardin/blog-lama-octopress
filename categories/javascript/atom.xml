<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Living life and make it better]]></title>
  <link href="http://software.endy.muhardin.com/categories/javascript/atom.xml" rel="self"/>
  <link href="http://software.endy.muhardin.com/"/>
  <updated>2014-08-31T00:56:58+07:00</updated>
  <id>http://software.endy.muhardin.com/</id>
  <author>
    <name><![CDATA[Endy Muhardin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript Development Stack]]></title>
    <link href="http://software.endy.muhardin.com/javascript/javascript-development-stack/"/>
    <updated>2014-02-27T21:11:00+07:00</updated>
    <id>http://software.endy.muhardin.com/javascript/javascript-development-stack</id>
    <content type="html"><![CDATA[<p>Pada <a href="http://software.endy.muhardin.com/javascript/persiapan-coding-nodejs/">artikel sebelumnya</a>, kita telah sukses menyiapkan kombinasi framework di sisi server. Nah sekarang kita akan siapkan persenjataan untuk aplikasi clientnya.</p>

<p>Artikel bagian kedua ini berselang waktu agak lama dari artikel sebelumnya karena saya bingung :D
Nah saya yakin kebingungan ini juga akan dialami oleh rekan-rekan yang baru belajar server-side-javascript. Ada beberapa hal yang membuat saya bingung, yaitu:</p>

<ul>
<li>arsitektur aplikasi dan bahasa pemrograman</li>
<li>development tools</li>
<li>integrasi aplikasi pada saat development</li>
<li>integrasi aplikasi pada saat production</li>
</ul>


<p>Sebagai gambaran, bentuk akhir dari aplikasi yang akan dibuat seperti ini</p>

<p><img src="https://lh4.googleusercontent.com/-a6DbvzDCjUA/Uw7xgeieBQI/AAAAAAAAFR0/fIac8wOIBGg/w844-h597-no/mean-stack.png"></p>

<!--more-->


<h2>Arsitektur Aplikasi</h2>

<p>Biasanya kalau kita membuat aplikasi web modern dengan menggunakan AJAX, begini arsitekturnya:</p>

<p><img src="https://lh3.googleusercontent.com/-5tGzUVc2lk4/UwFrrT20hmI/AAAAAAAAFJk/zRxIxumf_O4/w800-h566-no/restful-architecture.png"></p>

<p>Aplikasi akan terbagi menjadi dua bagian (client side dan server side) yang jelas batasannya, yaitu:</p>

<ul>
<li>server side dibuat menggunakan PHP/Java/Ruby/Python/dsb</li>
<li>client side dibuat menggunakan framework JavaScript (AngularJS, EmberJS, jQuery, Dojo, ExtJS, dsb)</li>
</ul>


<p>Kalau kita membuat aplikasi menggunakan NodeJS, maka semuanya dibuat menggunakan bahasa pemrograman JavaScript. Ini bisa membuat kita bingung, mana client side mana server side, karena semuanya JS. Supaya tidak bingung, kita anggap saja NodeJS ini adalah PHP. Dia hanya bisa jalan di server saja, tidak bisa jalan di browser. Dengan cara berpikir seperti ini, skema berikut ini</p>

<p><img src="https://lh3.googleusercontent.com/-rdH4DqYrios/Uw7xQi5JTUI/AAAAAAAAFRk/U1AOrcjH4yM/w522-h216-no/lamp-stack.png"></p>

<p>sama saja dengan ini</p>

<p><img src="https://lh3.googleusercontent.com/-AQfudbu3qXo/Uw7xRPvnQYI/AAAAAAAAFRs/G1pkS6S3uvM/w522-h216-no/mean-stack.png"></p>

<p>Kita juga harus membedakan framework JavaScript client-side seperti:</p>

<ul>
<li><a href="http://angularjs.org/">AngularJS</a></li>
<li><a href="http://emberjs.com">EmberJS</a></li>
<li><a href="http://www.sencha.com/products/extjs">ExtJS</a></li>
<li><a href="http://dojotoolkit.org">Dojo</a></li>
<li>dsb</li>
</ul>


<p>dan framework JavaScript server-side seperti:</p>

<ul>
<li><a href="http://expressjs.com">ExpressJS</a></li>
<li><a href="http://sailsjs.org">SailsJS</a></li>
<li><a href="http://towerjs.org">TowerJS</a></li>
<li><a href="http://locomotivejs.org">Locomotive</a></li>
<li>dsb</li>
</ul>


<p>Setelah jelas mengenai arsitektur, kebingungan selanjutnya adalah masalah tools</p>

<h2>Development Tools</h2>

<p>Urusan tools ini cukup membuat saya pusing beberapa hari, padahal saya sudah ada pengalaman sebelumnya dengan Maven, Jenkins, Subversion, Git, JUnit, dan kawan-kawannya. Di dunia JavaScript ada banyak tools yang digunakan, yaitu:</p>

<ul>
<li><a href="https://www.npmjs.org/">npm</a></li>
<li><a href="http://yeoman.io/">yeoman</a></li>
<li><a href="http://bower.io/">bower</a></li>
<li><a href="http://gruntjs.com/">grunt</a></li>
</ul>


<p>Mari kita bahas satu persatu.</p>

<h3>NPM</h3>

<p>NPM adalah singkatan dari NodeJS Package Manager. Agar lebih mudah dipahami, kita lihat padanannya di platform lain:</p>

<ul>
<li>Ruby : gem</li>
<li>Java : Maven Repository</li>
<li>Ubuntu : apt-get</li>
<li>Python : pip</li>
<li>Android : Play Store</li>
</ul>


<p>Kita menginstal library JavaScript dengan perintah <code>npm install</code>. Instalasi ini ada yang bersifat global di seluruh komputer, ataupun local di masing-masing project. Untuk menginstal secara global, kita membutuhkan hak akses penuh, sehingga harus menggunakan <code>sudo</code> di Ubuntu.</p>

<p>Contohnya, untuk menginstal framework SailsJS, kita jalankan <code>sudo npm install -g sails</code>. Untuk menginstal Yeoman, perintahnya adalah <code>sudo npm install -g yo</code>.</p>

<blockquote><p>Warning: siapkan koneksi internet yang mumpuni pada saat menjalankan <code>npm install</code>.
Dia akan mengunduh paket yang kita minta dari internet berikut semua paket lain yang dibutuhkan.</p></blockquote>

<h3>Yeoman</h3>

<p>Yeoman adalah generator aplikasi. Dia menyediakan template project dengan berbagai kombinasi library. Di Java, padanannya adalah Maven Archetype, Appfuse, atau Spring Roo. Ruby on Rails dan Groovy juga memiliki fitur generator ini.</p>

<p>Contohnya, bila kita ingin membuat aplikasi web dengan AngularJS dan Twitter Bootstrap, kita jalankan perintah berikut:</p>

<p><code>
mkdir aplikasi-saya
cd aplikasi-saya
yo angular
</code></p>

<p>Yeoman akan membuatkan struktur folder dan beberapa contoh file sesuai dengan <em>best practices</em> masing-masing teknologi yang dipilih.</p>

<p>Yeoman bekerja sama dengan dua tools lain, yaitu Bower dan Grunt.</p>

<h3>Bower</h3>

<p>Bower mirip dengan NPM, yaitu bertugas menginstal sesuatu.</p>

<blockquote><p>Waduh, kenapa ada dua tools yang fungsinya sama?</p></blockquote>

<p>Jangan khawatir, banyak orang menanyakan hal yang sama. Diskusinya bisa dibaca di thread SO <a href="http://stackoverflow.com/questions/15092345/javascript-dependency-management-npm-vs-bower-vs-volo">ini</a> dan <a href="http://stackoverflow.com/questions/18641899/difference-between-bower-and-npm">ini</a>. Ada juga <a href="http://tech.pro/tutorial/1190/package-managers-an-introductory-guide-for-the-uninitiated-front-end-developer">penjelasan panjang lebar tentang penggunaan keduanya</a>.</p>

<p>Untuk menyederhanakan masalah, berikut kesimpulan saya</p>

<blockquote><p>NPM digunakan untuk mengelola library javascript sedangkan Bower digunakan untuk mengelola kelengkapan aplikasi web (js, css, png).</p></blockquote>

<h3>Grunt</h3>

<p>Grunt adalah library scripting untuk melakukan build process. Di Java padanannya kira-kira adalah <code>ant</code>. Di Ruby padanannya <code>rake</code>.</p>

<p>Grunt memiliki fitur antara lain:</p>

<ul>
<li>compile/minify/compress kode program JavaScript, baik yang kita tulis sendiri maupun yang dibuat orang lain dan kita gunakan dalam aplikasi kita (seperti jQuery, underscore.js, dsb)</li>
<li>menjalankan test otomatis</li>
<li>menjalankan server process, proxy, dan sejenisnya</li>
</ul>


<h2>Kombinasi Stack</h2>

<p>Nah sekarang setelah peta situasi sudah jelas, tiba saatnya kita memilih framework.</p>

<p>Di sisi client, saya akan tetap menggunakan kombinasi andalan, yaitu AngularJS dan Bootstrap. Bagaimana dengan di sisi server?</p>

<p>Hasil blusukan di Google mengarahkan saya ke framework paling populer di dunia NodeJS, yaitu ExpressJS. Bagi yang suka minimalis, ExpressJS ini sudah cukup. Walaupun demikian, saya ketemu pengembangan dari ExpressJS yang sudah ditambahi segala macam fitur validasi, REST API, scaffolding, dan fitur-fitur lain untuk mempercepat development, yaitu SailsJS. Dia juga sudah dilengkapi dengan ORM untuk berinteraksi dengan database.</p>

<p>Agar tidak berlama-lama, mari kita pilih saja SailsJS untuk keperluan belajar ini. Nanti kalau sudah jadi satu aplikasi, sudah tahu manis-pahitnya SailsJS, baru kita punya patokan untuk mengevaluasi framework kompetitornya.</p>

<h3>Integrasi Client - Server</h3>

<p>Di sisi client ada Yeoman dan di sisi server ada Sails yang juga memiliki fitur generator. Kedua tools ini memiliki persamaan fitur dalam kaitannya dengan proses/workflow development, yaitu:</p>

<ul>
<li>generate template file</li>
<li>kompresi aset (js, css)</li>
<li>menjalankan tes otomatis</li>
<li>embedded web server untuk keperluan testing di local</li>
<li>dependency management untuk add/remove/upgrade library</li>
</ul>


<blockquote><p>Mau pakai yang mana?</p></blockquote>

<p>Untuk menjawab pertanyaan ini, kita harus sedikit <a href="http://sethgodin.typepad.com/seths_blog/2005/03/dont_shave_that.html">yak-shaving</a> dulu melihat bagaimana nantinya aplikasi kita akan dideploy ke lingkungan production. Dari sini, kita akan membuat lingkungan development semirip mungkin. Tentunya walaupun diusahakan mirip, kita ingin proses coding seefisien mungkin supaya siklus feedbacknya cepat.</p>

<p>Ada beberapa tujuan yang ingin saya capai:</p>

<ul>
<li>aplikasi server (SailJS) dan aplikasi client (Yeoman) ingin disimpan dalam satu repository</li>
<li>kedua aplikasi akan dideploy sebagai satu kesatuan pada waktu production. Kedua aplikasi harus berada di satu folder</li>
<li>masing-masing aplikasi harus bisa dikerjakan dan dites secara independen</li>
<li>kita menggunakan tools terbaik untuk masing-masing aplikasi. Artinya, untuk aplikasi client tetap menggunakan Yeoman dan untuk aplikasi server tetap menggunakan SailJS.</li>
</ul>


<p>Blusukan lagi di google, ketemu dua artikel bagus. Yang satu membahas <a href="http://www.slideshare.net/BenLin2/webconf-nodejsproductionarchitecture">deployment production dan tahapan skalabilitas</a> mulai dari aplikasinya dipakai sedikit orang hingga jutaan orang.</p>

<p>Satu lagi membahas tentang <a href="http://www.emmanueloga.com/2013/07/23/Using-AngularJS-with-a-Rails-backend.html">skema workflow selama development</a>. Skema development ini sebetulnya tidak terlalu mirip dengan kombinasi stack yang kita pakai, karena dia menggunakan AngularJS dan Rails sedangkan kita AngularJS dan NodeJS. Walaupun demikian, struktur aplikasinya sama dan skema deploymentnya konsisten dengan yang dijelaskan di artikel pertama.</p>

<p>Berikut adalah arsitektur deployment di lingkungan production yang kita tuju</p>

<p><img src="https://lh5.googleusercontent.com/-45qcTjWcens/Uw8ehKdmLOI/AAAAAAAAFSo/ZQiJqKzeZrk/w734-h550-no/deployment-production.png"></p>

<p>Dan ini adalah skema deployment di laptop masing-masing programmer</p>

<p><img src="https://lh4.googleusercontent.com/-LvEC29ahKfs/Uw8ehH3uMbI/AAAAAAAAFSs/QzxyjTUSWQ8/w386-h550-no/deployment-development.png"></p>

<blockquote><p>Cukup mirip kan?</p></blockquote>

<p>Segala riset dan artikel di atas menghasilkan kesimpulan berikut:</p>

<ul>
<li>struktur folder project</li>
<li>strategi integrasi</li>
<li>deployment baik di development maupun production.</li>
</ul>


<p>Berikut adalah kesimpulan saya untuk struktur folder project:</p>

<ul>
<li>aplikasi akan terdiri dari dua folder : xxx-server (berisi SailsJS) dan xxx-client (berisi AngularJS dkk dimanage dengan Yeoman)</li>
<li>untuk keperluan test di laptop, aplikasi client akan dijalankan terpisah dengan server. Aplikasi client dijalankan dengan perintah <code>grunt serve</code> dan akan standby di port <code>9000</code>. Aplikasi server dijalankan menggunakan perintah <code>sails lift</code> dan standby di port <code>1337</code>. Dengan ini, aplikasi client dan server bisa dikerjakan dan dites secara terpisah</li>
<li>pada saat dibutuhkan integration test (client dan server sudah terhubung), kita konfigurasi Grunt agar request ke url <code>/api/*</code> diteruskan ke SailsJS di port <code>1337</code></li>
<li>pada proses build aplikasi client, arahkan hasil build ke folder xxx-server/static</li>
</ul>


<h2>Menyiapkan Aplikasi</h2>

<p>Ada satu prinsip yang saya pegang dalam dunia pemrograman,</p>

<blockquote><p>Jangan mulai coding sebelum jelas apa yang mau dibuat.</p></blockquote>

<p>Itulah sebabnya saya menghabiskan waktu puluhan jam mencari artikel di Google, membacanya satu persatu, menonton video tutorial dari Youtube, dan mencoba coding sedikit-sedikit agar mendapatkan gambaran. Semua usaha tersebut dilakukan untuk mencari tahu bagaimana best-practices dalam membuat aplikasi. Setelah jelas apa yang kita ingin capai dan strategi untuk tiba di tujuan, barulah kita mulai coding.</p>

<p>Apa yang kita bahas pada bagian ini adalah hal yang mudah. Bagian sulitnya ada di penjelasan arsitektur aplikasi di atas. Tidak percaya? Mari kita mulai.</p>

<h3>Aplikasi Server</h3>

<p>Kita mulai dari aplikasi server dulu. Langkah-langkahnya sebagai berikut:</p>

<ul>
<li>instalasi framework SailsJS</li>
<li>buat folder aplikasi-membership-server</li>
<li>generate struktur aplikasi menggunakan fitur SailsJS</li>
</ul>


<p>Kita mulai dengan instalasi SailsJS. Ini dilakukan sekali saja dalam satu komputer. Untuk aplikasi kedua dan seterusnya, kita tidak perlu lagi menginstal SailsJS</p>

<p><code>
sudo npm install -g sails
</code></p>

<p>NPM akan mengunduh segala macam paket yang dibutuhkan dari internet. Siapkan koneksi internet yang mumpuni. Setelah selesai, kita bisa membuat project baru.</p>

<p><code>
sails new aplikasi-membership-server
cd aplikasi-membership-server
sails lift
</code></p>

<p>Berikut outputnya</p>

<p><code>``
sails lift
info:
info:
info:    Sails.js           &lt;|
info:    v0.9.9              |\
info:                       /|.\
info:                      / || \
info:                    ,'  |'  \
info:                 .-'.-==|/_--'
info:                </code>--'-------'
info:    <strong>---</strong><em>--</em><strong>---</strong><em>--</em><strong>---</strong><em>--</em><strong>
info:  </strong><strong>---</strong><em>--</em><strong>---</strong><em>--</em><strong>---</strong><em>--</em><strong>-</strong>
info:
info: Server lifted in <code>aplikasi-membership-server</code>
info: To see your app, visit http://localhost:1337
info: To shut down Sails, press <CTRL> + C at any time.</p>

<p>debug: --------------------------------------------------------
debug: :: Thu Feb 27 2014 19:06:32 GMT+0700 (WIB)
debug:
debug: Environment  : development
debug: Port     : 1337
debug: --------------------------------------------------------
```</p>

<p>Kita bisa browse ke <code>http://localhost:1337</code></p>

<p><img src="https://lh6.googleusercontent.com/-lQ4xghosjJY/Uw9HAoW29FI/AAAAAAAAFTY/bitPnyw7nBk/w909-h573-no/01-test-sails-ok.png"></p>

<p>Selesai sudah pembuatan aplikasi server. Mudah bukan?</p>

<p>Kita bisa lihat isi folder <code>aplikasi-membership-server</code>, di sana sudah banyak file dan folder yang dibuatkan oleh SailsJS. Apa fungsi dan kegunaan masing-masingnya akan kita bahas di artikel terpisah.</p>

<p>Sekarang kita lanjutkan dengan aplikasi client.</p>

<h3>Aplikasi Client</h3>

<p>Kita akan gunakan Yeoman untuk membuatkan aplikasi client. Karena kita ingin menggunakan AngularJS dan Bootstrap, kita instal dulu generator yang sesuai. Sama seperti SailsJS, instalasi ini cukup sekali saja dalam satu komputer.</p>

<p><code>
sudo npm install -g generator-angular
</code></p>

<p>Berikutnya, kita buat foldernya dan generate struktur project AngularJS dan Bootstrap</p>

<p>```
mkdir aplikasi-membership-ui
cd aplikasi-membership-ui
yo angular</p>

<pre><code> _-----_
|       |
|--(o)--|   .--------------------------.
</code></pre>

<p>   `---------´  |    Welcome to Yeoman,    |</p>

<pre><code>( _´U`_ )   |   ladies and gentlemen!  |
/___A___\   '__________________________'
 |  ~  |
</code></pre>

<p>   <strong>'.</strong>_.'__
 ´   <code> |° ´ Y</code></p>

<p>Out of the box I include Bootstrap and some AngularJS recommended modules.</p>

<p>[?] Would you like to use Sass (with Compass)? No
[?] Would you like to include Twitter Bootstrap? Yes
[?] Which modules would you like to include? (Press <space> to select)
‣⬢ angular-resource.js
 ⬢ angular-cookies.js
 ⬢ angular-sanitize.js
 ⬢ angular-route.js
```</p>

<p>Yeoman akan menanyakan apakah kita ingin menggunakan Sass dan Bootstrap. Saya tidak ingin menggunakan Sass, karena dia mengharuskan kita untuk menginstal Ruby on Rails. Nah, Ruby on Rails ini <em>yak shaving</em> lagi, jadi tidak usah saja.</p>

<p>Kita juga akan disodori pilihan modul angular mana yang ingin dipakai. Saya pilih saja semuanya. Tekan Enter, dan Yeoman akan mengunduh segala macam hal dari internet. Pastikan koneksi internet Anda memadai.</p>

<p>Setelah selesai, kita bisa coba menjalankan Grunt server</p>

<p>```
grunt serve
Running "serve" task</p>

<p>Running "clean:server" (clean) task
Cleaning .tmp...OK</p>

<p>Running "bower-install:app" (bower-install) task</p>

<p>Running "concurrent:server" (concurrent) task</p>

<pre><code>Running "copy:styles" (copy) task
Copied 1 files

Done, without errors.


Execution Time (2014-02-27 12:14:54 UTC)
loading tasks  4ms  ▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 29%
copy:styles    9ms  ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 64%
Total 14ms
</code></pre>

<p>Running "autoprefixer:dist" (autoprefixer) task
Prefixed file ".tmp/styles/main.css" created.</p>

<p>Running "connect:livereload" (connect) task
Started connect web server on 127.0.0.1:9000.</p>

<p>Running "watch" task
Waiting...
```</p>

<p>Browser akan terbuka dan mengarah ke <code>http://127.0.0.1:9000</code>. Ini merupakan fitur LiveReload dari Grunt. Semua perubahan yang kita buat di source code akan langsung tampil di browser tanpa perlu refresh ataupun restart.</p>

<p><img src="https://lh3.googleusercontent.com/-BIe-5q4gFYA/Uw9HAoUTHAI/AAAAAAAAFTc/wRPt39Kk9Bs/w909-h573-no/02-test-grunt-ok.png"></p>

<p>Untuk mematikannya, gunakan Ctrl-C</p>

<p>```
^C</p>

<p>Execution Time (2014-02-27 12:14:52 UTC)
concurrent:server   1.7s  ▇▇▇ 5%
watch              33.2s  ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 95%
Total 35s
```</p>

<p>Selesai sudah template aplikasi client. Selanjutnya tinggal rapi-rapi sedikit.</p>

<h3>Integrasi Client - Server</h3>

<p>Sekarang kita sudah punya dua folder dalam project:</p>

<ul>
<li>aplikasi-membership-server</li>
<li>aplikasi-membership-client</li>
</ul>


<p>Masing-masing aplikasi memiliki <code>.gitignore</code> sendiri. Sebaiknya kita gabungkan menjadi satu. Buat file <code>.gitignore</code> sejajar dengan kedua folder tersebut. Copy-paste isi dari file <code>.gitignore</code> di folder client dan server. Hapus yang duplikat, dan perbaiki referensi lokasi absolut.</p>

<p>Berikutnya, kita arahkan hasil kompilasi project client ke dalam folder <code>static</code> dalam project server, supaya seisi project server bisa langsung dideploy ke production. Ini kita lakukan dengan cara mengedit konfigurasi Yeoman dalam <code>Gruntfile.js</code>, yang awalnya seperti ini</p>

<p>```
yeoman: {</p>

<pre><code>// configurable paths
app: require('./bower.json').appPath || 'app',
dist: 'dist'
</code></pre>

<p>},
```</p>

<p>menjadi seperti ini</p>

<p>```
yeoman: {</p>

<pre><code>// configurable paths
app: require('./bower.json').appPath || 'app',
dist: '../aplikasi-membership-server/static'
</code></pre>

<p>},
```</p>

<p>Jangan lupa menambahkan</p>

<p><code>
aplikasi-membership-server/static
</code></p>

<p>dalam <code>.gitignore</code>, agar hasil kompilasi tidak ikut dicommit ke repository Git.</p>

<p>Kita bisa mengetes hasil kompilasi Grunt. Harusnya dia akan membuat folder static dalam aplikasi server. Jalankan perintah berikut dalam folder aplikasi client</p>

<p><code>
CHROME_BIN=chromium-browser grunt
</code></p>

<p>Dia akan melakukan kompilasi, menjalankan test, kompresi js dan css, kemudian menaruh hasilnya di folder tujuan. Selama test dijalankan, kita akan melihat ada window Chrome yang terbuka dan kemudian tertutup lagi. Bila kita tidak ingin tesnya menggunakan browser betulan, kita bisa pakai <code>PhantomJS</code> untuk menjalankan semua kode HTML dan JavaScript tanpa browser.</p>

<p>PhantomJS bisa diaktifkan dalam file konfigurasi <code>karma.conf.js</code>. Edit baris berikut</p>

<p><code>js
// Start these browsers, currently available:
// - Chrome
// - ChromeCanary
// - Firefox
// - Opera
// - Safari (only Mac)
// - PhantomJS
// - IE (only Windows)
browsers: ['Chrome'],
</code></p>

<p>Menjadi seperti ini</p>

<p><code>
// Start these browsers, currently available:
// - Chrome
// - ChromeCanary
// - Firefox
// - Opera
// - Safari (only Mac)
// - PhantomJS
// - IE (only Windows)
browsers: ['PhantomJS'],
</code></p>

<p>Bila PhantomJS belum ada, instal dulu menggunakan perintah <code>sudo npm install -g phantomjs</code>.</p>

<p>Setelah rangkaian kegiatan yang dilakukan Grunt selesai, pastikan hasilnya ada dalam aplikasi server</p>

<p><img src="https://lh3.googleusercontent.com/-kZ4ijjT4TAk/Uw9HB0thj3I/AAAAAAAAFTk/aKJJLsMglMk/w609-h597-no/04-test-compile-ok.png"></p>

<p>Terakhir, kita aktifkan proxy agar url <code>api/*</code> yang mengarah ke server Grunt diteruskan ke SailsJS di port <code>1337</code>.  Proxy ini membutuhkan tambahan package <code>grunt-connect-proxy</code>. Install menggunakan <code>npm</code> dalam aplikasi client</p>

<p><code>
cd aplikasi-membership-client
npm install grunt-connect-proxy --save-dev
</code></p>

<p>Perintah di atas akan mengunduh package <code>grunt-connect-proxy</code> dari internet dan menambahkan dependensinya ke <code>package.json</code>.</p>

<p>Selanjutnya kita edit file <code>Gruntfile.js</code>. Ada beberapa bagian yang harus kita ubah:</p>

<ul>
<li><p>aktifasi modul <code>grunt-connect-proxy</code>. Tambahkan baris berikut di bawah <code>use strict</code></p>

<p><code>
var proxySnippet = require('grunt-connect-proxy/lib/utils').proxyRequest;
</code></p></li>
<li><p>konfigurasi URL yang akan diproxy. Lokasinya di dalam blok <code>connect</code> sejajar dengan blok <code>options</code>.</p></li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Konfigurasi URL  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">options</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">port</span><span class="o">:</span> <span class="mi">9000</span><span class="p">,</span>
</span><span class='line'><span class="c1">// Change this to &#39;0.0.0.0&#39; to access the server from outside.</span>
</span><span class='line'><span class="nx">hostname</span><span class="o">:</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span>
</span><span class='line'><span class="nx">livereload</span><span class="o">:</span> <span class="mi">35729</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">},</span>
</span><span class='line'><span class="nx">proxies</span><span class="o">:</span> <span class="p">[</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">{</span>
</span><span class='line'>    <span class="nx">context</span><span class="o">:</span> <span class="s1">&#39;/api&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">host</span><span class="o">:</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">port</span><span class="o">:</span> <span class="mi">1337</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">],</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>Aktivasi proxy dalam <code>middleware</code></li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Konfigurasi Middleware  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">livereload</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">options</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">open</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'><span class="nx">base</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>  <span class="s1">&#39;.tmp&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;&amp;lt;%= yeoman.app %&amp;gt;&#39;</span>
</span><span class='line'><span class="p">],</span>
</span><span class='line'><span class="nx">middleware</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">connect</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span>
</span><span class='line'>    <span class="nx">proxySnippet</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">connect</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">).</span><span class="nx">resolve</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>Panggil konfigurasi proxy pada saat server Grunt dijalankan</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Aktivasi pada saat run </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">task</span><span class="p">.</span><span class="nx">run</span><span class="p">([</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>  <span class="s1">&#39;clean:server&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;bower-install&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;configureProxies&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;concurrent:server&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;autoprefixer&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;connect:livereload&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;watch&#39;</span>
</span><span class='line'><span class="p">]);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Sekarang kita tes konfigurasi proxy dengan cara browse ke <code>http://localhost:9000/api</code>. Request ini akan diterima server Grunt dan akan diteruskan ke server Sails. Jadi harusnya request ini akan dilayani oleh Sails.</p>

<p><img src="https://lh4.googleusercontent.com/-h-d7K0XO2x8/Uw9HAo4Ey4I/AAAAAAAAFTU/VRgJIDvUqxM/w909-h573-no/03-test-proxy-ok.png"></p>

<p>Tampak pesan error disana. Tidak apa-apa, kita akan perbaiki nanti. Yang penting sudah jelas bahwa request tersebut dilayani oleh Sails, bukan oleh Grunt.</p>

<p>Untuk lebih jelas mengenai skema proxy ini, silahkan baca <a href="http://rockyj.in/2013/10/24/angular_rails.html">penjelasan om Rocky Jaiswal</a></p>

<h2>Kesimpulan</h2>

<p>Wow, cukup panjang dan melelahkan juga ya. Beberapa poin kesimpulan:</p>

<ul>
<li><p>teknologi yang kita gunakan dibagi dua: sisi client dan sisi server</p></li>
<li><p>library di sisi client:</p>

<ul>
<li>AngularJS</li>
<li>Twitter Bootstrap</li>
</ul>
</li>
<li><p>tools untuk membuat aplikasi client:</p>

<ul>
<li>yeoman</li>
<li>bower</li>
<li>grunt</li>
</ul>
</li>
<li><p>library di sisi server:</p>

<ul>
<li>sails</li>
<li>redis dan hiredis</li>
</ul>
</li>
<li><p>tools untuk membuat aplikasi server:</p>

<ul>
<li>sails</li>
<li>foreman (untuk mengetes deployment ke heroku)</li>
<li>heroku</li>
</ul>
</li>
<li><p>untuk menghubungkan aplikasi client dan server di development : <a href="http://fettblog.eu/blog/2013/09/20/using-grunt-connect-proxy/">pasang proxy di Grunt server</a></p></li>
<li>untuk menghubungkan aplikasi client dan server di production : gunakan konfigurasi <code>proxy_pass</code> yang ada di Nginx</li>
<li>untuk menggabungkan deployment client dan server : arahkan hasil kompilasi Grunt ke folder <code>static</code> dalam aplikasi server</li>
</ul>


<p>Beberapa link tutorial untuk deployment berskala production</p>

<ul>
<li><a href="http://blog.argteam.com/coding/hardening-node-js-for-production-part-2-using-nginx-to-avoid-node-js-load/">Konfigurasi Nginx: proxy, SSL, cache, gzip</a></li>
<li><a href="http://blog.dealspotapp.com/post/40184153657/node-js-production-deployment-with-nginx-varnish">Deployment Nginx, Varnish, Upstart, dan Monit</a></li>
<li><a href="http://www.devopsdiary.com/blog/2013/05/16/deploying-node-dot-js-plus-nginx-plus-upstart-plus-monit-on-ec2-with-puppet-and-vagrant/">Deployment Nginx, Upstart, Monit, Redis di Amazon EC2 dengan Puppet dan Vagrant</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Persiapan Coding NodeJS]]></title>
    <link href="http://software.endy.muhardin.com/javascript/persiapan-coding-nodejs/"/>
    <updated>2014-02-21T15:43:00+07:00</updated>
    <id>http://software.endy.muhardin.com/javascript/persiapan-coding-nodejs</id>
    <content type="html"><![CDATA[<p>Menyambung dari pengantar di <a href="http://software.endy.muhardin.com/life/ongoing-learning/">artikel sebelumnya</a>, kali ini kita akan mempersiapkan development environment untuk membuat aplikasi dengan NodeJS dan Redis. Kita juga akan mendeploy aplikasi kita di Heroku agar bisa diakses masyarakat umum.</p>

<!--more-->


<h2>Instalasi</h2>

<h3>Node JS</h3>

<p>NodeJS adalah yang pertama kita install karena dia memiliki Node Package Manager (NPM) yang nantinya akan digunakan oleh framework/library lainnya.</p>

<p>Cara instalasi termudah di Ubuntu adalah dengan menambahkan <a href="https://launchpad.net/~chris-lea/+archive/node.js">PPA (Personal Package Archive) NodeJS milik Chris Lea</a>. Jalankan perintah berikut di command line</p>

<p><code>
sudo add-apt-repository ppa:chris-lea/node.js
sudo apt-get update
sudo apt-get install nodejs
</code></p>

<h3>Heroku</h3>

<p><a href="http://www.heroku.com/">Heroku</a> adalah penyedia layanan cloud untuk menjalankan aplikasi. Generasi jadul seperti saya menyebutnya perusahaan hosting ;) Heroku menyediakan hosting gratis untuk aplikasi kecil yang bisa kita gunakan untuk bermain-main dengan teknologinya. Silahkan <a href="https://id.heroku.com/signup/devcenter">daftar dulu</a>, kemudian <a href="https://toolbelt.heroku.com/">unduh aplikasi clientnya</a>.</p>

<p>Setelah terinstal, kita harus melakukan login menggunakan aplikasi client agar bisa membuat dan mendeploy aplikasi. Kita juga akan diminta untuk mengatur SSH key yang akan digunakan untuk otentikasi dengan Heroku. Bila Anda belum paham apa itu SSH key dan bagaimana cara membuatnya, silahkan baca dulu <a href="http://software.endy.muhardin.com/linux/login-ssh-dengan-private-key/">artikel ini</a>.</p>

<h3>Redis</h3>

<p>Sama seperti instalasi NodeJS, untuk menginstal Redis kita perlu menambahkan PPA dulu. Berikut perintahnya.</p>

<p><code>
sudo add-apt-repository ppa:rwky/redis
sudo apt-get update
sudo apt-get install redis-server
</code></p>

<h3>Library Lain</h3>

<p>Nantinya kita akan menggunakan library lain seperti misalnya:</p>

<ul>
<li>ExpressJS</li>
<li>Yeoman</li>
<li>dsb</li>
</ul>


<p>Tapi untuk sementara ini kita belum membutuhkannya. Jadi petunjuk instalasinya akan kita bahas nanti pada waktu diperlukan.</p>

<h2>Hello World</h2>

<p>Mengikuti tradisi yang telah diwariskan turun temurun oleh leluhur kita, langkah pertama dalam mempelajari suatu bahasa pemrograman adalah menampilkan tulisan <code>Hello World</code>.</p>

<h3>Clone Repository</h3>

<p>Kita clone dulu repository yang telah kita buat di artikel sebelumnya.</p>

<p><code>
git clone git@github.com:endymuhardin/aplikasi-membership.git
</code></p>

<h3>Inisialisasi Aplikasi NodeJS</h3>

<p>Setelah itu, masuk ke foldernya dan lakukan inisialisasi project NodeJS dengan perintah <code>npm init</code>. Perintah ini akan menghasilkan file <code>package.json</code> yang merupakan deskripsi mengenai aplikasi yang akan kita buat. Bagi yang mempunyai latar belakang Maven, <code>package.json</code> ini kira-kira mirip dengan <code>pom.xml</code>.</p>

<p><code>
cd aplikasi-membership
npm init
</code></p>

<p>Berikut output dari perintah <code>npm init</code>. Kita akan ditanya-tanyai mengenai informasi aplikasi yang kita buat.</p>

<p>```
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sane defaults.</p>

<p>See <code>npm help json</code> for definitive documentation on these fields
and exactly what they do.</p>

<p>Use <code>npm install &lt;pkg&gt; --save</code> afterwards to install a package and
save it as a dependency in the package.json file.</p>

<p>Press ^C at any time to quit.
name: (aplikasi-membership)
version: (0.0.0)
description: Aplikasi Membership
entry point: (index.js)
test command:
git repository: (git://github.com/endymuhardin/aplikasi-membership.git)
keywords:
author: Endy Muhardin
license: (ISC) GPL-3.0
About to write to /home/endy/workspace/git-clones/aplikasi-membership/package.json:</p>

<p>{
  "name": "aplikasi-membership",
  "version": "0.0.0",
  "description": "Aplikasi Membership",
  "main": "index.js",
  "scripts": {</p>

<pre><code>"test": "echo \"Error: no test specified\" &amp;&amp; exit 1"
</code></pre>

<p>  },
  "repository": {</p>

<pre><code>"type": "git",
"url": "git://github.com/endymuhardin/aplikasi-membership.git"
</code></pre>

<p>  },
  "author": "Endy Muhardin",
  "license": "GPL-3.0",
  "bugs": {</p>

<pre><code>"url": "https://github.com/endymuhardin/aplikasi-membership/issues"
</code></pre>

<p>  },
  "homepage": "https://github.com/endymuhardin/aplikasi-membership"
}</p>

<p>Is this ok? (yes) yes
```</p>

<p>Selanjutnya, kita akan memiliki file <a href="https://github.com/endymuhardin/aplikasi-membership/blob/master/package.json"><code>package.json</code></a> dalam folder aplikasi kita.</p>

<h3>Menjalankan Aplikasi</h3>

<p>Dalam file <code>package.json</code> dinyatakan bahwa aplikasi kita bisa dijalankan dengan mengeksekusi file <code>index.js</code>. Mari kita buat file tersebut</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>index.js</span><a href='https://github.com/endymuhardin/aplikasi-membership/blob/master/index.js'>Lihat di Github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;http&quot;</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">port</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">5000</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">){</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;Content-Type&quot;</span><span class="o">:</span> <span class="s2">&quot;text/plain&quot;</span><span class="p">});</span>
</span><span class='line'><span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&quot;Hello World&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;App ready at port &quot;</span><span class="o">+</span><span class="nx">port</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>File <code>index.js</code> bisa kita jalankan dari command line</p>

<p><code>
node index.js
</code></p>

<p>Kita bisa lihat aplikasinya di browser dengan mengakses <code>http://localhost:5000</code>.</p>

<p><img src="https://lh3.googleusercontent.com/-zh_cAl6EUkk/UwXFnVvVpiI/AAAAAAAAFMY/NH8Z8kdekhY/w704-h465-no/01-hello-nodejs.png"></p>

<h2>Deployment ke Heroku</h2>

<p>Untuk bisa dideploy ke Heroku, kita harus membuat file konfigurasi yang bernama <code>Procfile</code>. Berikut isinya</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Procfile</span><a href='https://github.com/endymuhardin/aplikasi-membership/blob/master/Procfile'>Lihat di Github </a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>web: node index.js</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Artinya:</p>

<ul>
<li>Aplikasi kita adalah aplikasi web</li>
<li>jenis aplikasi webnya adalah NodeJS. Jenis aplikasi ini bisa bermacam-macam, misalnya Java, Python, dsb</li>
<li>File yang harus dijalankan NodeJS adalah <code>index.js</code></li>
</ul>


<p>Kita bisa tes konfigurasi tersebut dengan menggunakan aplikasi client Heroku yang bernama <code>foreman</code>. Jalankan perintah berikut di command line.</p>

<p><code>
foreman start
</code></p>

<p>Berikut outputnya</p>

<p><code>
14:41:18 web.1  | started with pid 17022
14:41:18 web.1  | App ready at port 5000
</code>
Sama seperti perintah <code>node index.js</code>, hasilnya bisa kita lihat menggunakan browser dengan mengakses <code>http://localhost:5000</code>.
Untuk mematikannya, tekan <code>Ctrl-C</code></p>

<p><code>
^CSIGINT received
14:41:46 system | sending SIGTERM to all processes
14:41:46 web.1  | terminated by SIGTERM
</code></p>

<p>Selanjutnya, kita inisialisasi aplikasi kita di Heroku.</p>

<p><code>
heroku apps:create ysq
</code></p>

<p>Perintah ini akan membuat aplikasi bernama <code>ysq</code> di server Heroku. Dia juga akan menambahkan remote-url git agar kita bisa melakukan deployment. Berikut output dari perintah di atas</p>

<p><code>
Creating ysq... done, stack is cedar
http://ysq.herokuapp.com/ | git@heroku.com:ysq.git
Git remote heroku added
</code></p>

<p>Untuk mendeploy ke Heroku, cukup dengan melakukan <code>git push</code>.</p>

<p><code>
git push heroku master
</code></p>

<p>Berikut outputnya</p>

<p>```
Initializing repository, done.
Counting objects: 16, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (15/15), done.
Writing objects: 100% (16/16), 2.10 KiB | 0 bytes/s, done.
Total 16 (delta 3), reused 4 (delta 0)</p>

<p>-----> Node.js app detected</p>

<pre><code>   PRO TIP: Specify a node version in package.json
   See https://devcenter.heroku.com/articles/nodejs-support
</code></pre>

<p>-----> Defaulting to latest stable node: 0.10.26
-----> Downloading and installing node
-----> Installing dependencies
-----> Cleaning up node-gyp and npm artifacts
-----> Building runtime environment
-----> Discovering process types</p>

<pre><code>   Procfile declares types -&gt; web
</code></pre>

<p>-----> Compressing... done, 5.1MB
-----> Launching... done, v3</p>

<pre><code>   http://ysq.herokuapp.com deployed to Heroku
</code></pre>

<p>To git@heroku.com:ysq.git
 * [new branch]      master -> master
```</p>

<p>Kita bisa browse aplikasi tersebut di alamat <code>http://ysq.herokuapp.com</code> seperti ini</p>

<p><img src="https://lh5.googleusercontent.com/-dTD4Lcoj2jY/UwXFnlTeAVI/AAAAAAAAFMc/qUlNM_zCBvc/w704-h465-no/02-heroku-deployment.png"></p>

<h2>Vertical Slice</h2>

<p>Vertical Slice adalah potongan aplikasi yang sudah tersambung end-to-end. Maksudnya adalah sebagian kecil aplikasi mulai dari tampilan yang dilihat user hingga ke penyimpanan data di database sudah tersambung dengan baik. Saya biasanya membuat vertical slice untuk menguji apakah kombinasi framework/library yang digunakan sudah terintegrasi dengan benar. Untuk itu, kita akan membuat kode program sederhana untuk menyimpan dan mengambil data dari NodeJS ke Redis. Kita juga akan tes apakah integrasi tersebut juga berjalan lancar di Heroku.</p>

<h3>Verifikasi Instalasi Redis</h3>

<p>Setelah sukses dengan <code>Hello World</code> tampilan, kita juga harus membuat <code>Hello World</code> untuk akses ke database Redis. Sebelum mulai, kita tes dulu instalasi Redis kita apakah dia sudah berjalan lancar dengan menggunakan perintah <code>redis-cli ping</code>. Kalau instalasinya benar, dia akan menjawab</p>

<p><code>
PONG
</code></p>

<p>Selanjutnya, kita masuk ke command line redis, menyimpan variabel bernama email, kemudian menampilkan isi variabel tersebut.</p>

<p><code>
$ redis-cli
127.0.0.1:6379&gt; set email endy.muhardin@gmail.com
OK
127.0.0.1:6379&gt; get email
"endy.muhardin@gmail.com"
</code></p>

<h3>Simpan data di Redis dari NodeJS</h3>

<p>Kita akan memodifikasi <code>index.js</code> agar menyimpan dan mengambil data dari Redis. Berikut source codenya</p>

<p>```js
var redis = require("redis").createClient();</p>

<p>var displayContent = function(){</p>

<pre><code>redis.get("nama", function(err, reply){
    console.log("Nama : "+reply);
    redis.expire("nama", 1);    
});

redis.get("email", function(err, reply){
    console.log("Email : "+reply);
    redis.expire("email", 1);    
});
</code></pre>

<p>};</p>

<p>redis.on("connect", function(){</p>

<pre><code>redis.set("nama", "Endy Muhardin");
redis.set("email", "endy.muhardin@gmail.com");
displayContent();
</code></pre>

<p>});
```</p>

<p>Kalau langsung kita jalankan, maka kita akan mendapat error berikut</p>

<p>```
Error: Cannot find module 'redis'</p>

<pre><code>at Function.Module._resolveFilename (module.js:338:15)
at Function.Module._load (module.js:280:25)
at Module.require (module.js:364:17)
at require (module.js:380:17)
at Object.&lt;anonymous&gt; (/home/endy/workspace/git-clones/aplikasi-membership/index.js:13:13)
at Module._compile (module.js:456:26)
at Object.Module._extensions..js (module.js:474:10)
at Module.load (module.js:356:32)
at Function.Module._load (module.js:312:12)
at Function.Module.runMain (module.js:497:10)
</code></pre>

<p>exited with code 8
16:33:26 system | sending SIGTERM to all processes
```</p>

<p>Untuk mengatasi error tersebut, kita membutuhkan library <a href="https://github.com/mranney/node_redis">node_redis</a> untuk menghubungkan NodeJS dengan Redis. Install dulu menggunakan NPM dengan cara menjalankan perintah berikut dalam folder aplikasi.</p>

<p><code>
npm install redis --save
</code></p>

<p>Kita gunakan opsi <code>--save</code> agar instalasi tersebut terdaftar di <code>package.json</code>.</p>

<p>Di website asalnya ada petunjuk mengenai penggunaan <code>hiredis</code>, yaitu binding terhadap library C untuk meningkatkan performance. Karena belum paham apa manfaat dan konsekuensinya, dan juga supaya tutorialnya lebih sederhana, kita tidak akan gunakan <code>hiredis</code>.</p>

<p>Berikut output dari perintah di atas</p>

<p><code>
npm http GET https://registry.npmjs.org/redis
npm http 200 https://registry.npmjs.org/redis
npm http GET https://registry.npmjs.org/redis/-/redis-0.10.1.tgz
npm http 200 https://registry.npmjs.org/redis/-/redis-0.10.1.tgz
redis@0.10.1 node_modules/redis
</code></p>

<p>Setelah itu, kita bisa tes menggunakan <code>foreman</code></p>

<p><code>
foreman start
16:48:37 web.1  | started with pid 19028
16:48:37 web.1  | App ready at port 5000
16:48:37 web.1  | Nama : Endy Muhardin
16:48:37 web.1  | Email : endy.muhardin@gmail.com
^CSIGINT received
16:48:39 system | sending SIGTERM to all processes
16:48:39 web.1  | terminated by SIGTERM
</code></p>

<h3>Menggunakan Redis di Heroku</h3>

<p>Agar bisa digunakan di Heroku, kita harus menginstal dependensi tambahan, yaitu <code>redis-url</code>.</p>

<p><code>
npm install redis-url --save
</code></p>

<p>Ada sedikit perubahan pada metode koneksi database Redis agar menggunakan database yang ada di Heroku.</p>

<p>Edit baris ini
<code>js
var redis = require("redis").createClient();
</code>
menjadi seperti ini
```js
if (process.env.REDISTOGO_URL) {</p>

<pre><code>var rtg   = require("url").parse(process.env.REDISTOGO_URL);
var redis = require("redis").createClient(rtg.port, rtg.hostname);
redis.client.auth(rtg.auth.split(":")[1]);
</code></pre>

<p>} else {</p>

<pre><code>var redis = require("redis").createClient();
</code></pre>

<p>}
```</p>

<p>Di sisi heroku, kita harus terlebih dulu menginstal database Redis. Kita bisa gunakan add-ons <code>Redis To Go</code> yang gratisan.</p>

<p><code>
heroku addons:add redistogo
</code></p>

<p>Setelah itu kita bisa commit dan push</p>

<p>```
$ git push heroku master
Fetching repository, done.
Counting objects: 7, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 590 bytes | 0 bytes/s, done.
Total 4 (delta 3), reused 0 (delta 0)</p>

<p>-----> Node.js app detected</p>

<pre><code>   PRO TIP: Specify a node version in package.json
   See https://devcenter.heroku.com/articles/nodejs-support
</code></pre>

<p>-----> Defaulting to latest stable node: 0.10.26
-----> Downloading and installing node
-----> Restoring node_modules directory from cache
-----> Pruning cached dependencies not specified in package.json
-----> Installing dependencies</p>

<pre><code>   npm WARN package.json redis-url@0.2.0 No repository field.
   npm http GET https://registry.npmjs.org/redis
   npm http 200 https://registry.npmjs.org/redis
   npm http GET https://registry.npmjs.org/redis/-/redis-0.10.1.tgz
   npm http 200 https://registry.npmjs.org/redis/-/redis-0.10.1.tgz
   redis@0.10.1 node_modules/redis
</code></pre>

<p>-----> Caching node_modules directory for future builds
-----> Cleaning up node-gyp and npm artifacts
-----> Building runtime environment
-----> Discovering process types</p>

<pre><code>   Procfile declares types -&gt; web
</code></pre>

<p>-----> Compressing... done, 5.3MB
-----> Launching... done, v5</p>

<pre><code>   http://ysq.herokuapp.com deployed to Heroku
</code></pre>

<p>To git@heroku.com:ysq.git
   84e7abd..cecc87f  master -> master
```</p>

<p>Kita bisa cek apakah aplikasinya sukses dideploy dengan browse ke Heroku. Bila ada error, kita bisa lihat errornya dengan menggunakan perintah <code>heroku logs</code></p>

<h3>Financial Problem</h3>

<p>Setelah saya coba, ternyata untuk bisa menambahkan add-ons RedisToGo di Heroku kita harus memasukkan informasi kartu kredit. Padahal saya cuma mau pakai paket Free.</p>

<p>Untung ada jalan keluarnya. Kita bisa daftar langsung di <a href="https://redistogo.com">website RedisToGo</a> dan memilih paket Free. Setelah itu kita akan mendapatkan satu database seperti bisa dilihat pada screenshot berikut:</p>

<p><img src="https://lh6.googleusercontent.com/-lq4p7uGi63Y/UwYMOsT-95I/AAAAAAAAFNA/TpqPA7qA1Qk/w826-h330-no/03-redistogo.png"></p>

<p>Kita sebaiknya memodifikasi kode program kita agar selalu menggunakan database RedisToGo tersebut walaupun pada saat menjalankan aplikasi di lokal. Ini untuk menyederhanakan kode program kita. Namanya juga aplikasi belajaran, jadi diusahakan sesederhana mungkin.</p>

<p>Kode program yang tadinya seperti ini</p>

<p>```js
if (process.env.REDISTOGO_URL) {</p>

<pre><code>var rtg   = require("url").parse(process.env.REDISTOGO_URL);
var redis = require("redis").createClient(rtg.port, rtg.hostname);
redis.client.auth(rtg.auth.split(":")[1]);
</code></pre>

<p>} else {</p>

<pre><code>var redis = require("redis").createClient();
</code></pre>

<p>}
```</p>

<p>Kita ubah menjadi seperti ini</p>

<p>```js
var REDISTOGO_URL = "redis://redistogo:8adc4536655ce179e2645ae4abd70eb2@pearlfish.redistogo.com:9930/";</p>

<p>var rtg   = require("url").parse(REDISTOGO_URL);
var redis = require("redis").createClient(rtg.port, rtg.hostname);
redis.auth(rtg.auth.split(":")[1]);
```</p>

<p>Isi variabel <code>REDISTOGO_URL</code> diambil dari informasi di website RedisToGo seperti pada screenshot di atas.</p>

<p>Aplikasi bisa kita deploy ke Heroku dan harusnya bisa berjalan dengan sukses. Dengan suksesnya deployment tersebut, persiapan kita sudah selesai. Selanjutnya kita bisa mulai desain dan coding aplikasi kita yang sebenarnya.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial ExtJS]]></title>
    <link href="http://software.endy.muhardin.com/javascript/tutorial-extjs/"/>
    <updated>2011-06-21T20:15:31+07:00</updated>
    <id>http://software.endy.muhardin.com/javascript/tutorial-extjs</id>
    <content type="html"><![CDATA[<p>Hari Senin kemarin, ArtiVisi mengadakan internal training mengenai ExtJS yang diikuti oleh programmer ArtiVisi dan sister company. Berikut adalah materi trainingnya.</p>

<h2>Cara setup project ExtJS</h2>

<p><video width='640' height='320' preload='none' controls poster='http://artivisi.com/~endy/videos/training-extjs/01.%20Setup%20ExtJS.png'><source src='http://artivisi.com/~endy/videos/training-extjs/01.%20Setup%20ExtJS.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>

<h2>Memahami Layout</h2>

<p><video width='640' height='320' preload='none' controls poster='http://artivisi.com/~endy/videos/training-extjs/02.%20ExtJS%20Layout.png'><source src='http://artivisi.com/~endy/videos/training-extjs/02.%20ExtJS%20Layout.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>

<h2>Membuat Menubar</h2>

<p><video width='640' height='320' preload='none' controls poster='http://artivisi.com/~endy/videos/training-extjs/03.%20Klik%20Menu%20muncul%20Tab.png'><source src='http://artivisi.com/~endy/videos/training-extjs/03.%20Klik%20Menu%20muncul%20Tab.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>

<h2>Membuat User Management Screen</h2>

<p><video width='640' height='320' preload='none' controls poster='http://artivisi.com/~endy/videos/training-extjs/04.%20Membuat%20User%20Management%20Screen.png'><source src='http://artivisi.com/~endy/videos/training-extjs/04.%20Membuat%20User%20Management%20Screen.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>

<h2>Membuat Toolbar CRUD</h2>

<p><video width='640' height='320' preload='none' controls poster='http://artivisi.com/~endy/videos/training-extjs/05.%20Membuat%20Toolbar%20CRUD.png'><source src='http://artivisi.com/~endy/videos/training-extjs/05.%20Membuat%20Toolbar%20CRUD.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>

<p>Masih ada beberapa materi lanjutan yang belum sempat disampaikan, yaitu:</p>

<ul>
<li><p>Enable/Disable Form</p></li>
<li><p>Save isi form ke server</p></li>
<li><p>Query data dari server, tampilkan ke grid</p></li>
</ul>


<p>Kode program yang digunakan pada training ini dapat diikuti di <a href="https://github.com/endymuhardin/belajar-extjs">Github page saya</a></p>
]]></content>
  </entry>
  
</feed>
