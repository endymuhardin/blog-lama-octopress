<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Living life and make it better]]></title>
  <link href="http://software.endy.muhardin.com/categories/java/atom.xml" rel="self"/>
  <link href="http://software.endy.muhardin.com/"/>
  <updated>2014-04-24T12:43:04+07:00</updated>
  <id>http://software.endy.muhardin.com/</id>
  <author>
    <name><![CDATA[Endy Muhardin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Membuat subreport Jasper dalam SpringMVC]]></title>
    <link href="http://software.endy.muhardin.com/java/membuat-subreport-jasper-dalam-springmvc/"/>
    <updated>2014-04-12T12:26:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/membuat-subreport-jasper-dalam-springmvc</id>
    <content type="html"><![CDATA[<p>Pada artikel ini, kita akan membuat implementasi download file PDF/XLS dari aplikasi web. Fitur ini akan kita implementasi menggunakan library <a href="http://community.jaspersoft.com/project/jasperreports-library">Jasper Report</a> dan framework <a href="http://docs.spring.io/spring/docs/4.0.2.RELEASE/spring-framework-reference/html/view.html#view-jasper-reports">Spring MVC</a>.</p>

<p>Projectnya akan kita buat menggunakan Maven, supaya bisa dibuka dengan baik (portable) di berbagai IDE. Untuk bisa memahami artikel ini dengan baik, pembaca harus sudah paham tentang Spring Framework dan Spring MVC. Yang belum paham Spring Framework bisa membaca <a href="http://software.endy.muhardin.com/java/memahami-dependency-injection/">artikel terdahulu tentang Dependency Injection</a>. Sedangkan pembahasan tentang Spring MVC bisa dibaca di <a href="https://www.google.com/search?q=site%3Asoftware.endy.muhardin.com&amp;q=aplikasi+web+dengan+spring">rangkaian artikel berseri tentang membuat aplikasi web dengan Spring MVC</a>.</p>

<p>Source code lengkap dapat diakses di <a href="https://github.com/endymuhardin/belajar-springmvc-jasperreports">repository Github</a>. Bagi yang ingin tahu urutan langkah-langkah implementasinya, bisa lihat <a href="https://github.com/endymuhardin/belajar-springmvc-jasperreports/commits/master">commit history</a>.</p>

<!--more-->


<h2>Setup Project</h2>

<p>Pertama, kita setup dulu projectnya menggunakan Maven Archetype dengan perintah berikut</p>

<p><code>
mvn archetype:create -DgroupId=com.muhardin.endy.belajar -DartifactId=belajar-springmvc-jasper
</code></p>

<p>Kemudian konversi menjadi aplikasi web dengan cara:</p>

<ul>
<li>edit <code>pom.xml</code>, ganti <code>&lt;packaging&gt;jar&lt;/packaging&gt;</code> menjadi <code>&lt;packaging&gt;war&lt;/packaging&gt;</code></li>
<li>tambahkan file <code>src/main/webapp/WEB-INF/web.xml</code></li>
<li>ini langkah opsional, tambahkan <code>src/main/webapp/index.html</code> supaya ada halaman Hello World</li>
</ul>


<p>Kondisi project pada tahap ini bisa dilihat di <a href="https://github.com/endymuhardin/belajar-springmvc-jasperreports/tree/1fa6134d10b2816b40367d1fc2cc4302ddcb9a02">commit 1fa6134d10</a></p>

<p>Setelah selesai di tahap ini, kita bisa buka projectnya menggunakan Netbeans atau Eclipse.</p>

<h2>Aktivasi Spring MVC</h2>

<p>Mulai dari yang mudah dulu, kita buat controller yang menampilkan Hello World dengan Spring MVC. Ini sekedar memastikan bahwa konfigurasi Spring MVC kita sudah benar, sehingga pada waktu implementasi Jasper Report nanti kita tidak perlu lagi memusingkan error Spring MVC.</p>

<p>Tambahkan dependensi Spring MVC di <code>pom.xml</code></p>

<p>```xml
<dependency></p>

<pre><code>&lt;groupId&gt;org.springframework&lt;/groupId&gt;
&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;
&lt;version&gt;${org.springframework.version}&lt;/version&gt;
</code></pre>

<p></dependency>
```</p>

<p>Saya menggunakan Maven properties untuk mendeklarasikan versi library. Ini akan memudahkan kalau di kemudian hari kita ingin mengupgrade versinya.</p>

<p>```xml
<properties></p>

<pre><code>&lt;org.springframework.version&gt;4.0.2.RELEASE&lt;/org.springframework.version&gt;
</code></pre>

<p></properties>
```</p>

<p>Agar bisa memproses file JSP, kita tambahkan juga library <code>jstl</code>.</p>

<p>```xml
<dependency></p>

<pre><code>&lt;groupId&gt;javax.servlet&lt;/groupId&gt;
&lt;artifactId&gt;jstl&lt;/artifactId&gt;
&lt;version&gt;${jstl.version}&lt;/version&gt;
&lt;scope&gt;runtime&lt;/scope&gt;
</code></pre>

<p></dependency>
```</p>

<p>Selanjutnya, deklarasikan <code>DispatcherServlet</code> milik Spring di <code>web.xml</code></p>

<p>```xml
<servlet></p>

<pre><code>&lt;servlet-name&gt;belajar&lt;/servlet-name&gt;
&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;
&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
</code></pre>

<p></servlet></p>

<p><servlet-mapping></p>

<pre><code>&lt;servlet-name&gt;belajar&lt;/servlet-name&gt;
&lt;url-pattern&gt;/&lt;/url-pattern&gt;
</code></pre>

<p></servlet-mapping>
```</p>

<p>Kita harus membuat file konfigurasi sesuai dengan nama servlet. Karena namanya <code>belajar</code>, maka file yang harus dibuat adalah <code>belajar-servlet.xml</code>. Isinya tidak banyak, seperti ini:</p>

<p>```xml
&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;beans xmlns="http://www.springframework.org/schema/beans"</p>

<pre><code>   xmlns:mvc="http://www.springframework.org/schema/mvc"
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc.xsd"&gt;

&lt;mvc:annotation-driven/&gt;
&lt;mvc:default-servlet-handler /&gt;

&lt;context:component-scan base-package="com.muhardin.endy.belajar.springmvcjasper.controller" /&gt;

&lt;bean id="jstlViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
    &lt;property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/&gt;
    &lt;property name="prefix" value="/WEB-INF/templates/jsp/"/&gt;
    &lt;property name="suffix" value=".jsp"/&gt;
&lt;/bean&gt;
</code></pre>

<p></beans>
```</p>

<p>Sediakan file <code>halo.jsp</code> dalam folder <code>WEB-INF/templates/jsp</code>. Isinya tidak saya pasang di sini, silahkan lihat sendiri <a href="https://github.com/endymuhardin/belajar-springmvc-jasperreports/blob/5e5eed120ab0a58e91a5c130fa2957b82acfebb0/src/main/webapp/WEB-INF/templates/jsp/halo.jsp">di Github</a>.</p>

<p>Buat controller dalam package <code>com.muhardin.endy.belajar.springmvcjasper.controller</code>, sesuai konfigurasi dalam <code>belajar-servlet.xml</code>. Isi file bisa dilihat <a href="https://github.com/endymuhardin/belajar-springmvc-jasperreports/blob/5e5eed120ab0a58e91a5c130fa2957b82acfebb0/src/main/java/com/muhardin/endy/belajar/springmvcjasper/controller/HaloController.java">di Github</a>.</p>

<p>Pada tahap ini, kita bisa menjalankan aplikasinya dengan perintah <code>mvn clean package tomcat:run</code> dan browse ke <code>http://localhost:8080/belajar-springmvc-jasper/halo</code></p>

<p>Kondisi folder project pada tahap ini bisa dilihat <a href="https://github.com/endymuhardin/belajar-springmvc-jasperreports/tree/5e5eed120ab0a58e91a5c130fa2957b82acfebb0">di sini</a>.</p>

<h2>Aktivasi Jasper Report</h2>

<p>Kita harus membuat dulu template reportnya. Gunakan <a href="http://community.jaspersoft.com/project/ireport-designer">iReport</a> untuk mendesain template secara visual, supaya lebih mudah. Berikut screenshot report yang saya buat</p>

<p><img src="https://lh4.googleusercontent.com/-j44Qm1BUa70/U0jWOO7SwOI/AAAAAAAAFlM/vReeJlxCI3E/w916-h574-no/01-report-induk.png" title="" ></p>

<p>Semua template Jasper Report kita simpan dalam folder <code>src/main/webapp/WEB-INF/templates/jrxml</code>.</p>

<p>Agar bisa memproses template report tersebut, kita tambahkan dulu library Jasper Report di <code>pom.xml</code></p>

<p>```xml
<dependency></p>

<pre><code>&lt;groupId&gt;net.sf.jasperreports&lt;/groupId&gt;
&lt;artifactId&gt;jasperreports&lt;/artifactId&gt;
&lt;version&gt;${jasperreports.version}&lt;/version&gt;
&lt;scope&gt;runtime&lt;/scope&gt;
</code></pre>

<p></dependency>
```</p>

<p>Cukup gunakan scope <code>runtime</code> karena kita tidak perlu import class Jasper di kode program kita. Tambahkan juga dependensi <code>javax.servlet.http</code> supaya kita bisa menggunakan class <code>HttpServletRequest</code> nantinya. Scopenya kita gunakan <code>provided</code>, karena sudah disediakan dalam application server (misal: Tomcat).</p>

<p>```xml
<dependency></p>

<pre><code>&lt;groupId&gt;javax&lt;/groupId&gt;
&lt;artifactId&gt;javaee-web-api&lt;/artifactId&gt;
&lt;version&gt;7.0&lt;/version&gt;
&lt;scope&gt;provided&lt;/scope&gt;
</code></pre>

<p></dependency>
```</p>

<p>Selanjutnya, kita tinggal isi data yang akan ditampilkan dalam dokumen PDF/XLS. Ini kita lakukan di kode program Java dalam class <code>HaloController</code>. Berikut methodnya</p>

<p>```java
@RequestMapping(value = "/anggota/export*", method = RequestMethod.GET)
public ModelMap exportDataAnggota(HttpServletRequest request) {</p>

<pre><code>String uri = request.getRequestURI();
String format = uri.substring(uri.lastIndexOf(".") + 1);

return new ModelMap()
        .addAttribute("format", format)
        .addAttribute("tanggal", new Date())
        .addAttribute("dataSource", service.semuaAnggota());
</code></pre>

<p>}
```</p>

<p>Pada kode program di atas, pertama kita ambil dulu akhiran di URL yang diakses user. Contohnya, bila user mengakses <code>http://localhost:8080/belajar-springmvc-jasper/anggota/export.pdf</code>, maka variabel <code>format</code> akan berisi <code>pdf</code>. Variabel <code>format</code> ini akan digunakan Spring untuk menentukan jenis outputnya, apakah PDF, XLS, CSV, dsb.</p>

<p>Kita isi variabel apapun yang kita butuhkan dalam report. Pada contoh di atas, kita kirim dua variabel yaitu <code>tanggal</code> dan <code>dataSource</code>. Variabel <code>tanggal</code> akan menjadi parameter dalam Jasper Report, sedangkan <code>dataSource</code> akan menjadi sumber data yang akan ditampilkan dalam <em>band</em> <code>detail</code>. Untuk lebih jelasnya, silahkan <a href="https://github.com/endymuhardin/belajar-springmvc-jasperreports/blob/17dd0806ccf41d5edbcf646aa50458cfbd130d8f/src/main/webapp/WEB-INF/templates/jrxml/daftar-anggota.jrxml">buka file templatenya</a> dengan menggunakan iReport.</p>

<p>Selanjutnya, kita konfigurasi Spring agar request ke url <code>http://localhost:8080/belajar-springmvc-jasper/anggota/export.pdf</code> diteruskan ke Jasper Report. Kita buat deklarasi resolver untuk Jasper Report dalam <code>belajar-servlet.xml</code> sebagai berikut</p>

<p>```xml
<bean id="jasperViewResolver" class="org.springframework.web.servlet.view.XmlViewResolver"></p>

<pre><code>&lt;property name="location" value="classpath:jasper-views.xml"/&gt;
&lt;property name="order" value="0"/&gt;
</code></pre>

<p></bean>
```</p>

<p>Tambahkan juga property <code>order</code> di konfigurasi JSP supaya dia dijalankan setelah Jasper Report.</p>

<p>```xml
<bean id="jstlViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"></p>

<pre><code>&lt;property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/&gt;
&lt;property name="prefix" value="/WEB-INF/templates/jsp/"/&gt;
&lt;property name="suffix" value=".jsp"/&gt;
&lt;property name="order" value="1"/&gt;
</code></pre>

<p></bean>
```</p>

<p>Ini kita lakukan karena resolver JSP tidak bisa mengecek apakah templatenya ditemukan atau tidak. Dia akan langsung mengeluarkan pesan error. Dengan resolver Jasper dieksekusi duluan, maka flownya akan seperti ini:</p>

<ol>
<li>Dari controller terima nama view <code>/anggota/export.pdf</code></li>
<li>Cari view dengan nama tersebut dalam <code>jasperViewResolver</code></li>
<li>Kalau tidak ketemu lanjutkan cari dalam <code>jstlViewResolver</code></li>
<li>Kalau tidak ketemu juga, keluarkan pesan error</li>
</ol>


<p>Kondisi folder project pada tahap ini bisa dilihat <a href="https://github.com/endymuhardin/belajar-springmvc-jasperreports/tree/bce02983b044e80a97db7dc95689b643afbdea8a">di sini</a></p>

<p>Pada tahap ini kita sudah bisa menghasilkan file PDF ataupun XLS menggunakan Jasper Report dan Spring MVC. Tentunya pada aplikasi sebenarnya data diambil dari database. Tapi untuk menyederhanakan masalah agar kita bisa fokus ke konfigurasi Jasper dan Spring, maka data yang ditampilkan kita hardcode saja.</p>

<p>Selanjutnya, kita akan mencoba konfigurasi yang lebih sulit, yaitu sub report.</p>

<h2>Sub Report</h2>

<p>Subreport adalah report di dalam report. Ini adalah fitur canggih dari Jasper Report. Kita tidak akan membahas detail tentang apa itu subreport. Silahkan baca artikel <a href="http://www.richardnichols.net/2010/02/simple-guide-to-sub-reports-in-jasperreports-ireport/">ini</a> dan <a href="http://bytecoded.blogspot.com/2009/12/jasperreports-370demosamplessubreport.html">ini</a> untuk memahami apa itu subreport.</p>

<p>Satu report induk bisa menampung banyak subreport. Masing-masing subreport memiliki template dan <code>dataSource</code> sendiri. Untuk itu, kita perlu memberitahukan pada semua pihak tentang lokasi / nama file template subreport dan nama variabel <code>dataSource</code> yang digunakan di subreport.</p>

<p>Kita mulai dari desain template induk terlebih dulu. Ini kita lakukan di iReport. Drag and drop icon subreport di Palette ke template. iReport akan menampilkan wizard untuk membantu kita.</p>

<p><img src="https://lh5.googleusercontent.com/-gqIBrrd0qeg/U0jWNjg4bSI/AAAAAAAAFk4/XzTxNcCIyOU/w667-h435-no/02-membuat-subreport.png"></p>

<p>Saya lebih suka membuat templatenya secara terpisah, kemudian menyatukannya secara manual. Oleh karena itu, kita pilih <em>Just create subreport element</em>.</p>

<p>Hasilnya sebagai berikut.</p>

<p><img src="https://lh5.googleusercontent.com/-3ig57Gmr68A/U0jWOcc-8hI/AAAAAAAAFlI/49LtLA6TDFk/w916-h574-no/03-layout-subreport.png"></p>

<p>Sebetulnya di dokumentasi Spring MVC ada penjelasan tentang cara menggunakan subreport.</p>

<p><img src="https://lh6.googleusercontent.com/-j7vN6jiyKIs/U0jWOktav7I/AAAAAAAAFlU/Qs8BbyjvYro/w917-h478-no/04-docs-springmvc-jasper-subreport.png"></p>

<p>Tapi sayangnya, isinya tidak nyambung sama penjelasan di atasnya. Penjelasan report sederhana dibuat menggunakan konfigurasi file properties, sedangkan penjelasan subreport dibuat menggunakan konfigurasi file XML. Perbedaannya bisa dilihat <a href="https://github.com/endymuhardin/belajar-springmvc-jasperreports/commit/bce02983b044e80a97db7dc95689b643afbdea8a">di sini</a> atau pada gambar di bawah.</p>

<p><img src="https://lh4.googleusercontent.com/-7xWAHJ6UnL0/U0jdR--3THI/AAAAAAAAFmI/1ZiMYLibtpM/w916-h617-no/09-properties-vs-xml.png"></p>

<p>Selanjutnya, kita tambahkan parameter di desain report induk kita. Bisa menggunakan GUI ataupun langsung edit XMLnya. Kali ini saya pakai XML saja supaya bisa copy-paste</p>

<p><img src="https://lh3.googleusercontent.com/-hCvlDw6HmAE/U0jWPcwj3iI/AAAAAAAAFlc/njZlxs_0lNI/w834-h383-no/05-subreport-params.png"></p>

<p>Kita tambahkan dua parameter, yaitu <code>SubReportKantor</code> dan <code>dataSourceSubreport</code>. Kedua parameter ini kita gunakan pada deklarasi subreport yang sudah ditambahkan iReport pada waktu kita drag and drop tadi.</p>

<p><img src="https://lh3.googleusercontent.com/-zqWFEblHxvo/U0jWPXhcBVI/AAAAAAAAFlk/r5q5WZw3BlI/w917-h265-no/06-subreport-declaration.png"></p>

<p>Perhatikan label <code>X</code> dan <code>Y</code>. Itu akan kita gunakan pada konfigurasi lainnya.</p>

<p>Nama variabel <code>dataSourceSubreport</code> yang ditandai dengan label <code>X</code> kita gunakan untuk menyuplai data yang dibutuhkan subreport dari dalam kode program Java.</p>

<p><img src="https://lh3.googleusercontent.com/-FE5T4GfnzBE/U0jWPTUvL7I/AAAAAAAAFlo/Rl8SG7IZjkI/w672-h217-no/07-spring-controller.png"></p>

<p>Selanjutnya kita edit konfigurasi Jasper Report di file <code>jasper-views.xml</code>. Tambahkan lokasi template subreport dan nama variabel yang digunakan untuk <code>dataSource</code>nya.</p>

<p><img src="https://lh6.googleusercontent.com/-qBxNAJ_nqsU/U0jWQwV3gAI/AAAAAAAAFlw/cqnz8eiWWd0/w917-h285-no/08-konfigurasi-jasperview.png"></p>

<p>Selesai sudah. Silahkan coba akses lagi <code>http://localhost:8080/belajar-springmvc-jasper/anggota/export.pdf</code> untuk melihat hasil akhirnya.</p>

<p><img src="https://lh6.googleusercontent.com/-8-GCJgtp70I/U0jgW78hxnI/AAAAAAAAFmY/2jJIFCNeB6g/w917-h485-no/10-final-result.png"></p>

<h2>FAQ</h2>

<p>Pada umumnya, kita semua menggunakan konfigurasi Jasper yang berbasis file properties, karena itulah yang dicontohkan di dokumentasi Spring Framework. Pada waktu muncul kebutuhan subreport, ternyata file konfigurasinya XML.</p>

<blockquote><p>Apakah saya harus konversi semua konfigurasi properties menjadi XML ??</p></blockquote>

<p>Jangan khawatir. Kita bisa menggunakan dua-duanya sekaligus. Tidak perlu pilih salah satu. Konfigurasi report yang lama tidak perlu dibuang/ditulis ulang menjadi xml. Cukup deklarasikan dua <code>view resolver</code>, yang satu properties, satu lagi XML. Begini contohnya</p>

<p>```xml
<bean id="propertiesJasperViewResolver" class="org.springframework.web.servlet.view.ResourceBundleViewResolver"></p>

<pre><code>&lt;property name="basename" value="views"/&gt;
&lt;property name="order" value="0"/&gt;
</code></pre>

<p></bean></p>

<p><bean id="xmlJasperViewResolver" class="org.springframework.web.servlet.view.XmlViewResolver"></p>

<pre><code>&lt;property name="location" value="classpath:jasper-views.xml"/&gt;
&lt;property name="order" value="1"/&gt;
</code></pre>

<p></bean></p>

<p><bean id="jstlViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"></p>

<pre><code>&lt;property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/&gt;
&lt;property name="prefix" value="/WEB-INF/templates/jsp/"/&gt;
&lt;property name="suffix" value=".jsp"/&gt;
&lt;property name="order" value="2"/&gt;
</code></pre>

<p></bean>
```</p>

<p>Dengan cara di atas, berikut flow Spring MVC dalam mencari template yang sesuai:</p>

<ol>
<li>Dari controller terima nama view <code>/anggota/export.pdf</code></li>
<li>Cari view dengan nama tersebut dalam <code>propertiesJasperViewResolver</code></li>
<li>Kalau tidak ketemu lanjutkan cari dalam <code>xmlJasperViewResolver</code></li>
<li>Kalau masih tidak ketemu juga lanjutkan cari dalam <code>jstlViewResolver</code></li>
<li>Kalau tidak ketemu juga, keluarkan pesan error</li>
</ol>


<p>Demikian penjelasan tentang integrasi Spring MVC dan Jasper Report. Source code lengkap bisa diambil <a href="https://github.com/endymuhardin/belajar-springmvc-jasperreports/">di Github</a></p>

<p>Semoga bermanfaat</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Silabus Kuliah Pemrograman]]></title>
    <link href="http://software.endy.muhardin.com/java/silabus-kuliah-pemrograman/"/>
    <updated>2014-03-05T12:11:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/silabus-kuliah-pemrograman</id>
    <content type="html"><![CDATA[<p>Melanjutkan rutinitas 2 tahun terakhir, minggu ini musim perkuliahan semester genap di Universitas Pancasila dimulai. Saya kebagian pegang Pemrograman 2 di kelas reguler, dan Pemrograman 4 di kelas karyawan. Buat para fans yang pengen ketemu dipersilahkan cari saya di Fakultas Teknik Universitas Pancasila setiap Kamis jam 18-21 dan Jumat jam 09-11.</p>

<p>Berikut adalah silabus perkuliahan dari Pemrograman 1 sampai Pemrograman 4. Silabus ini akan sering saya update mengikuti perkembangan jaman.</p>

<!--more-->


<p><a name="pemrograman-1"></a></p>

<h1>Pemrograman 1 : Fundamental</h1>

<h2>Tujuan</h2>

<ul>
<li>Paham dasar-dasar pemrograman dengan Java</li>
<li>Paham cara implementasi OOP dengan Java</li>
<li>Paham cara menggunakan class-class penting dalam Java SDK</li>
</ul>


<h2>Batasan</h2>

<ul>
<li>Hanya menggunakan library standar bawaan Java SDK</li>
<li>Tidak membahas konsep OOP (karena ada mata kuliahnya sendiri)</li>
</ul>


<h2>Referensi</h2>

<ul>
<li><a href="http://docs.oracle.com/javase/tutorial/index.html">Official Java Tutorial, Oracle Corp</a></li>
<li><a href="http://docs.oracle.com/javase/7/docs/api/index.html">SDK Documentation, Oracle Corp</a></li>
<li><a href="http://project-template.googlecode.com/files/Java%20Desktop%20-%20Ifnu%20Bima.pdf">Java Desktop, Ifnu Bima</a></li>
</ul>


<h2>Kebutuhan Software Lab</h2>

<ul>
<li>Java SDK 1.6</li>
<li><a href="http://www.sublimetext.com/">Sublime Text 3</a></li>
</ul>


<h2>Materi Kuliah</h2>

<ul>
<li>Penjelasan Silabus</li>
<li>Setup / Instalasi Java</li>
<li>Version Control (Git)</li>
<li>Github</li>
<li>Anatomi Aplikasi Java</li>
<li>Classpath</li>
<li>Variabel dan Tipe Data</li>
<li>Operator</li>
<li>Control Flow (if-else, for/while)</li>
<li>Class &amp; Object</li>
<li>Method</li>
<li>Exception</li>
<li>Konsep OOP</li>
<li>Inheritance</li>
<li>Encapsulation</li>
<li>Polymorphism</li>
<li>Abstract Class &amp; Interface</li>
<li>Composition &amp; Aggregation</li>
<li>Studi Kasus / Tugas</li>
<li>Presentasi Kasus</li>
</ul>


<p><a name="pemrograman-2"></a></p>

<h1>Pemrograman 2 : Essential Library</h1>

<h2>Tujuan</h2>

<ul>
<li>Mahir menggunakan library tambahan dari dunia open source</li>
<li>Mahir menggunakan development tools Java</li>
</ul>


<h2>Batasan</h2>

<ul>
<li>Belum membuat user interface</li>
</ul>


<h2>Kebutuhan Software Lab</h2>

<ul>
<li>Semua requirement dari Pemrograman 1</li>
<li><a href="http://maven.apache.org/">Apache Maven 3</a></li>
<li>MySQL Server</li>
</ul>


<h2>Materi Kuliah</h2>

<ul>
<li>Build Tools</li>
<li>Automated Test</li>
<li>Date &amp; Time</li>
<li>Collections</li>
<li>JDBC</li>
<li>String</li>
<li>Regular Expression</li>
<li>Multithreading / Concurrency</li>
<li>File I/O</li>
<li>Network I/O</li>
<li>Popular Network Protocol (HTTP, FTP, SMTP, POP, IMAP)</li>
<li>Studi Kasus</li>
</ul>


<p><a name="pemrograman-3"></a></p>

<h1>Pemrograman 3 : Desktop</h1>

<h2>Tujuan</h2>

<ul>
<li>Bisa membuat aplikasi lengkap dengan UI Desktop</li>
</ul>


<h2>Batasan</h2>

<ul>
<li>Aplikasi berjalan lokal</li>
<li>Penyimpanan data dilakukan lokal</li>
<li>Interaksi dengan server dilakukan dengan menggunakan service yang sudah tersedia (tidak membuat sendiri)</li>
</ul>


<h2>Referensi</h2>

<ul>
<li><a href="http://project-template.googlecode.com/files/Java%20Desktop%20-%20Ifnu%20Bima.pdf">Java Desktop, Ifnu Bima</a></li>
</ul>


<h2>Kebutuhan Software Lab</h2>

<ul>
<li>Sama seperti Pemrograman 2</li>
</ul>


<h2>Materi Kuliah</h2>

<ul>
<li><p>Arsitektur Aplikasi Desktop</p>

<ul>
<li>Container</li>
<li>Simple Widget</li>
<li>Event Handling</li>
<li>Data backed Widget</li>
</ul>
</li>
<li><p>Hello Swing</p></li>
<li><p>Container</p>

<ul>
<li><a href="http://docs.oracle.com/javase/tutorial/uiswing/components/frame.html">Frame</a></li>
<li><a href="http://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html">Dialog</a></li>
<li><a href="http://docs.oracle.com/javase/tutorial/uiswing/components/applet.html">Applet</a></li>
<li><a href="http://docs.oracle.com/javase/tutorial/uiswing/components/panel.html">Panel</a></li>
</ul>
</li>
<li><p><a href="http://docs.oracle.com/javase/tutorial/uiswing/components/menu.html">Menu</a></p></li>
<li><p><a href="http://docs.oracle.com/javase/tutorial/uiswing/layout/using.html">Layout Manager</a></p>

<ul>
<li><a href="http://docs.oracle.com/javase/tutorial/uiswing/layout/border.html">Border Layout</a></li>
<li><a href="http://docs.oracle.com/javase/tutorial/uiswing/layout/grid.html">Grid Layout</a></li>
<li>Flow Layout</li>
</ul>
</li>
<li><p>Simple Component</p>

<ul>
<li>Text Field</li>
<li>Button</li>
<li>Checkbox</li>
<li>Radio Button</li>
</ul>
</li>
<li><p><a href="http://docs.oracle.com/javase/tutorial/uiswing/events/index.html">Event Handling</a></p>

<ul>
<li>ActionEvent</li>
<li>MouseEvent</li>
</ul>
</li>
<li><p>Complex Component</p>

<ul>
<li>Combo/Select</li>
<li>List</li>
</ul>
</li>
<li><p>Swing Table</p>

<ul>
<li>JTable</li>
<li>TableModel</li>
</ul>
</li>
<li><p><a href="http://docs.oracle.com/javase/tutorial/uiswing/concurrency/index.html">Concurrent Execution</a></p>

<ul>
<li>Swing Worker</li>
<li>Progress Bar</li>
</ul>
</li>
<li><p>Internationalization</p></li>
<li><p>Jasper Report</p>

<ul>
<li>Parameter</li>
<li>Variable</li>
<li>Report Datasource</li>
</ul>
</li>
<li><p>iReport</p></li>
<li><p>Studi Kasus</p></li>
<li><p>Requirement Specification</p>

<ul>
<li>Daftar Fitur</li>
<li>Arsitektur</li>
<li>Desain UI</li>
<li>Desain Database</li>
</ul>
</li>
<li><p>Implementasi Frame dan Menu</p></li>
<li>Implementasi Dummy Screen</li>
<li>Implementasi Proses Bisnis</li>
<li>Implementasi Akses Database</li>
<li>Implementasi Report</li>
</ul>


<p><a name="pemrograman-4"></a></p>

<h1>Pemrograman 4 : Aplikasi Web</h1>

<h2>Tujuan</h2>

<ul>
<li>Bisa membuat aplikasi web dengan arsitektur REST</li>
<li>Bisa menggunakan penyimpanan data non-relasional</li>
</ul>


<h2>Referensi</h2>

<ul>
<li><a href="http://software.endy.muhardin.com/java/development-stack-2014/">Development Stack ArtiVisi</a></li>
</ul>


<h2>Kebutuhan Software Lab</h2>

<ul>
<li>Sama seperti Pemrograman 2</li>
<li><a href="http://software.endy.muhardin.com/javascript/persiapan-coding-nodejs/">NodeJS dan Yeoman</a></li>
</ul>


<h2>Materi Kuliah</h2>

<ul>
<li>Java Web Application</li>
<li>Servlet, Filter, Listener</li>
<li>JSP &amp; JSTL</li>
<li>Security</li>
<li>REST</li>
<li>AngularJS dan Twitter Bootstrap</li>
<li>Redis</li>
<li>MongoDB</li>
<li>Case Study</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Development Stack 2014]]></title>
    <link href="http://software.endy.muhardin.com/java/development-stack-2014/"/>
    <updated>2014-02-17T07:29:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/development-stack-2014</id>
    <content type="html"><![CDATA[<p>Tiga tahun lalu, saya memposting artikel tentang <a href="http://software.endy.muhardin.com/java/development-stack-2011/">stack development yang digunakan di ArtiVisi</a>. Artikel kali ini adalah update dari stack yang digunakan tiga tahun yang lalu.</p>

<p>Pilihan stack ini saya presentasikan pada pertemuan Java Meet Up (JaMU) Januari 2014 yang diadakan di kantor <a href="http://blibli.com">blibli.com</a>. Materinya bisa diunduh pada link berikut:</p>

<ul>
<li>Slide Presentasi bisa <a href="http://software.endy.muhardin.com/files/slide-presentasi/artivisi-stack-2014.html">dilihat online</a> atau <a href="http://www.4shared.com/zip/Mo47v94uba/presentasi-jamu-01-2014.html">diunduh dalam format ZIP</a></li>
<li><a href="http://www.youtube.com/watch?v=4312GuJVvxs">Rekaman Video dan Screencast</a></li>
</ul>


<p>Berikut rangkuman dari isi presentasi saya tersebut</p>

<p><img src="https://lh3.googleusercontent.com/-5tGzUVc2lk4/UwFrrT20hmI/AAAAAAAAFJk/zRxIxumf_O4/w800-h566-no/restful-architecture.png"></p>

<!--more-->


<h2>Presentation Layer</h2>

<p>Di sisi tampilan, ArtiVisi menggunakan <a href="http://getbootstrap.com/">Twitter Bootstrap</a> untuk memperindah tampilan dan <a href="http://angularjs.org/">AngularJS</a> untuk mengisi dynamic content. Kita <strong>tidak lagi menggunakan</strong> teknologi server side seperti JSF, ZK, JSP, dan sejenisnya. Untuk menyediakan server side service, kita menggunakan <a href="http://docs.spring.io/spring/docs/4.0.1.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-responsebody">fitur REST dari Spring MVC</a> yang menerima request HTTP dan mengembalikan response berupa <a href="http://en.wikipedia.org/wiki/JSON">JSON</a>.</p>

<p>Kenapa tidak menggunakan server side rendering? Ada beberapa alasan:</p>

<ul>
<li>mencari skill CSS dan JS jauh lebih mudah daripada mencari skill server side dengan Java. Kita bisa rekrut programmer PHP untuk mengerjakan Twitter Bootstrap dan AngularJS. Ketersediaan programmer PHP jauh lebih banyak daripada programmer Java.</li>
<li>service dari server side yang menerima HTTP request dan mengembalikan JSON bisa digunakan oleh tampilan selain web. Saat ini kita sudah memiliki aplikasi client desktop dan mobile tanpa mengubah aplikasi di sisi server. Bahkan salah satu aplikasi client desktop dibangun dengan cepat menggunakan Delphi oleh customer hanya dengan bermodalkan <a href="http://software.endy.muhardin.com/java/mendebug-aplikasi-ajax/">pengetahuan tentang format request dan response</a>. Customer kami yang lain menambahkan sendiri fitur transaksi melalui SMS menggunakan <a href="http://playsms.org/">playSMS</a> juga dengan teknik yang sama. Semua ini mereka lakukan sendiri tanpa ada perubahan di sisi server. Ini sulit dilakukan kalau kita menggunakan framework server side.</li>
</ul>


<h2>Business Service Layer</h2>

<p>Sebetulnya fitur yang penting di business layer hanya satu, yaitu <strong>declarative transaction management</strong>. Untuk keperluan itu, kita tetap percayakan pada framework yang sudah proven yaitu <a href="http://projects.spring.io/spring-framework/">Spring Framework</a>.</p>

<blockquote><p>Kenapa tidak pakai EJB? Kan sudah tersedia di application server JEE sehingga tidak perlu tambahan JAR?</p></blockquote>

<p>Ada beberapa alasan:</p>

<ul>
<li>Dengan Spring Framework, aplikasi bisa dideploy di application server mana saja. Bisa Tomcat, Jetty, Heroku, Google App Engine, dan sebagainya. Requirement yang dibutuhkan hanyalah Java VM saja.</li>
<li>Kalau kita menggunakan EJB, kita harus memahami berbagai model programming. Untuk aplikasi web menggunakan EJB, aplikasi konsol (misalnya ISO-8583 gateway) lain lagi, aplikasi desktop beda lagi, aplikasi mobile beda lagi. Kalau kita menggunakan Spring Framework, model pemrogramannya bisa digunakan di berbagai macam aplikasi tadi.</li>
</ul>


<h2>Data Access Layer</h2>

<p>Untuk data access layer, sebetulnya kita masih menggunakan <a href="http://hibernate.org/orm/">Hibernate ORM</a>. Tapi kita tidak lagi menggunakannya secara langsung, melainkan dibungkus dengan Spring Data JPA. Tujuannya cuma satu, yaitu <a href="https://github.com/endymuhardin/belajar-restful/commit/972aae9f4363e151a654e3602ea32ef7e704c369">mengurangi jumlah kode program yang harus ditulis</a>.</p>

<p>Manajemen versioning untuk skema database kita gunakan <a href="http://www.liquibase.org/">Liquibase</a>. Tools ini memungkinkan kita untuk:</p>

<ul>
<li>mencatat versi skema database</li>
<li>membuatkan script untuk upgrade/rollback antar versi aplikasi. Misalnya aplikasi kita versi 2.0 mau diupgrade ke versi 2.1. Atau sebaliknya, kita sudah deploy versi 3.2 ternyata ada critical bug sehingga harus balik ke versi 3.1.</li>
</ul>


<h2>Development Tools</h2>

<p>Berikut adalah tools development yang kita gunakan:</p>

<ul>
<li>Project Management : <a href="https://trello.com">Trello</a></li>
<li>Version Control : <a href="http://git-scm.org/">Git</a>. Di sisi server dimanage dengan <a href="http://gitlab.org/gitlab-ce/">Gitlab</a></li>
<li>Build Tools : <a href="http://maven.apache.org/">Maven 3</a></li>
<li>Functional Test untuk REST : <a href="https://code.google.com/p/rest-assured/">Rest Assured</a></li>
</ul>


<h2>Workflow</h2>

<p>Secara garis besar, berikut adalah gambaran workflow cara kerja sehari-hari di tim development kita.</p>

<p><img src="https://lh3.googleusercontent.com/-Ne0pSRdBBgk/UwFrsAA5KYI/AAAAAAAAFJs/6IRdUeLGvFA/w800-h566-no/workflow.png"></p>

<h2>Proof of Concept</h2>

<p>Di ArtiVisi kami memiliki aplikasi kecil sebagai <em>proof of concept</em> dari teknologi yang kami gunakan. Kalau ada penambahan/pengurangan/perubahan terhadap stack, yang pertama diupdate adalah aplikasi kecil ini. Aplikasinya disediakan gratis <a href="https://github.com/endymuhardin/belajar-restful">di github</a>. Jadi, aplikasi ini akan selalu memuat kombinasi stack terkini yang sedang kami gunakan, walaupun belum sempat diumumkan di posting blog.</p>

<p>Beberapa fitur dari aplikasi ini antara lain:</p>

<ul>
<li>CRUD</li>
<li>relasi one-to-many dan many-to-many</li>
<li>Popup dialog</li>
<li>Automated Testing untuk query database dan REST url</li>
<li>dan fitur-fitur lain yang bisa dieksplorasi sendiri ;)</li>
</ul>


<p>Dari aplikasi kecil ini, kami membuat template project berupa Maven Archetype yang juga disediakan gratis <a href="https://github.com/artivisi/standard-webapp-archetype">di github</a>. Bagi yang belum familiar dengan Maven, archetype adalah semacam wizard untuk membuat project baru.</p>

<h2>Catatan penting soal performance</h2>

<blockquote><p>Saya ingin membuat aplikasi Java. Framework mana yang performance-nya paling cepat?</p></blockquote>

<p>Bila Anda menyimak presentasi saya di JaMU, khususnya di slide nomer 5 dan 6, saya tidak menyebut-nyebut masalah performance sebagai salah satu kriteria pemilihan framework/teknologi. Kenapa begitu?</p>

<p>Di jaman sekarang ini, semua teknologi yang umum digunakan orang sudah bisa dioptimasi performancenya. Mau pakai Java, PHP, Ruby, Python, Perl, semua sudah punya portofolio terkenal. Misalnya:</p>

<ul>
<li>Java punya Amazon dan Google</li>
<li>PHP punya Facebook</li>
<li>Ruby punya Github</li>
<li>Python punya Google</li>
<li>Perl punya BBC iPlayer</li>
<li>dan sebagainya</li>
</ul>


<p>Demikian juga mengenai Linux vs Windows, MySQL vs Oracle, dan sebagainya. Bagaimana cara meningkatkan performance sudah dirangkum di <a href="http://highscalability.com/start-here/">website ini</a>.</p>

<p>Intinya, performance bukan lagi faktor yang harus dipertimbangkan dalam proses pemilihan. Kalau aplikasi yang kita buat ternyata lemot, maka berikut urutan tersangkanya:</p>

<ul>
<li>teknik coding yang salah (biasanya disebabkan karena tidak menguasai <a href="http://software.endy.muhardin.com/life/lan-na-zha/">dasar-dasar pemrograman</a> seperti misalnya melakukan <code>select * from tabel_transaksi</code> dimana isi tabel berisi jutaan record transaksi sejak 10 tahun yang lalu)</li>
<li>programmernya tidak tahu cara pakai framework/teknologi tersebut</li>
<li>teknologi tidak sesuai peruntukannya</li>
<li>belum mengetahui / menerapkan tips dan trik tuning performance untuk teknologi yang dimaksud</li>
</ul>


<p>Jadi, kalau ada masalah performance, tersangka utama bukanlah teknologinya, tapi usernya.</p>

<blockquote><p>Logikanya sederhana saja, jutaan orang pakai teknologi tersebut. Kalau memang ada masalah besar masa iya tidak muncul di peringkat pertama pada waktu kita <a href="http://software.endy.muhardin.com/aplikasi/teknik-menggunakan-google/">search di Google</a>?</p></blockquote>

<p>Demikianlah stack development ArtiVisi di tahun 2014. Untuk lebih jelasnya, silahkan tonton video presentasi JaMU di atas.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dasar-dasar Aplikasi Web Java]]></title>
    <link href="http://software.endy.muhardin.com/java/dasar-dasar-aplikasi-web-java/"/>
    <updated>2014-01-20T20:12:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/dasar-dasar-aplikasi-web-java</id>
    <content type="html"><![CDATA[<p>Pada artikel terdahulu, kita telah membahas tentang <a href="http://software.endy.muhardin.com/life/lan-na-zha/">pentingnya penguasaan terhadap konsep dasar</a>. Kali ini, kita akan membahas tentang konsep dasar aplikasi web di Java. Ini juga akan menjawab pertanyaan yang sering ditanyakan di forum yaitu</p>

<blockquote><p>Saya ingin belajar Java Enterprise Edition (Java EE), apa yang pertama harus saya pelajari?</p></blockquote>

<!--more-->


<p>Java EE sangat luas cakupannya, di antaranya adalah:</p>

<ul>
<li>Java Servlet</li>
<li>JavaServer Faces</li>
<li>JavaServer Pages</li>
<li>Java Persistence</li>
<li><a href="http://www.oracle.com/technetwork/java/javaee/tech/index.html">dan masih banyak lagi</a></li>
</ul>


<p>Untuk bisa memahami semuanya, tentu kita harus memulai dari yang paling sederhana dulu, yaitu Java Servlet. Teknologi ini adalah dasar dari semua aplikasi web di Java. Tanpa pemahaman terhadap teknologi ini, sulit bagi kita untuk mempelajari framework atau library yang lebih canggih seperti Spring MVC, Struts, JavaServer Faces, dan berbagai framework web lainnya. Kenapa sulit? Karena semua framework tersebut dibangun di atas Java Servlet. Kalau pondasinya saja tidak paham, bagaimana mau belajar yang lain?</p>

<p>Ada beberapa hal penting yang harus dipahami dalam Java Servlet, yaitu:</p>

<ul>
<li>Struktur Folder Aplikasi Web Java</li>
<li>Alur eksekusi HTTP Request sampai menghasilkan HTTP Response</li>
<li><p>Tiga komponen Java Servlet yaitu:</p>

<ul>
<li>Servlet</li>
<li>Filter</li>
<li>Listener</li>
</ul>
</li>
</ul>


<p>Mari kita bahas satu persatu.</p>

<h1>Struktur Folder</h1>

<p>Aplikasi web Java struktur foldernya harus mengikuti kaidah berikut</p>

<p><img src="https://github.com/endymuhardin/materi-kuliah-java-web/blob/master/materi-kuliah/img/struktur-folder-web-java.png?raw=true" alt="Struktur Folder Aplikasi Web Java" /></p>

<p>Gambar di atas adalah struktur folder aplikasi yang siap dijalankan. Oleh karena itu kita tidak melihat adanya source code Java di sana.</p>

<p>Setelah kita memiliki struktur folder seperti di atas, aplikasi siap dipaketkan (package) supaya bisa dideploy di application server. Packaging dilakukan dengan membungkus folder di atas dengan algoritma <code>zip</code>. Kita bisa menggunakan aplikasi kompresi seperti WinZip ataupun WinRAR. Bila kita menggunakan WinRAR, harus diingat bahwa algoritma yang digunakan haruslah <code>zip</code>, bukan <code>rar</code></p>

<p>Setelah di-zip, rename extension file menjadi <code>war</code> agar dikenali oleh application server. <code>war</code> merupakan singkatan dari Web Archive.</p>

<p>Untuk menjalankan aplikasi di application server (misalnya Tomcat), berikut langkah-langkah deployment:</p>

<ul>
<li>masukkan file <code>war</code> ke folder deployment sesuai merek application server yang digunakan</li>
<li>contoh: untuk Tomcat, folder deploymentnya adalah <code>webapps</code></li>
<li>Tomcat akan meng-extract file <code>war</code> tersebut</li>
<li>Setelah deployment selesai (ditandai dengan file telah diextract dan tidak ada error di log) aplikasi bisa dibrowse di <code>http://ip-server:port/nama-file-war/index.html</code></li>
</ul>


<p>Bila aplikasi tidak lagi digunakan, kita bisa melakukan undeploy. Caranya:</p>

<ul>
<li>hapus file <code>war</code> dari folder deployment</li>
<li>setelah folder aplikasi terhapus, undeploy berarti sukses</li>
</ul>


<p>Ada beberapa hal yang harus diperhatikan dalam struktur folder di atas, yaitu:</p>

<ul>
<li>Folder <code>WEB-INF</code></li>
<li>File <code>web.xml</code></li>
</ul>


<h2>Folder WEB-INF</h2>

<p>Folder ini adalah folder khusus. Dia tidak bisa dibrowse oleh user aplikasi. Maksudnya adalah, user aplikasi tidak bisa mengetik <code>http://localhost:8080/belajar/WEB-INF</code> di browser untuk menampilkan isi folder <code>WEB-INF</code>. Jadi bila kita memiliki file yang tidak boleh dilihat user (misalnya konfigurasi, logfile, file temporary, dan sebagainya), kita bisa letakkan file-file tersebut dalam folder <code>WEB-INF</code>.</p>

<p>Di dalam folder ini biasanya ada dua folder khusus lain, yaitu</p>

<ul>
<li><code>classes</code> : berisi file <code>*.class</code> hasil kompilasi dari source code <code>*.java</code> kita</li>
<li><code>lib</code> : berisi file <code>*.jar</code>, library tambahan yang kita gunakan seperti driver JDBC, JSON processor, pengolah tanggal, dan lainnya</li>
</ul>


<h2>File web.xml</h2>

<p>File ini berisi konfigurasi dari aplikasi web kita. Di Java EE versi terbaru, file ini tidak harus ada. Tapi di Java EE versi terdahulu, dia wajib disertakan. Untuk amannya, agar aplikasi kita kompatibel dengan application server jadul, ada baiknya kita sertakan saja. Toh file ini juga akan kita buat kalau kita menggunakan framework seperti Spring MVC, JSF, Struts, dan sebagainya. Berikut isi file <code>web.xml</code> yang paling sederhana, yaitu hanya berisi <em>root tag</em> <code>webapp</code> kosong.</p>

<p>```xml
&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;web-app xmlns="http://java.sun.com/xml/ns/javaee"</p>

<pre><code>      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
      version="3.0"&gt;
</code></pre>

<p></web-app>
```</p>

<p>Nantinya, file ini bisa berisi konfigurasi:</p>

<ul>
<li>Servlet</li>
<li>Filter</li>
<li>Listener</li>
<li>Welcome Page : halaman yang dibuka kalau user tidak menyebutkan apa-apa, misalnya <code>http://aplikasi-saya.com/</code></li>
<li>Error Page : halaman error bila URL yang diminta tidak ada (404), user belum login (401), ijin akses tidak memadai (403), error aplikasi (500), dan sebagainya</li>
<li>Session timeout : rentang waktu user tidak mengakses aplikasi hingga session-nya dinyatakan kadaluarsa</li>
</ul>


<h1>Alur Eksekusi HTTP</h1>

<blockquote><p>Apa yang terjadi bila kita mengetik <code>http://localhost:8080/aplikasi-web-sederhana/halo.php?nama=endy</code> di browser?</p></blockquote>

<ol>
<li>Browser akan mengakses port 8080 di localhost, yaitu komputer kita sendiri.</li>
<li>Kita asumsikan bahwa Tomcat berjalan di port 8080, maka request ini akan diterima Tomcat</li>
<li>Tomcat akan mencari aplikasi bernama <code>aplikasi-web-sederhana</code>. Biasanya aplikasi ini ditandai dengan adanya folder <code>aplikasi-web-sederhana</code> dalam folder <code>&lt;lokasi instalasi tomcat&gt;/webapps</code>. Folder ini akan terbentuk bila kita mendeploy file bernama <code>aplikasi-web-sederhana.war</code> seperti telah dijelaskan di atas.</li>
<li>Tomcat akan mencari kode program yang bertanggung jawab menerima request <code>halo.php</code>. Biasanya penanggung jawab ini adalah servlet yang dideklarasikan dalam <code>aplikasi-web-sederhana/WEB-INF/web.xml</code></li>
<li>Bila penanggung jawab tidak ditemukan, Tomcat akan mengembalikan kode error 404, artinya tidak ditemukan. Bila penanggung jawab ada, maka Tomcat akan memberikan data-data request kepada penanggung jawab ini untuk ditangani. Data request yang tersedia diantaranya adalah request parameter, HTTP header, dan request body</li>
<li>Servlet yang bertanggung jawab akan memproses request, kemudian menghasilkan response. Response dikirim ke browser yang mengaksesnya.</li>
</ol>


<p>Sebagai ilustrasi, untuk menangani request <code>http://localhost:8080/aplikasi-web-sederhana/halo.php?nama=endy</code>, kita harus membuat deklarasi servlet di <code>web.xml</code> sebagai berikut:</p>

<p>```xml
<servlet></p>

<pre><code>&lt;servlet-name&gt;halo&lt;/servlet-name&gt;
&lt;servlet-class&gt;com.muhardin.endy.training.web.HaloServlet&lt;/servlet-class&gt;
</code></pre>

<p></servlet></p>

<p><servlet-mapping></p>

<pre><code>&lt;servlet-name&gt;halo&lt;/servlet-name&gt;
&lt;url-pattern&gt;/halo.php&lt;/url-pattern&gt;
</code></pre>

<p></servlet-mapping>
```</p>

<p>Kemudian membuat class <code>HaloServlet</code> dalam package <code>com.muhardin.endy.training.web</code> yang isinya sebagai berikut</p>

<p>```java
public class HaloServlet extends HttpServlet {</p>

<pre><code>public void doGet(HttpServletRequest request, HttpServletResponse response) {
    try {
        String asal = request.getRemoteAddr();
        String nama = request.getParameter("nama");

        String output = "&lt;html&gt;";
        output += "&lt;body&gt;";
        output += "&lt;h1&gt;Halo "+nama+"&lt;/h1&gt;";
        output += "&lt;h2&gt;Anda datang dari "+asal+"&lt;/h2&gt;";
        output += "&lt;/body&gt;";
        output += "&lt;/html&gt;";

        // content type = html
        response.setContentType("text/html");
        response.getWriter().print(output);
    } catch (IOException ex) {
        Logger.getLogger(HaloServlet.class.getName()).log(Level.SEVERE, null, ex);
    }
}
</code></pre>

<p>}
```</p>

<p>Pembaca yang teliti akan merasa heran</p>

<blockquote><p>Lho kok ekstensi requestnya <code>.php</code>?</p></blockquote>

<p>Aplikasi web Java tidak peduli terhadap ekstensi request. Yang penting sesuai dengan mapping dalam <code>web.xml</code>. Jadi kita bisa pasang <code>halo.php</code>, <code>halo.jsp</code>, <code>halo.html</code>, <code>halo.asp</code>, bahkan <code>halo.halo</code>. Selama URL tersebut terdaftar dalam <code>web.xml</code>, maka request akan diproses dengan baik.</p>

<p>Source code lengkap bisa diakses <a href="https://github.com/endymuhardin/materi-kuliah-java-web/tree/master/sample-code/sesi-01/aplikasi-web-sederhana">di sini</a></p>

<h1>Komponen Aplikasi Web Java</h1>

<h2>Servlet</h2>

<p>Digunakan untuk menerima HTTP request dan membuat HTTP response</p>

<p>Cara membuat:</p>

<ol>
<li>Buat class yang extends <code>HttpServlet</code></li>
<li><p>Implement method sesuai HTTP method yang akan kita gunakan.</p>

<ul>
<li>GET -> doGet(HttpServletRequest req, HttpServletResponse res)</li>
<li>POST -> doPost(HttpServletRequest req, HttpServletResponse res)</li>
<li>dst</li>
</ul>
</li>
<li><p>Buat mappingnya di <code>web.xml</code></p></li>
<li>Compile dan deploy ke application server</li>
<li>Test browse ke <code>http://localhost:8080/aplikasi-web-sederhana/halo.php?nama=endy</code></li>
</ol>


<h3>HaloServlet.java</h3>

<p>```java
public class HaloServlet extends HttpServlet {</p>

<pre><code>public void doGet(HttpServletRequest request, HttpServletResponse response) {
    try {
        String asal = request.getRemoteAddr();
        String nama = request.getParameter("nama");

        String output = "&lt;html&gt;";
        output += "&lt;body&gt;";
        output += "&lt;h1&gt;Halo "+nama+"&lt;/h1&gt;";
        output += "&lt;h2&gt;Anda datang dari "+asal+"&lt;/h2&gt;";
        output += "&lt;/body&gt;";
        output += "&lt;/html&gt;";

        // content type = html
        response.setContentType("text/html");
        response.getWriter().print(output);
    } catch (IOException ex) {
        Logger.getLogger(HaloServlet.class.getName()).log(Level.SEVERE, null, ex);
    }
}
</code></pre>

<p>}
```</p>

<h3>web.xml</h3>

<p>```xml
<servlet></p>

<pre><code>&lt;servlet-name&gt;halo&lt;/servlet-name&gt;
&lt;servlet-class&gt;com.muhardin.endy.training.web.HaloServlet&lt;/servlet-class&gt;
</code></pre>

<p></servlet></p>

<p><servlet-mapping></p>

<pre><code>&lt;servlet-name&gt;halo&lt;/servlet-name&gt;
&lt;url-pattern&gt;/halo.php&lt;/url-pattern&gt;
</code></pre>

<p></servlet-mapping>
```</p>

<h2>Filter</h2>

<p>Digunakan untuk :</p>

<ul>
<li>mencegat HTTP request sebelum ditangani servlet</li>
<li>mencegat HTTP response sebelum dikirim ke requester</li>
</ul>


<p>Contoh penggunaan :</p>

<ul>
<li>memproteksi URL yang membutuhkan login (Spring Security)</li>
<li>mendekorasi HTML dengan header/footer/sidebar (Sitemesh)</li>
<li>kompresi response</li>
</ul>


<p>Contoh implementasi :</p>

<h3>Java (kode program)</h3>

<p>```java
public class HaloFilter implements Filter{</p>

<pre><code>public void init(FilterConfig fc) throws ServletException {
    System.out.println("Filter diinisialisasi");
}

public void doFilter(ServletRequest request, ServletResponse response, FilterChain fc) throws IOException, ServletException {
    System.out.println("Mencegat request");
    fc.doFilter(request, response);
    System.out.println("Mencegat response");
}

public void destroy() {
    System.out.println("Filter di-destroy");
}
</code></pre>

<p>}
```</p>

<h3>web.xml (konfigurasi)</h3>

<p>```xml
<filter></p>

<pre><code>&lt;filter-name&gt;haloFilter&lt;/filter-name&gt;
&lt;filter-class&gt;com.muhardin.endy.training.web.HaloFilter&lt;/filter-class&gt;
</code></pre>

<p></filter></p>

<p><filter-mapping></p>

<pre><code>&lt;filter-name&gt;haloFilter&lt;/filter-name&gt;
&lt;url-pattern&gt;/*&lt;/url-pattern&gt;
</code></pre>

<p></filter-mapping>
```</p>

<h2>Listener</h2>

<p>Digunakan untuk merespon event dalam aplikasi, misalnya:</p>

<ul>
<li>aplikasi distart / deploy (context created)</li>
<li>aplikasi distop / undeploy (context destroyed)</li>
<li>session dibuat</li>
<li>session timeout</li>
<li>session dihapus (invalidation)</li>
</ul>


<p>Contoh implementasi:</p>

<h3>Java (kode program)</h3>

<p>```java
public class HaloListener implements ServletContextListener, HttpSessionListener{</p>

<pre><code>public void contextInitialized(ServletContextEvent sce) {
    System.out.println("Aplikasi start");
}

public void contextDestroyed(ServletContextEvent sce) {
    System.out.println("Aplikasi stop");
}

public void sessionCreated(HttpSessionEvent hse) {
    System.out.println("Ada session baru");
}

public void sessionDestroyed(HttpSessionEvent hse) {
    System.out.println("Session di-destroy");
}
</code></pre>

<p>}
```</p>

<h3>web.xml (konfigurasi)</h3>

<p>```xml
<listener></p>

<pre><code>&lt;listener-class&gt;com.muhardin.endy.training.web.HaloListener&lt;/listener-class&gt;
</code></pre>

<p></listener>
```</p>

<p>Demikianlah konsep dasar aplikasi web di Java. Untuk bisa memahami, tentu kita harus sering berlatih membuat kode program, tidak hanya membaca tutorial saja. Contoh kode program lainnya bisa dilihat <a href="https://github.com/endymuhardin/materi-kuliah-java-web/tree/master/sample-code">di sini</a>. Silahkan dipraktekkan dan dilihat hasilnya.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prasyarat Integrasi Aplikasi]]></title>
    <link href="http://software.endy.muhardin.com/java/prasyarat-integrasi-aplikasi/"/>
    <updated>2014-01-03T10:43:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/prasyarat-integrasi-aplikasi</id>
    <content type="html"><![CDATA[<p>Posting kali ini jawaban dari pertanyaan yang masuk melalui email:</p>

<blockquote><p>Saya membaca tulisan anda <a href="http://software.endy.muhardin.com/java/integrasi-aplikasi/">di sini</a>
Cukup menarik, dan saya ingin bertanya jika berkenan, sehubungan dengan payment gateway.</p>

<p>Apakah kita bisa mengimplementasikan sendiri ISO-8583 pada aplikasi kita untuk terhubung ke bank di Indonesia ?
Misal kita bisa cek saldo tabungan melalui aplikasi kita sendiri ?</p>

<p>Atas sharing pengetahuannya saya ucapkan terima kasih.</p></blockquote>

<p>Berikut jawaban saya</p>

<!--more-->


<p>Untuk bisa connect ke aplikasi lain (misalnya aplikasi bank), ada beberapa prasyarat yang harus dipenuhi <strong>secara berurutan</strong>:</p>

<ol>
<li>aksesnya harus dibuka (ip address, port, firewall, dsb). Biasanya ini melibatkan faktor non-teknis seperti deal bisnis, non-disclosure agreement, perjanjian berkekuatan hukum, dan sejenisnya.</li>
<li>protokol komunikasinya harus diketahui (http, iso8583, dsb)</li>
<li>kita harus bikin aplikasi yg bisa berkomunikasi dengan aplikasi yang dituju menggunakan protokol yang ditentukan di poin #2. Jadi harus tahu fitur apa saja yang tersedia, bagaimana memanggilnya, apa inputnya, bagaimana format outputnya, apa tipe datanya, dsb.</li>
</ol>


<p>Kalau tiga faktor di atas terpenuhi, jangankan cuma aplikasi bank di Indonesia, aplikasinya Snowden juga bisa kita akses ;)</p>

<p>Oh, sebelum artikel ini diakhiri, saya harus bikin disclaimer dulu.</p>

<blockquote><p>Saya tidak bertanggung jawab kalau ada <em>smarta$$</em> yang setelah baca artikel ini lalu nekat mengakses aplikasi orang lain hanya bermodalkan #2 dan #3 tanpa punya #1.</p></blockquote>
]]></content>
  </entry>
  
</feed>
