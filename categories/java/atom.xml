<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Living life and make it better]]></title>
  <link href="http://software.endy.muhardin.com/categories/java/atom.xml" rel="self"/>
  <link href="http://software.endy.muhardin.com/"/>
  <updated>2014-02-10T17:19:13+07:00</updated>
  <id>http://software.endy.muhardin.com/</id>
  <author>
    <name><![CDATA[Endy Muhardin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dasar-dasar Aplikasi Web Java]]></title>
    <link href="http://software.endy.muhardin.com/java/dasar-dasar-aplikasi-web-java/"/>
    <updated>2014-01-20T20:12:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/dasar-dasar-aplikasi-web-java</id>
    <content type="html"><![CDATA[<p>Pada artikel terdahulu, kita telah membahas tentang <a href="http://software.endy.muhardin.com/life/lan-na-zha/">pentingnya penguasaan terhadap konsep dasar</a>. Kali ini, kita akan membahas tentang konsep dasar aplikasi web di Java. Ini juga akan menjawab pertanyaan yang sering ditanyakan di forum yaitu</p>

<blockquote><p>Saya ingin belajar Java Enterprise Edition (Java EE), apa yang pertama harus saya pelajari?</p></blockquote>

<!--more-->


<p>Java EE sangat luas cakupannya, di antaranya adalah:</p>

<ul>
<li>Java Servlet</li>
<li>JavaServer Faces</li>
<li>JavaServer Pages</li>
<li>Java Persistence</li>
<li><a href="http://www.oracle.com/technetwork/java/javaee/tech/index.html">dan masih banyak lagi</a></li>
</ul>


<p>Untuk bisa memahami semuanya, tentu kita harus memulai dari yang paling sederhana dulu, yaitu Java Servlet. Teknologi ini adalah dasar dari semua aplikasi web di Java. Tanpa pemahaman terhadap teknologi ini, sulit bagi kita untuk mempelajari framework atau library yang lebih canggih seperti Spring MVC, Struts, JavaServer Faces, dan berbagai framework web lainnya. Kenapa sulit? Karena semua framework tersebut dibangun di atas Java Servlet. Kalau pondasinya saja tidak paham, bagaimana mau belajar yang lain?</p>

<p>Ada beberapa hal penting yang harus dipahami dalam Java Servlet, yaitu:</p>

<ul>
<li>Struktur Folder Aplikasi Web Java</li>
<li>Alur eksekusi HTTP Request sampai menghasilkan HTTP Response</li>
<li><p>Tiga komponen Java Servlet yaitu:</p>

<ul>
<li>Servlet</li>
<li>Filter</li>
<li>Listener</li>
</ul>
</li>
</ul>


<p>Mari kita bahas satu persatu.</p>

<h1>Struktur Folder</h1>

<p>Aplikasi web Java struktur foldernya harus mengikuti kaidah berikut</p>

<p><img src="https://github.com/endymuhardin/materi-kuliah-java-web/blob/master/materi-kuliah/img/struktur-folder-web-java.png?raw=true" alt="Struktur Folder Aplikasi Web Java" /></p>

<p>Gambar di atas adalah struktur folder aplikasi yang siap dijalankan. Oleh karena itu kita tidak melihat adanya source code Java di sana.</p>

<p>Setelah kita memiliki struktur folder seperti di atas, aplikasi siap dipaketkan (package) supaya bisa dideploy di application server. Packaging dilakukan dengan membungkus folder di atas dengan algoritma <code>zip</code>. Kita bisa menggunakan aplikasi kompresi seperti WinZip ataupun WinRAR. Bila kita menggunakan WinRAR, harus diingat bahwa algoritma yang digunakan haruslah <code>zip</code>, bukan <code>rar</code></p>

<p>Setelah di-zip, rename extension file menjadi <code>war</code> agar dikenali oleh application server. <code>war</code> merupakan singkatan dari Web Archive.</p>

<p>Untuk menjalankan aplikasi di application server (misalnya Tomcat), berikut langkah-langkah deployment:</p>

<ul>
<li>masukkan file <code>war</code> ke folder deployment sesuai merek application server yang digunakan</li>
<li>contoh: untuk Tomcat, folder deploymentnya adalah <code>webapps</code></li>
<li>Tomcat akan meng-extract file <code>war</code> tersebut</li>
<li>Setelah deployment selesai (ditandai dengan file telah diextract dan tidak ada error di log) aplikasi bisa dibrowse di <code>http://ip-server:port/nama-file-war/index.html</code></li>
</ul>


<p>Bila aplikasi tidak lagi digunakan, kita bisa melakukan undeploy. Caranya:</p>

<ul>
<li>hapus file <code>war</code> dari folder deployment</li>
<li>setelah folder aplikasi terhapus, undeploy berarti sukses</li>
</ul>


<p>Ada beberapa hal yang harus diperhatikan dalam struktur folder di atas, yaitu:</p>

<ul>
<li>Folder <code>WEB-INF</code></li>
<li>File <code>web.xml</code></li>
</ul>


<h2>Folder WEB-INF</h2>

<p>Folder ini adalah folder khusus. Dia tidak bisa dibrowse oleh user aplikasi. Maksudnya adalah, user aplikasi tidak bisa mengetik <code>http://localhost:8080/belajar/WEB-INF</code> di browser untuk menampilkan isi folder <code>WEB-INF</code>. Jadi bila kita memiliki file yang tidak boleh dilihat user (misalnya konfigurasi, logfile, file temporary, dan sebagainya), kita bisa letakkan file-file tersebut dalam folder <code>WEB-INF</code>.</p>

<p>Di dalam folder ini biasanya ada dua folder khusus lain, yaitu</p>

<ul>
<li><code>classes</code> : berisi file <code>*.class</code> hasil kompilasi dari source code <code>*.java</code> kita</li>
<li><code>lib</code> : berisi file <code>*.jar</code>, library tambahan yang kita gunakan seperti driver JDBC, JSON processor, pengolah tanggal, dan lainnya</li>
</ul>


<h2>File web.xml</h2>

<p>File ini berisi konfigurasi dari aplikasi web kita. Di Java EE versi terbaru, file ini tidak harus ada. Tapi di Java EE versi terdahulu, dia wajib disertakan. Untuk amannya, agar aplikasi kita kompatibel dengan application server jadul, ada baiknya kita sertakan saja. Toh file ini juga akan kita buat kalau kita menggunakan framework seperti Spring MVC, JSF, Struts, dan sebagainya. Berikut isi file <code>web.xml</code> yang paling sederhana, yaitu hanya berisi <em>root tag</em> <code>webapp</code> kosong.</p>

<p>```xml
&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;web-app xmlns="http://java.sun.com/xml/ns/javaee"</p>

<pre><code>      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
      version="3.0"&gt;
</code></pre>

<p></web-app>
```</p>

<p>Nantinya, file ini bisa berisi konfigurasi:</p>

<ul>
<li>Servlet</li>
<li>Filter</li>
<li>Listener</li>
<li>Welcome Page : halaman yang dibuka kalau user tidak menyebutkan apa-apa, misalnya <code>http://aplikasi-saya.com/</code></li>
<li>Error Page : halaman error bila URL yang diminta tidak ada (404), user belum login (401), ijin akses tidak memadai (403), error aplikasi (500), dan sebagainya</li>
<li>Session timeout : rentang waktu user tidak mengakses aplikasi hingga session-nya dinyatakan kadaluarsa</li>
</ul>


<h1>Alur Eksekusi HTTP</h1>

<blockquote><p>Apa yang terjadi bila kita mengetik <code>http://localhost:8080/aplikasi-web-sederhana/halo.php?nama=endy</code> di browser?</p></blockquote>

<ol>
<li>Browser akan mengakses port 8080 di localhost, yaitu komputer kita sendiri.</li>
<li>Kita asumsikan bahwa Tomcat berjalan di port 8080, maka request ini akan diterima Tomcat</li>
<li>Tomcat akan mencari aplikasi bernama <code>aplikasi-web-sederhana</code>. Biasanya aplikasi ini ditandai dengan adanya folder <code>aplikasi-web-sederhana</code> dalam folder <code>&lt;lokasi instalasi tomcat&gt;/webapps</code>. Folder ini akan terbentuk bila kita mendeploy file bernama <code>aplikasi-web-sederhana.war</code> seperti telah dijelaskan di atas.</li>
<li>Tomcat akan mencari kode program yang bertanggung jawab menerima request <code>halo.php</code>. Biasanya penanggung jawab ini adalah servlet yang dideklarasikan dalam <code>aplikasi-web-sederhana/WEB-INF/web.xml</code></li>
<li>Bila penanggung jawab tidak ditemukan, Tomcat akan mengembalikan kode error 404, artinya tidak ditemukan. Bila penanggung jawab ada, maka Tomcat akan memberikan data-data request kepada penanggung jawab ini untuk ditangani. Data request yang tersedia diantaranya adalah request parameter, HTTP header, dan request body</li>
<li>Servlet yang bertanggung jawab akan memproses request, kemudian menghasilkan response. Response dikirim ke browser yang mengaksesnya.</li>
</ol>


<p>Sebagai ilustrasi, untuk menangani request <code>http://localhost:8080/aplikasi-web-sederhana/halo.php?nama=endy</code>, kita harus membuat deklarasi servlet di <code>web.xml</code> sebagai berikut:</p>

<p>```xml
<servlet></p>

<pre><code>&lt;servlet-name&gt;halo&lt;/servlet-name&gt;
&lt;servlet-class&gt;com.muhardin.endy.training.web.HaloServlet&lt;/servlet-class&gt;
</code></pre>

<p></servlet></p>

<p><servlet-mapping></p>

<pre><code>&lt;servlet-name&gt;halo&lt;/servlet-name&gt;
&lt;url-pattern&gt;/halo.php&lt;/url-pattern&gt;
</code></pre>

<p></servlet-mapping>
```</p>

<p>Kemudian membuat class <code>HaloServlet</code> dalam package <code>com.muhardin.endy.training.web</code> yang isinya sebagai berikut</p>

<p>```java
public class HaloServlet extends HttpServlet {</p>

<pre><code>public void doGet(HttpServletRequest request, HttpServletResponse response) {
    try {
        String asal = request.getRemoteAddr();
        String nama = request.getParameter("nama");

        String output = "&lt;html&gt;";
        output += "&lt;body&gt;";
        output += "&lt;h1&gt;Halo "+nama+"&lt;/h1&gt;";
        output += "&lt;h2&gt;Anda datang dari "+asal+"&lt;/h2&gt;";
        output += "&lt;/body&gt;";
        output += "&lt;/html&gt;";

        // content type = html
        response.setContentType("text/html");
        response.getWriter().print(output);
    } catch (IOException ex) {
        Logger.getLogger(HaloServlet.class.getName()).log(Level.SEVERE, null, ex);
    }
}
</code></pre>

<p>}
```</p>

<p>Pembaca yang teliti akan merasa heran</p>

<blockquote><p>Lho kok ekstensi requestnya <code>.php</code>?</p></blockquote>

<p>Aplikasi web Java tidak peduli terhadap ekstensi request. Yang penting sesuai dengan mapping dalam <code>web.xml</code>. Jadi kita bisa pasang <code>halo.php</code>, <code>halo.jsp</code>, <code>halo.html</code>, <code>halo.asp</code>, bahkan <code>halo.halo</code>. Selama URL tersebut terdaftar dalam <code>web.xml</code>, maka request akan diproses dengan baik.</p>

<p>Source code lengkap bisa diakses <a href="https://github.com/endymuhardin/materi-kuliah-java-web/tree/master/sample-code/sesi-01/aplikasi-web-sederhana">di sini</a></p>

<h1>Komponen Aplikasi Web Java</h1>

<h2>Servlet</h2>

<p>Digunakan untuk menerima HTTP request dan membuat HTTP response</p>

<p>Cara membuat:</p>

<ol>
<li>Buat class yang extends <code>HttpServlet</code></li>
<li><p>Implement method sesuai HTTP method yang akan kita gunakan.</p>

<ul>
<li>GET -> doGet(HttpServletRequest req, HttpServletResponse res)</li>
<li>POST -> doPost(HttpServletRequest req, HttpServletResponse res)</li>
<li>dst</li>
</ul>
</li>
<li><p>Buat mappingnya di <code>web.xml</code></p></li>
<li>Compile dan deploy ke application server</li>
<li>Test browse ke <code>http://localhost:8080/aplikasi-web-sederhana/halo.php?nama=endy</code></li>
</ol>


<h3>HaloServlet.java</h3>

<p>```java
public class HaloServlet extends HttpServlet {</p>

<pre><code>public void doGet(HttpServletRequest request, HttpServletResponse response) {
    try {
        String asal = request.getRemoteAddr();
        String nama = request.getParameter("nama");

        String output = "&lt;html&gt;";
        output += "&lt;body&gt;";
        output += "&lt;h1&gt;Halo "+nama+"&lt;/h1&gt;";
        output += "&lt;h2&gt;Anda datang dari "+asal+"&lt;/h2&gt;";
        output += "&lt;/body&gt;";
        output += "&lt;/html&gt;";

        // content type = html
        response.setContentType("text/html");
        response.getWriter().print(output);
    } catch (IOException ex) {
        Logger.getLogger(HaloServlet.class.getName()).log(Level.SEVERE, null, ex);
    }
}
</code></pre>

<p>}
```</p>

<h3>web.xml</h3>

<p>```xml
<servlet></p>

<pre><code>&lt;servlet-name&gt;halo&lt;/servlet-name&gt;
&lt;servlet-class&gt;com.muhardin.endy.training.web.HaloServlet&lt;/servlet-class&gt;
</code></pre>

<p></servlet></p>

<p><servlet-mapping></p>

<pre><code>&lt;servlet-name&gt;halo&lt;/servlet-name&gt;
&lt;url-pattern&gt;/halo.php&lt;/url-pattern&gt;
</code></pre>

<p></servlet-mapping>
```</p>

<h2>Filter</h2>

<p>Digunakan untuk :</p>

<ul>
<li>mencegat HTTP request sebelum ditangani servlet</li>
<li>mencegat HTTP response sebelum dikirim ke requester</li>
</ul>


<p>Contoh penggunaan :</p>

<ul>
<li>memproteksi URL yang membutuhkan login (Spring Security)</li>
<li>mendekorasi HTML dengan header/footer/sidebar (Sitemesh)</li>
<li>kompresi response</li>
</ul>


<p>Contoh implementasi :</p>

<h3>Java (kode program)</h3>

<p>```java
public class HaloFilter implements Filter{</p>

<pre><code>public void init(FilterConfig fc) throws ServletException {
    System.out.println("Filter diinisialisasi");
}

public void doFilter(ServletRequest request, ServletResponse response, FilterChain fc) throws IOException, ServletException {
    System.out.println("Mencegat request");
    fc.doFilter(request, response);
    System.out.println("Mencegat response");
}

public void destroy() {
    System.out.println("Filter di-destroy");
}
</code></pre>

<p>}
```</p>

<h3>web.xml (konfigurasi)</h3>

<p>```xml
<filter></p>

<pre><code>&lt;filter-name&gt;haloFilter&lt;/filter-name&gt;
&lt;filter-class&gt;com.muhardin.endy.training.web.HaloFilter&lt;/filter-class&gt;
</code></pre>

<p></filter></p>

<p><filter-mapping></p>

<pre><code>&lt;filter-name&gt;haloFilter&lt;/filter-name&gt;
&lt;url-pattern&gt;/*&lt;/url-pattern&gt;
</code></pre>

<p></filter-mapping>
```</p>

<h2>Listener</h2>

<p>Digunakan untuk merespon event dalam aplikasi, misalnya:</p>

<ul>
<li>aplikasi distart / deploy (context created)</li>
<li>aplikasi distop / undeploy (context destroyed)</li>
<li>session dibuat</li>
<li>session timeout</li>
<li>session dihapus (invalidation)</li>
</ul>


<p>Contoh implementasi:</p>

<h3>Java (kode program)</h3>

<p>```java
public class HaloListener implements ServletContextListener, HttpSessionListener{</p>

<pre><code>public void contextInitialized(ServletContextEvent sce) {
    System.out.println("Aplikasi start");
}

public void contextDestroyed(ServletContextEvent sce) {
    System.out.println("Aplikasi stop");
}

public void sessionCreated(HttpSessionEvent hse) {
    System.out.println("Ada session baru");
}

public void sessionDestroyed(HttpSessionEvent hse) {
    System.out.println("Session di-destroy");
}
</code></pre>

<p>}
```</p>

<h3>web.xml (konfigurasi)</h3>

<p>```xml
<listener></p>

<pre><code>&lt;listener-class&gt;com.muhardin.endy.training.web.HaloListener&lt;/listener-class&gt;
</code></pre>

<p></listener>
```</p>

<p>Demikianlah konsep dasar aplikasi web di Java. Untuk bisa memahami, tentu kita harus sering berlatih membuat kode program, tidak hanya membaca tutorial saja. Contoh kode program lainnya bisa dilihat <a href="https://github.com/endymuhardin/materi-kuliah-java-web/tree/master/sample-code">di sini</a>. Silahkan dipraktekkan dan dilihat hasilnya.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prasyarat Integrasi Aplikasi]]></title>
    <link href="http://software.endy.muhardin.com/java/prasyarat-integrasi-aplikasi/"/>
    <updated>2014-01-03T10:43:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/prasyarat-integrasi-aplikasi</id>
    <content type="html"><![CDATA[<p>Posting kali ini jawaban dari pertanyaan yang masuk melalui email:</p>

<blockquote><p>Saya membaca tulisan anda <a href="http://software.endy.muhardin.com/java/integrasi-aplikasi/">di sini</a>
Cukup menarik, dan saya ingin bertanya jika berkenan, sehubungan dengan payment gateway.</p>

<p>Apakah kita bisa mengimplementasikan sendiri ISO-8583 pada aplikasi kita untuk terhubung ke bank di Indonesia ?
Misal kita bisa cek saldo tabungan melalui aplikasi kita sendiri ?</p>

<p>Atas sharing pengetahuannya saya ucapkan terima kasih.</p></blockquote>

<p>Berikut jawaban saya</p>

<!--more-->


<p>Untuk bisa connect ke aplikasi lain (misalnya aplikasi bank), ada beberapa prasyarat yang harus dipenuhi <strong>secara berurutan</strong>:</p>

<ol>
<li>aksesnya harus dibuka (ip address, port, firewall, dsb). Biasanya ini melibatkan faktor non-teknis seperti deal bisnis, non-disclosure agreement, perjanjian berkekuatan hukum, dan sejenisnya.</li>
<li>protokol komunikasinya harus diketahui (http, iso8583, dsb)</li>
<li>kita harus bikin aplikasi yg bisa berkomunikasi dengan aplikasi yang dituju menggunakan protokol yang ditentukan di poin #2. Jadi harus tahu fitur apa saja yang tersedia, bagaimana memanggilnya, apa inputnya, bagaimana format outputnya, apa tipe datanya, dsb.</li>
</ol>


<p>Kalau tiga faktor di atas terpenuhi, jangankan cuma aplikasi bank di Indonesia, aplikasinya Snowden juga bisa kita akses ;)</p>

<p>Oh, sebelum artikel ini diakhiri, saya harus bikin disclaimer dulu.</p>

<blockquote><p>Saya tidak bertanggung jawab kalau ada <em>smarta$$</em> yang setelah baca artikel ini lalu nekat mengakses aplikasi orang lain hanya bermodalkan #2 dan #3 tanpa punya #1.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meningkatkan performance Android Emulator]]></title>
    <link href="http://software.endy.muhardin.com/java/meningkatkan-performance-android-emulator/"/>
    <updated>2013-12-10T17:39:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/meningkatkan-performance-android-emulator</id>
    <content type="html"><![CDATA[<p>Setelah kemarin kita mempersiapkan persenjataan untuk coding Android, langkah selanjutnya tentu saja membuat aplikasi <code>Hello World</code> dan kemudian mencoba menjalankannya. Ada dua pilihan cara menjalankan aplikasi Android, yaitu langsung di <em>device</em> atau menggunakan emulator.</p>

<p>Sayangnya, secara default emulator Android sangat lemot. Sedangkan kecepatan kita dalam membangun aplikasi sangat ditentukan oleh kecepatan kita melakukan siklus <em>edit-test-fix</em>. Kalau langkah <em>test</em> butuh waktu lama, dengan sendirinya proses development kita juga akan butuh waktu lama.</p>

<p>Untungnya ada teknik yang tersedia untuk meningkatkan kecepatan emulator Android, yaitu dengan <a href="http://software.intel.com/en-us/articles/speeding-up-the-android-emulator-on-intel-architecture">menggunakan emulator berbasis Intel platform</a>. Kita akan bahas cara-caranya di artikel ini.</p>

<p><img src="http://lh5.googleusercontent.com/-ynU8SU2Efd0/Uqa45WE4K_I/AAAAAAAAC7w/umEdkuO7wqA/w467-h623-no/20131210_134625.jpg"></p>

<!--more-->


<p>Prinsip dasarnya adalah, kita memanfaatkan fitur virtualisasi yang sudah tersedia di prosesor Intel generasi saat ini. Dengan fitur ini, emulator Android bisa berjalan dengan lebih cepat karena ada dukungan di prosesor. Tentunya terlebih dulu kita harus melakukan pengecekan apakah prosesor di komputer kita sudah mendukung fitur ini atau belum.</p>

<p>Di Windows dan Mac, fitur ini diaktifkan dengan driver khusus dari Intel yang disebut dengan Intel® Hardware Accelerated Execution Manager (Intel® HAXM). Sedangkan pada Linux, fitur ini tersedia dalam aplikasi virtualisasi KVM.</p>

<p>Mari kita bahas cara pengecekannya satu persatu dengan Linux maupun dengan Windows.</p>

<h2>Instalasi di Linux</h2>

<p>Berikut adalah langkah-langkahnya:</p>

<ol>
<li>Verifikasi apakah prosesor kita sudah mendukung</li>
<li>Instalasi KVM</li>
<li>Membuat emulator Intel di Android Virtual Device (AVD) Manager</li>
</ol>


<h3>Verifikasi Dukungan Prosesor</h3>

<p>Di Ubuntu, kita bisa menjalankan perintah berikut di terminal.</p>

<p><code>
egrep -c '(vmx|svm)' /proc/cpuinfo
</code></p>

<p>Kalau outputnya <code>0</code>, berarti komputer kita tidak support. Angka <code>1</code> atau lebih menunjukkan bahwa komputer kita mendukung KVM.</p>

<h3>Instalasi KVM</h3>

<p>Berikut perintahnya</p>

<p><code>
sudo apt-get install qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils
</code></p>

<p>Setelah selesai, kita harus logout dan login lagi, karena Ubuntu menambahkan user kita ke grup <code>libvirtd</code>. Penambahan ke grup ini baru dibaca pada saat kita login.</p>

<p>Kita bisa tes kesuksesan proses instalasi, jalankan perintah berikut:</p>

<p><code>
virsh -c qemu:///system list
</code></p>

<p>Bila sukses, outputnya seperti ini</p>

<p>```</p>

<h2> Id Name                 State</h2>

<p>```</p>

<p>Bila gagal, outputnya seperti ini</p>

<p><code>
libvir: Remote error : Permission denied
error: failed to connect to the hypervisor
</code></p>

<p>Selanjutnya, kita tinggal membuat Android Virtual Device (AVD) yang menggunakan platform Intel. Langkah ini akan kita bahas setelah penjelasan tentang cara instalasi Intel® HAXM di Windows.</p>

<h2>Instalasi di Windows</h2>

<p>Instalasi Intel® HAXM dilakukan melalui Android SDK Manager. Opsinya ada di folder Extra di paling bawah.
Jangan lupa instal juga emulator Intel sekaligus.</p>

<p><img src="http://lh4.googleusercontent.com/-ZitwHacTB50/UqcZWbt1alI/AAAAAAAAC8Y/T_rChtMx4m0/w746-h576-no/haxm01.png"></p>

<p>Instalasi melalui Android SDK Manager ini ternyata hanya mengunduh Intel® HAXM saja. Kita tetap harus menginstalnya sendiri. Cari filenya dalam folder <code>extras</code> dalam Android SDK.</p>

<p><img src="http://lh6.googleusercontent.com/-vyyFTq3bx_4/UqcZVfev3QI/AAAAAAAAC8Q/fAcHpy2KJMo/w233-h122-no/haxm02.png"></p>

<p>Jalankan saja installer seperti biasa. Klik Next sampai selesai.</p>

<h2>Membuat Emulator Intel</h2>

<p>Selanjutnya, kita tinggal membuat AVD seperti biasa. Pastikan kita pilih opsi platform Intel.</p>

<p><img src="http://lh3.googleusercontent.com/-phoDzK--s64/Uqcbh-dQWzI/AAAAAAAAC8s/2WWFtnFY1TE/w572-h623-no/Edit+Android+Virtual+Device+%2528AVD%2529+_001.png"></p>

<p>Jangan lupa untuk mencentang juga opsi <code>Use Host GPU</code> untuk mengalihkan beban pemrosesan tampilan dari emulator ke komputer kita.</p>

<p>Selamat mencoba, seharusnya sekarang emulator bisa dijalankan dengan lebih cepat. Oh iya, ada sedikit keterbatasan. Pada saat artikel ini ditulis, Intel belum merilis emulator untuk Android versi terbaru (KitKat / API level 19). Jadi kita terpaksa coding menggunakan API level 18.</p>

<p>Semoga bermanfaat</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Persiapan Coding Java]]></title>
    <link href="http://software.endy.muhardin.com/java/persiapan-coding-java/"/>
    <updated>2013-11-27T11:10:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/persiapan-coding-java</id>
    <content type="html"><![CDATA[<p>Sebelum kita mulai coding, langkah pertama tentulah menginstal persenjataan. Perlengkapan minimal yang dibutuhkan untuk coding Java sebenarnya cuma:</p>

<ul>
<li>Java SDK</li>
<li>Text editor. Tidak perlu yang canggih, asal ada warnanya seperti Gedit, Notepad++, dan sejenisnya</li>
</ul>


<p>Kalau sudah pakai library tambahan --seperti driver database, framework, dan lainnya-- maka perlu menggunakan <a href="http://maven.apache.org">Maven</a> supaya mudah mengelolanya. Berikut adalah langkah-langkah persiapannya.</p>

<!--more-->


<h2>Langkah Instalasi</h2>

<p>Secara garis besar, langkah-langkahnya sebagai berikut:</p>

<ol>
<li>Install Java SDK</li>
<li>Extract Maven</li>
<li>Setting <em>Environment Variable</em></li>
</ol>


<p>Ada 2 <em>environment variable</em> yang harus dibuat karena belum ada, yaitu:</p>

<ul>
<li>JAVA_HOME : lokasi instalasi Java SDK</li>
<li>M2_HOME : lokasi extract Maven</li>
</ul>


<p>Dan satu yang harus diedit, yaitu variabel <code>PATH</code>. Tambahkan:</p>

<ul>
<li>JAVA_HOME/bin : lokasi compiler java</li>
<li>M2_HOME/bin : lokasi perintah <code>mvn</code></li>
</ul>


<p>Berikut caranya di Ubuntu dan Windows 8.</p>

<h2>Instalasi di Ubuntu</h2>

<p>Di Ubuntu tidak sulit, tinggal install saja paket <code>openjdk-7-jdk</code>. Terserah mau pakai GUI atau command line. Setelah itu kita extract <a href="http://maven.apache.org">Maven</a> di folder manapun yang kita suka. Biasanya saya extract di folder <code>/opt</code>.</p>

<p>Untuk menambahkan environment variable kita edit file <code>/etc/environment</code> sehingga isinya menjadi seperti ini</p>

<p><code>
JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64
M2_HOME=/opt/apache-maven-3.1.1
PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/opt/apache-maven-3.1.1/bin"
</code></p>

<p>Setelah <code>/etc/environment</code> diedit, restart komputer supaya isi file tersebut dibaca semua aplikasi.</p>

<p>Mudah bukan? Bandingkan panjang penjelasannya dengan Windows di bawah ini ;p</p>

<h2>Instalasi di Windows</h2>

<h3>Instalasi JDK dan Maven</h3>

<p>Java SDK bisa diunduh <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">di sini</a>. Ambil yang <code>JDK</code>, bukan <code>Server JRE</code> ataupun <code>JRE</code>. Setelah terunduh, jalankan installernya, klik Next-next sampai selesai.</p>

<p>Maven bisa diunduh di <a href="http://maven.apache.org">websitenya</a>. Setelah terunduh, extract ke folder manapun. Biasanya saya taruh di folder Program Files</p>

<p><img src="http://lh4.googleusercontent.com/-88rrGGuOgjU/UpVtUVWgtII/AAAAAAAACeU/6uGPetDKkT0/s600/01.+Folder+Program+Files.png"></p>

<p><a name="environment-variable-windows"></a></p>

<h3>Setting Environment Variable</h3>

<p>Selanjutnya sama, kita harus tambahkan variabel <code>JAVA_HOME</code> dan <code>M2_HOME</code>, kemudian edit variabel <code>PATH</code>. Pertama, klik kanan My Computer di Windows Explorer.</p>

<p><img src="http://lh4.googleusercontent.com/-8Cih2iGl_pQ/UpVtUzzuPFI/AAAAAAAACeM/aPAT_hokw-Q/s600/03.+My+Computer+-+Properties.png"></p>

<p>Kemudian tekan Properties. Muncul layar System Information</p>

<p><img src="http://lh5.googleusercontent.com/-Sx6WUwPghwI/UpVtXZKBDhI/AAAAAAAACek/9mq4DYMJ2HQ/s600/04.+System+Properties.png"></p>

<p>Klik Advanced System Setting untuk memunculkan System Properties</p>

<p><img src="http://lh3.googleusercontent.com/-BsUFuPg6rXI/UpVtVzN8ndI/AAAAAAAACeY/WzJtJDNMDEM/s600/04.+System+Properties+-+Environment+Variables.png"></p>

<p>Tekan tombol Environment Variables. Setelah muncul layarnya, tekan tombol <code>New</code> di kotak yang bawah (<code>System Variables</code>). Kemudian isi nama variable <code>JAVA_HOME</code> seperti ini</p>

<p><img src="http://lh3.googleusercontent.com/-ErYIcSxokVo/UpVtXlKvfFI/AAAAAAAACes/cf3WGL5toyc/s600/05.+JAVA_HOME.png"></p>

<p>Nilai <code>value</code> bisa dicopy-paste dari Windows Explorer. Pastikan dia menunjuk ke lokasi instalasi Java SDK</p>

<p><img src="http://lh6.googleusercontent.com/-5RRmCmNhnQ4/UpVtU7VKGBI/AAAAAAAACeE/KVwPyHsp3a0/s600/02.+Folder+Instalasi+Java.png"></p>

<p>Lakukan hal yang sama untuk variabel <code>M2_HOME</code></p>

<p><img src="http://lh6.googleusercontent.com/-ikCikrAAF9M/UpVtXuMUf5I/AAAAAAAACe0/N-Qx-fTacBc/s400/06.+M2_HOME.png"></p>

<p>Cari variabel bernama <code>Path</code>, kemudian Edit</p>

<p><img src="http://lh4.googleusercontent.com/-JNctbwhxp7I/UpVtYZRQuVI/AAAAAAAACfE/y852SKFSYXM/s400/08.+PATH.png"></p>

<p>Isinya adalah sebagai berikut</p>

<p><code>
whatever-isi-path-yang-lama;%JAVA_HOME%\bin;%M2_HOME%\bin
</code></p>

<p>Perhatikan bahwa variabel PATH berisi banyak nilai, di Windows masing-masingnya dipisahkan oleh tanda <code>;</code>. Sedangkan di Linux, dipisahkan oleh tanda <code>:</code></p>

<p>Klik OK untuk menutup semua dialog. Setelah itu kita test. Buka command prompt baru. Kalau sebelumnya sudah membuka command prompt, harus ditutup dulu dan buka yang baru. Konfigurasi yang benar hasilnya seperti ini</p>

<p><img src="http://lh3.googleusercontent.com/-t4G5eQTWL4I/UpVtZPYbJ5I/AAAAAAAACfI/LLj_LzB9H2s/s600/09.+Test+JDK+dan+Maven.png"></p>

<p>Kalau tidak seperti itu, periksa lagi isi <code>JAVA_HOME</code>, <code>M2_HOME</code>, dan <code>PATH</code>.</p>

<p>Selamat coding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kumpulan Tutorial Spring Framework]]></title>
    <link href="http://software.endy.muhardin.com/java/kumpulan-tutorial-spring-framework/"/>
    <updated>2013-11-25T11:40:00+07:00</updated>
    <id>http://software.endy.muhardin.com/java/kumpulan-tutorial-spring-framework</id>
    <content type="html"><![CDATA[<p>Seringkali di milis dan forum banyak yang menanyakan tentang tutorial <a href="http://projects.spring.io/spring-framework/">Spring Framework</a>. Sebetulnya di blog ini banyak, tapi repot juga kalau harus cari-cari di arsip. Jadi, saya buatkan indeks seluruh artikel tentang Spring Framework dalam blog ini. Selamat menikmati :D</p>

<!--more-->


<ol>
<li><p>Fundamental</p>

<ul>
<li><a href="http://software.endy.muhardin.com/java/intro-framework/">Alasan menggunakan framework</a></li>
<li><a href="http://software.endy.muhardin.com/java/memahami-dependency-injection/">Konsep Inversion of Control</a></li>
</ul>
</li>
<li><p>Konfigurasi Spring Framework</p>

<ul>
<li><a href="http://software.endy.muhardin.com/java/struktur-aplikasi-java-dengan-spring-dan-maven/">Struktur folder project</a></li>
<li><a href="http://software.endy.muhardin.com/java/log4j-spring-mvc/">Konfigurasi Logging</a></li>
<li><a href="http://software.endy.muhardin.com/java/staged-deployment/">Konfigurasi Deployment</a></li>
</ul>
</li>
<li><p>Akses Database</p>

<ul>
<li><a href="http://software.endy.muhardin.com/java/konfigurasi-koneksi-database-dengan-spring/">Koneksi database</a></li>
<li><a href="http://software.endy.muhardin.com/java/insert-update-delete-dengan-spring-jdbc/">Insert Update Delete</a></li>
<li><a href="http://software.endy.muhardin.com/java/query-dengan-spring-jdbc/">Query</a></li>
<li><a href="http://software.endy.muhardin.com/java/mengetes-akses-database/">Testing Kode Akses Database</a></li>
</ul>
</li>
<li><p>Aplikasi Web dengan Spring MVC</p>

<ul>
<li><a href="http://software.endy.muhardin.com/java/aplikasi-web-spring25-1/">Membuat halaman web dinamis</a></li>
<li><a href="http://software.endy.muhardin.com/java/aplikasi-web-spring25-2/">Membuat form input</a></li>
<li><a href="http://software.endy.muhardin.com/java/aplikasi-web-spring25-3/">Membuat template aplikasi</a></li>
<li><a href="http://software.endy.muhardin.com/java/aplikasi-web-spring25-4/">Upload File</a></li>
<li><a href="http://software.endy.muhardin.com/java/aplikasi-web-spring25-5/">Session Management</a></li>
<li><a href="http://software.endy.muhardin.com/java/aplikasi-web-spring25-6/">Internationalization (i18n) dan Localization (l10n)</a></li>
</ul>
</li>
<li><p>Integrasi Aplikasi</p>

<ul>
<li><a href="http://software.endy.muhardin.com/java/integrasi-aplikasi/">Konsep Integrasi Aplikasi</a></li>
<li><a href="http://software.endy.muhardin.com/java/remoting-dengan-spring/">Remoting : Menyediakan akses dan mengakses aplikasi dari aplikasi lain</a></li>
<li><a href="http://software.endy.muhardin.com/java/integrasi-pusat-cabang-1/">Studi Kasus Integrasi Aplikasi</a></li>
<li><a href="http://software.endy.muhardin.com/java/integrasi-pusat-cabang-2/">Integrasi Aplikasi melalui Gmail</a></li>
<li><a href="http://software.endy.muhardin.com/java/integrasi-pusat-cabang-3/">Messaging dan Routing</a></li>
<li><a href="http://software.endy.muhardin.com/java/spring-httpinvoker-sun-jre6-httpserver/">Menjalankan HTTP Server dengan Spring</a></li>
</ul>
</li>
</ol>


<p>Kalau pusing membaca, bisa nonton <a href="https://www.youtube.com/playlist?list=PL9oC_cq7OYbxOX-SxNPsi4r17GOVyHYJI">videonya di Youtube</a>. Source code yang dibahas dalam video bisa diambil <a href="https://github.com/endymuhardin/belajar-spring">di sini</a> dan <a href="https://github.com/endymuhardin/training-2013-01">di sini</a>.</p>
]]></content>
  </entry>
  
</feed>
